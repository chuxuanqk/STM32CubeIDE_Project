
Ocm_deom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000674  20000000  0800301c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000354  20000674  08003690  00020674  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200009c8  08003690  000209c8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001288  00000000  00000000  0002069d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000058d  00000000  00000000  00021925  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008e8  00000000  00000000  00021eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  000227a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001d9c  00000000  00000000  00022f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000125a  00000000  00000000  00024d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00025f66  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002428  00000000  00000000  00025fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002840c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000674 	.word	0x20000674
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ff4 	.word	0x08002ff4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000678 	.word	0x20000678
 8000148:	08002ff4 	.word	0x08002ff4

0800014c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015c:	2b00      	cmp	r3, #0
 800015e:	da0b      	bge.n	8000178 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	b2da      	uxtb	r2, r3
 8000164:	490c      	ldr	r1, [pc, #48]	; (8000198 <NVIC_SetPriority+0x4c>)
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f003 030f 	and.w	r3, r3, #15
 800016c:	3b04      	subs	r3, #4
 800016e:	0112      	lsls	r2, r2, #4
 8000170:	b2d2      	uxtb	r2, r2
 8000172:	440b      	add	r3, r1
 8000174:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000176:	e009      	b.n	800018c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	b2da      	uxtb	r2, r3
 800017c:	4907      	ldr	r1, [pc, #28]	; (800019c <NVIC_SetPriority+0x50>)
 800017e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000182:	0112      	lsls	r2, r2, #4
 8000184:	b2d2      	uxtb	r2, r2
 8000186:	440b      	add	r3, r1
 8000188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000ed00 	.word	0xe000ed00
 800019c:	e000e100 	.word	0xe000e100

080001a0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001ae:	d301      	bcc.n	80001b4 <SysTick_Config+0x14>
 80001b0:	2301      	movs	r3, #1
 80001b2:	e011      	b.n	80001d8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80001ba:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <SysTick_Config+0x40>)
 80001bc:	3b01      	subs	r3, #1
 80001be:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80001c0:	210f      	movs	r1, #15
 80001c2:	f04f 30ff 	mov.w	r0, #4294967295
 80001c6:	f7ff ffc1 	bl	800014c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ca:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SysTick_Config+0x40>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <SysTick_Config+0x40>)
 80001d2:	2207      	movs	r2, #7
 80001d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80001d6:	2300      	movs	r3, #0
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	e000e010 	.word	0xe000e010

080001e4 <Config_Data_ReInit>:

union STM32_ID_12Byte STM32_ID;
Config_Data_Str Config_Data;

void Config_Data_ReInit(Config_Data_Str *config)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *temp_ptr = (u8 *)config;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60bb      	str	r3, [r7, #8]
    //清零所有参数
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80001f0:	2300      	movs	r3, #0
 80001f2:	81fb      	strh	r3, [r7, #14]
 80001f4:	e007      	b.n	8000206 <Config_Data_ReInit+0x22>
    {
        temp_ptr[i] = 0;
 80001f6:	89fb      	ldrh	r3, [r7, #14]
 80001f8:	68ba      	ldr	r2, [r7, #8]
 80001fa:	4413      	add	r3, r2
 80001fc:	2200      	movs	r2, #0
 80001fe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000200:	89fb      	ldrh	r3, [r7, #14]
 8000202:	3301      	adds	r3, #1
 8000204:	81fb      	strh	r3, [r7, #14]
 8000206:	89fb      	ldrh	r3, [r7, #14]
 8000208:	2b15      	cmp	r3, #21
 800020a:	d9f4      	bls.n	80001f6 <Config_Data_ReInit+0x12>
    }
    //设置默认值
    config->save_data_flag = 1;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2201      	movs	r2, #1
 8000210:	751a      	strb	r2, [r3, #20]

    // Dev_Config_Reinit(&(config->dev_con));
    // Dev_Config_Reinit((config->dev_con));
};
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr

0800021c <Write_Config_To_Flash>:

void Write_Config_To_Flash(Config_Data_Str *config)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *data_ptr = (u8 *)config;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	60fb      	str	r3, [r7, #12]
    u32 flash_addr = CONFIG_DATA_FLASH_ADDR;
 8000228:	4b22      	ldr	r3, [pc, #136]	; (80002b4 <Write_Config_To_Flash+0x98>)
 800022a:	613b      	str	r3, [r7, #16]
    FLASH_Unlock();                                                                            /* 每次擦除Flash中数据时得先解锁 */
 800022c:	f001 fc90 	bl	8001b50 <FLASH_Unlock>
    FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR); //清除标记
 8000230:	2035      	movs	r0, #53	; 0x35
 8000232:	f001 fcff 	bl	8001c34 <FLASH_ClearFlag>

    // 页擦除
    for (i = 0; i < (sizeof(Config_Data_Str) / FLASH_Page_SIZE + 1); i++)
 8000236:	2300      	movs	r3, #0
 8000238:	82fb      	strh	r3, [r7, #22]
 800023a:	e00e      	b.n	800025a <Write_Config_To_Flash+0x3e>
        while (FLASH_COMPLETE != FLASH_ErasePage(CONFIG_DATA_FLASH_ADDR + i * FLASH_Page_SIZE))
 800023c:	bf00      	nop
 800023e:	8afb      	ldrh	r3, [r7, #22]
 8000240:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000244:	333f      	adds	r3, #63	; 0x3f
 8000246:	029b      	lsls	r3, r3, #10
 8000248:	4618      	mov	r0, r3
 800024a:	f001 fc93 	bl	8001b74 <FLASH_ErasePage>
 800024e:	4603      	mov	r3, r0
 8000250:	2b04      	cmp	r3, #4
 8000252:	d1f4      	bne.n	800023e <Write_Config_To_Flash+0x22>
    for (i = 0; i < (sizeof(Config_Data_Str) / FLASH_Page_SIZE + 1); i++)
 8000254:	8afb      	ldrh	r3, [r7, #22]
 8000256:	3301      	adds	r3, #1
 8000258:	82fb      	strh	r3, [r7, #22]
 800025a:	8afb      	ldrh	r3, [r7, #22]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0ed      	beq.n	800023c <Write_Config_To_Flash+0x20>
            ;

    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000260:	2300      	movs	r3, #0
 8000262:	82fb      	strh	r3, [r7, #22]
 8000264:	e01f      	b.n	80002a6 <Write_Config_To_Flash+0x8a>
    {
        while (FLASH_COMPLETE != FLASH_ProgramHalfWord(flash_addr, (data_ptr[i] + data_ptr[i + 1] * 256)))
 8000266:	bf00      	nop
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	4413      	add	r3, r2
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b29a      	uxth	r2, r3
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	3301      	adds	r3, #1
 8000276:	68f9      	ldr	r1, [r7, #12]
 8000278:	440b      	add	r3, r1
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	b29b      	uxth	r3, r3
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	b29b      	uxth	r3, r3
 8000282:	4413      	add	r3, r2
 8000284:	b29b      	uxth	r3, r3
 8000286:	4619      	mov	r1, r3
 8000288:	6938      	ldr	r0, [r7, #16]
 800028a:	f001 fca5 	bl	8001bd8 <FLASH_ProgramHalfWord>
 800028e:	4603      	mov	r3, r0
 8000290:	2b04      	cmp	r3, #4
 8000292:	d1e9      	bne.n	8000268 <Write_Config_To_Flash+0x4c>
            ;
        i++;
 8000294:	8afb      	ldrh	r3, [r7, #22]
 8000296:	3301      	adds	r3, #1
 8000298:	82fb      	strh	r3, [r7, #22]
        flash_addr += 2;
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	3302      	adds	r3, #2
 800029e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80002a0:	8afb      	ldrh	r3, [r7, #22]
 80002a2:	3301      	adds	r3, #1
 80002a4:	82fb      	strh	r3, [r7, #22]
 80002a6:	8afb      	ldrh	r3, [r7, #22]
 80002a8:	2b15      	cmp	r3, #21
 80002aa:	d9dc      	bls.n	8000266 <Write_Config_To_Flash+0x4a>
    }
}
 80002ac:	bf00      	nop
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	0800fc00 	.word	0x0800fc00

080002b8 <Read_Config_Form_Flash>:

void Read_Config_Form_Flash(Config_Data_Str *config)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *data_ptr = (u8 *)config;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	60fb      	str	r3, [r7, #12]
    u16 tmp_read;
    u32 flash_addr = CONFIG_DATA_FLASH_ADDR;
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <Read_Config_Form_Flash+0x74>)
 80002c6:	613b      	str	r3, [r7, #16]

    // 读取指定地址的数据
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80002c8:	2300      	movs	r3, #0
 80002ca:	82fb      	strh	r3, [r7, #22]
 80002cc:	e01c      	b.n	8000308 <Read_Config_Form_Flash+0x50>
    {
        tmp_read = *(vu16 *)(flash_addr);
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	817b      	strh	r3, [r7, #10]
        data_ptr[i] = tmp_read % 256;
 80002d4:	8afb      	ldrh	r3, [r7, #22]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	4413      	add	r3, r2
 80002da:	897a      	ldrh	r2, [r7, #10]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	701a      	strb	r2, [r3, #0]
        i++;
 80002e0:	8afb      	ldrh	r3, [r7, #22]
 80002e2:	3301      	adds	r3, #1
 80002e4:	82fb      	strh	r3, [r7, #22]
        if (i < sizeof(Config_Data_Str))
 80002e6:	8afb      	ldrh	r3, [r7, #22]
 80002e8:	2b15      	cmp	r3, #21
 80002ea:	d807      	bhi.n	80002fc <Read_Config_Form_Flash+0x44>
            data_ptr[i] = tmp_read / 256;
 80002ec:	897b      	ldrh	r3, [r7, #10]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b299      	uxth	r1, r3
 80002f2:	8afb      	ldrh	r3, [r7, #22]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	4413      	add	r3, r2
 80002f8:	b2ca      	uxtb	r2, r1
 80002fa:	701a      	strb	r2, [r3, #0]

        flash_addr += 2;
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	3302      	adds	r3, #2
 8000300:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000302:	8afb      	ldrh	r3, [r7, #22]
 8000304:	3301      	adds	r3, #1
 8000306:	82fb      	strh	r3, [r7, #22]
 8000308:	8afb      	ldrh	r3, [r7, #22]
 800030a:	2b15      	cmp	r3, #21
 800030c:	d9df      	bls.n	80002ce <Read_Config_Form_Flash+0x16>
    }

    //判断是否为第一次启动
    if (config->save_data_flag != 1)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	7d1b      	ldrb	r3, [r3, #20]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d005      	beq.n	8000322 <Read_Config_Form_Flash+0x6a>
    {
        Config_Data_ReInit(config);    //重置所有参数
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f7ff ff64 	bl	80001e4 <Config_Data_ReInit>
        Write_Config_To_Flash(config); //回写参数到flash
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ff7d 	bl	800021c <Write_Config_To_Flash>
    }
}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	0800fc00 	.word	0x0800fc00

08000330 <Cpu_GetId>:

//读取ChipID
void Cpu_GetId(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
    STM32_ID.id_u32[0] = *(__IO u32 *)(0x1FFFF7E8); //产品唯一身份标识寄存器(96位)
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <Cpu_GetId+0x24>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <Cpu_GetId+0x28>)
 800033a:	6013      	str	r3, [r2, #0]
    STM32_ID.id_u32[1] = *(__IO u32 *)(0x1FFFF7EC);
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <Cpu_GetId+0x2c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <Cpu_GetId+0x28>)
 8000342:	6053      	str	r3, [r2, #4]
    STM32_ID.id_u32[2] = *(__IO u32 *)(0x1FFFF7F0);
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <Cpu_GetId+0x30>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a03      	ldr	r2, [pc, #12]	; (8000358 <Cpu_GetId+0x28>)
 800034a:	6093      	str	r3, [r2, #8]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	1ffff7e8 	.word	0x1ffff7e8
 8000358:	20000698 	.word	0x20000698
 800035c:	1ffff7ec 	.word	0x1ffff7ec
 8000360:	1ffff7f0 	.word	0x1ffff7f0

08000364 <RCC_Configuration>:

void RCC_Configuration(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
    ErrorStatus HSEStartUpStatus;

    RCC_DeInit();
 800036a:	f001 fdc5 	bl	8001ef8 <RCC_DeInit>
    RCC_HSEConfig(RCC_HSE_ON);
 800036e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000372:	f001 fdef 	bl	8001f54 <RCC_HSEConfig>
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000376:	f001 fe1b 	bl	8001fb0 <RCC_WaitForHSEStartUp>
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
    if (HSEStartUpStatus == SUCCESS)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d122      	bne.n	80003ca <RCC_Configuration+0x66>
    {
        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000384:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000388:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800038c:	f001 fe38 	bl	8002000 <RCC_PLLConfig>
        RCC_PLLCmd(ENABLE);
 8000390:	2001      	movs	r0, #1
 8000392:	f001 fe53 	bl	800203c <RCC_PLLCmd>
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY == RESET))
 8000396:	bf00      	nop
 8000398:	2000      	movs	r0, #0
 800039a:	f002 f823 	bl	80023e4 <RCC_GetFlagStatus>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f9      	bne.n	8000398 <RCC_Configuration+0x34>
        {
        }
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80003a4:	2002      	movs	r0, #2
 80003a6:	f001 fe59 	bl	800205c <RCC_SYSCLKConfig>

        RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80003aa:	2000      	movs	r0, #0
 80003ac:	f001 fe80 	bl	80020b0 <RCC_HCLKConfig>
        RCC_PCLK1Config(RCC_HCLK_Div2);
 80003b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80003b4:	f001 fe98 	bl	80020e8 <RCC_PCLK1Config>
        RCC_PCLK2Config(RCC_HCLK_Div1); //串口波特率的确定
 80003b8:	2000      	movs	r0, #0
 80003ba:	f001 feb1 	bl	8002120 <RCC_PCLK2Config>

        while (RCC_GetSYSCLKSource() != 0x08)
 80003be:	bf00      	nop
 80003c0:	f001 fe68 	bl	8002094 <RCC_GetSYSCLKSource>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1fa      	bne.n	80003c0 <RCC_Configuration+0x5c>
        {
        }
    }
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <NVIC_Configuration>:

static void NVIC_Configuration(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	af00      	add	r7, sp, #0
#ifdef VETB_TAB_RAM
    NVYC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
 80003d6:	2100      	movs	r1, #0
 80003d8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80003dc:	f000 feda 	bl	8001194 <NVIC_SetVectorTable>
#endif
    /* Configure one bit for preemption priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 80003e0:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80003e4:	f000 fe62 	bl	80010ac <NVIC_PriorityGroupConfig>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <hw_board_init>:

void hw_board_init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    RCC_Configuration();  // 初始化时钟
 80003f0:	f7ff ffb8 	bl	8000364 <RCC_Configuration>
    NVIC_Configuration(); // 初始化向量中断
 80003f4:	f7ff ffed 	bl	80003d2 <NVIC_Configuration>

    //启动系统时钟信号，设置时间为1ms
    SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); //AHB=72M/8=9M
 80003f8:	f06f 0004 	mvn.w	r0, #4
 80003fc:	f000 fee0 	bl	80011c0 <SysTick_CLKSourceConfig>
    SysTick_Config(SYSTICK_TICK);
 8000400:	f242 3028 	movw	r0, #9000	; 0x2328
 8000404:	f7ff fecc 	bl	80001a0 <SysTick_Config>

    Cpu_GetId();                          //网关物理地址
 8000408:	f7ff ff92 	bl	8000330 <Cpu_GetId>
    Read_Config_Form_Flash(&Config_Data); //载入保存的25个Net_ID
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <hw_board_init+0x2c>)
 800040e:	f7ff ff53 	bl	80002b8 <Read_Config_Form_Flash>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200006a4 	.word	0x200006a4

0800041c <RCC_Configuration>:
};

struct can_rx_data can_receive; // can接收数据缓存

static void RCC_Configuration(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	/* CAN Periph clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000420:	2101      	movs	r1, #1
 8000422:	2004      	movs	r0, #4
 8000424:	f001 ff66 	bl	80022f4 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000428:	2101      	movs	r1, #1
 800042a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800042e:	f001 ff7f 	bl	8002330 <RCC_APB1PeriphClockCmd>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}

08000436 <NVIC_Configuration>:

static void NVIC_Configuration(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable CAN1 RX0 interrupt IRQ channel */
	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800043c:	2314      	movs	r3, #20
 800043e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8000444:	2303      	movs	r3, #3
 8000446:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000448:	2301      	movs	r3, #1
 800044a:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fe3e 	bl	80010d0 <NVIC_Init>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <GPIO_Configuration>:

static void GPIO_Configuration(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure CAN pin: RX */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8000462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000466:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000468:	2303      	movs	r3, #3
 800046a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 800046c:	2328      	movs	r3, #40	; 0x28
 800046e:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4619      	mov	r1, r3
 8000474:	4808      	ldr	r0, [pc, #32]	; (8000498 <GPIO_Configuration+0x3c>)
 8000476:	f001 fc37 	bl	8001ce8 <GPIO_Init>

	/* Configure CAN pin: TX */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 800047a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800047e:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000480:	2318      	movs	r3, #24
 8000482:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	4619      	mov	r1, r3
 8000488:	4803      	ldr	r0, [pc, #12]	; (8000498 <GPIO_Configuration+0x3c>)
 800048a:	f001 fc2d 	bl	8001ce8 <GPIO_Init>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40010800 	.word	0x40010800

0800049c <CAN_Configuration>:

static void CAN_Configuration(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
	CAN_InitTypeDef CAN_InitStructure;
	CAN_FilterInitTypeDef CAN_FilterInitStructure;

	CAN_DeInit(CAN1);
 80004a2:	4821      	ldr	r0, [pc, #132]	; (8000528 <CAN_Configuration+0x8c>)
 80004a4:	f000 fea8 	bl	80011f8 <CAN_DeInit>
	CAN_StructInit(&CAN_InitStructure);
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 f859 	bl	8001564 <CAN_StructInit>

	/* CAN cell init */
	CAN_InitStructure.CAN_TTCM = DISABLE;		  /* 时间触发禁止, 时间触发：CAN硬件的内部定时器被激活，并且被用于产生时间戳 */
 80004b2:	2300      	movs	r3, #0
 80004b4:	76bb      	strb	r3, [r7, #26]
	CAN_InitStructure.CAN_ABOM = ENABLE;		  /* 自动离线禁止，自动离线：一旦硬件监控到128次11个隐性位，就自动退出离线状态。在这里要软件设定后才能退出 */
 80004b6:	2301      	movs	r3, #1
 80004b8:	76fb      	strb	r3, [r7, #27]
	CAN_InitStructure.CAN_AWUM = DISABLE;		  /* 自动唤醒禁止，有报文来的时候自动退出休眠	*/
 80004ba:	2300      	movs	r3, #0
 80004bc:	773b      	strb	r3, [r7, #28]
	CAN_InitStructure.CAN_NART = DISABLE;		  /* 报文重传, 如果错误一直传到成功止，否则只传一次 */
 80004be:	2300      	movs	r3, #0
 80004c0:	777b      	strb	r3, [r7, #29]
	CAN_InitStructure.CAN_RFLM = DISABLE;		  /* 接收FIFO锁定, 1--锁定后接收到新的报文摘不要，0--接收到新的报文则覆盖前一报文	*/
 80004c2:	2300      	movs	r3, #0
 80004c4:	77bb      	strb	r3, [r7, #30]
	CAN_InitStructure.CAN_TXFP = ENABLE;		  /* 发送优先级  0---由标识符决定  1---由发送请求顺序决定	*/
 80004c6:	2301      	movs	r3, #1
 80004c8:	77fb      	strb	r3, [r7, #31]
	CAN_InitStructure.CAN_Mode = CAN_Mode_Normal; /* 模式	*/
 80004ca:	2300      	movs	r3, #0
 80004cc:	75bb      	strb	r3, [r7, #22]
	CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;	  /* 重新同步跳宽，只有can硬件处于初始化模式时才能访问这个寄存器 */
 80004ce:	2300      	movs	r3, #0
 80004d0:	75fb      	strb	r3, [r7, #23]
	CAN_InitStructure.CAN_BS1 = CAN_BS1_4tq;	  /* 时间段1 */
 80004d2:	2303      	movs	r3, #3
 80004d4:	763b      	strb	r3, [r7, #24]
	CAN_InitStructure.CAN_BS2 = CAN_BS2_3tq;	  /* 时间段2 */
 80004d6:	2302      	movs	r3, #2
 80004d8:	767b      	strb	r3, [r7, #25]
	CAN_InitStructure.CAN_Prescaler = 45;		  /* 波特率预分频数 */
 80004da:	232d      	movs	r3, #45	; 0x2d
 80004dc:	82bb      	strh	r3, [r7, #20]

	/* 波特率计算方法 */
	/* CANbps= Fpclk/((BRP+1)*((Tseg1+1)+(Tseg2+1)+1)  此处计算为  CANbps=36000000/(45*(4+3+1))=100kHz */ //此处Tseg1+1 = CAN_BS1_8tp
	/* 配置大方向: Tseg1>=Tseg2  Tseg2>=tq; Tseg2>=2TSJW */

	if (CAN_Init(CAN1, &CAN_InitStructure) == CANINITFAILED)
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4619      	mov	r1, r3
 80004e4:	4810      	ldr	r0, [pc, #64]	; (8000528 <CAN_Configuration+0x8c>)
 80004e6:	f000 feab 	bl	8001240 <CAN_Init>
	/* 要注意的是fifo接收存满了中断，还有就是fifo的概念，即取的一直是最早那一个数据， 要释放才能取下一个数据 */
	/* 常使用的中断有 */
	/* 1,有信息中断，即fifo挂号中断 */
	/* 2,fifo满中断	*/
	/* 3,fifo满之后又有信息来则中断，即fifo溢出中断	*/
	CAN_FilterInitStructure.CAN_FilterNumber = 0;					 /* 过滤器0 */
 80004ea:	2300      	movs	r3, #0
 80004ec:	73bb      	strb	r3, [r7, #14]
	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;	 /* 屏敝模式 */
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]
	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit; /* 32位 */
 80004f2:	2301      	movs	r3, #1
 80004f4:	743b      	strb	r3, [r7, #16]
	CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;				 /* 以下四个都为0, 表明不过滤任何id */
 80004f6:	2300      	movs	r3, #0
 80004f8:	80bb      	strh	r3, [r7, #4]
	CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;
 80004fa:	2300      	movs	r3, #0
 80004fc:	80fb      	strh	r3, [r7, #6]
	CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000;
 80004fe:	2300      	movs	r3, #0
 8000500:	813b      	strh	r3, [r7, #8]
	CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;
 8000502:	2300      	movs	r3, #0
 8000504:	817b      	strh	r3, [r7, #10]
	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0; /* 能够通过该过滤器的报文存到fifo0中 */
 8000506:	2300      	movs	r3, #0
 8000508:	81bb      	strh	r3, [r7, #12]
	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
 800050a:	2301      	movs	r3, #1
 800050c:	747b      	strb	r3, [r7, #17]
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE); /* 挂号中断, 进入中断后读fifo的报文函数释放报文清中断标志 */
 800050e:	2201      	movs	r2, #1
 8000510:	2102      	movs	r1, #2
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <CAN_Configuration+0x8c>)
 8000514:	f001 f90d 	bl	8001732 <CAN_ITConfig>
	//CAN_ITConfig(CAN1,CAN_IT_TME, ENABLE);      //发送中断
	CAN_FilterInit(&CAN_FilterInitStructure);
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	4618      	mov	r0, r3
 800051c:	f000 ff60 	bl	80013e0 <CAN_FilterInit>
}
 8000520:	bf00      	nop
 8000522:	3720      	adds	r7, #32
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40006400 	.word	0x40006400

0800052c <USB_HP_CAN1_TX_IRQHandler>:

//CAN1 Send IRQ
void USB_HP_CAN1_TX_IRQHandler(void) //CAN1发送中断
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <USB_LP_CAN1_RX0_IRQHandler>:

//CAN1 RX0 IRQ
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
	CanRxMsg RxMessage;

	RxMessage.IDE = CAN_ID_EXT;
 800053e:	2304      	movs	r3, #4
 8000540:	733b      	strb	r3, [r7, #12]
	CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	461a      	mov	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <USB_LP_CAN1_RX0_IRQHandler+0x30>)
 800054a:	f001 f835 	bl	80015b8 <CAN_Receive>

	can_rx_isr_hook(&RxMessage); // 对接收的数据进行处理
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	4618      	mov	r0, r3
 8000552:	f3af 8000 	nop.w

	CAN_ClearITPendingBit(CAN1, CAN_IT_FMP0);
 8000556:	2102      	movs	r1, #2
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <USB_LP_CAN1_RX0_IRQHandler+0x30>)
 800055a:	f001 f907 	bl	800176c <CAN_ClearITPendingBit>
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40006400 	.word	0x40006400

0800056c <hw_can_init>:
	CAN_CancelTransmit(CAN1, 1);
	CAN_CancelTransmit(CAN1, 2);
}

void hw_can_init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	RCC_Configuration();
 8000570:	f7ff ff54 	bl	800041c <RCC_Configuration>
	NVIC_Configuration();
 8000574:	f7ff ff5f 	bl	8000436 <NVIC_Configuration>
	GPIO_Configuration();
 8000578:	f7ff ff70 	bl	800045c <GPIO_Configuration>
	CAN_Configuration();
 800057c:	f7ff ff8e 	bl	800049c <CAN_Configuration>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <RCC_Configuration>:
 */

#include "gpio.h"

static void RCC_Configuration(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000588:	2101      	movs	r1, #1
 800058a:	2008      	movs	r0, #8
 800058c:	f001 feb2 	bl	80022f4 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000590:	2101      	movs	r1, #1
 8000592:	2010      	movs	r0, #16
 8000594:	f001 feae 	bl	80022f4 <RCC_APB2PeriphClockCmd>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <GPIO_Configuration>:

static void GPIO_Configuration(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005a2:	2303      	movs	r3, #3
 80005a4:	71bb      	strb	r3, [r7, #6]

  /* Configure USART Rx/tx PIN */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80005a6:	2310      	movs	r3, #16
 80005a8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4619      	mov	r1, r3
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <GPIO_Configuration+0x44>)
 80005b6:	f001 fb97 	bl	8001ce8 <GPIO_Init>
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <GPIO_Configuration+0x48>)
 80005c0:	f001 fb92 	bl	8001ce8 <GPIO_Init>

  GPIO_SetBits(GPIOB, GPIO_Pin_13);
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <GPIO_Configuration+0x44>)
 80005ca:	f001 fc62 	bl	8001e92 <GPIO_SetBits>
  GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <GPIO_Configuration+0x48>)
 80005d4:	f001 fc6b 	bl	8001eae <GPIO_ResetBits>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40010c00 	.word	0x40010c00
 80005e4:	40011000 	.word	0x40011000

080005e8 <hw_gpio_init>:

void hw_gpio_init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  RCC_Configuration();
 80005ec:	f7ff ffca 	bl	8000584 <RCC_Configuration>
  GPIO_Configuration();
 80005f0:	f7ff ffd4 	bl	800059c <GPIO_Configuration>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <RCC_Configuration>:

void led_close(struct LED_Sharp_Struct *led_dev);

/************************************************************************/
static void RCC_Configuration(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80005fc:	2101      	movs	r1, #1
 80005fe:	2004      	movs	r0, #4
 8000600:	f001 fe78 	bl	80022f4 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000604:	2101      	movs	r1, #1
 8000606:	2008      	movs	r0, #8
 8000608:	f001 fe74 	bl	80022f4 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800060c:	2101      	movs	r1, #1
 800060e:	2010      	movs	r0, #16
 8000610:	f001 fe70 	bl	80022f4 <RCC_APB2PeriphClockCmd>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <GPIO_Configuration>:

static void GPIO_Configuration(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800061e:	2303      	movs	r3, #3
 8000620:	71bb      	strb	r3, [r7, #6]

    /* Configure USART Rx/tx PIN */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000622:	2310      	movs	r3, #16
 8000624:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = GPIO_PIN_NET;
 8000626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062a:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(GPIO_NET, &GPIO_InitStructure);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4619      	mov	r1, r3
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <GPIO_Configuration+0x60>)
 8000632:	f001 fb59 	bl	8001ce8 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_PIN_STATE;
 8000636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063a:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(GPIO_STATE, &GPIO_InitStructure);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	480e      	ldr	r0, [pc, #56]	; (800067c <GPIO_Configuration+0x64>)
 8000642:	f001 fb51 	bl	8001ce8 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_PIN_BL0940_LED_1 | GPIO_PIN_BL0940_LED_2 | GPIO_PIN_BL0940_LED_3 | GPIO_PIN_BL0940_LED_4;
 8000646:	230f      	movs	r3, #15
 8000648:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(GPIO_BL0940_LED, &GPIO_InitStructure);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <GPIO_Configuration+0x68>)
 8000650:	f001 fb4a 	bl	8001ce8 <GPIO_Init>

    GPIO_ResetBits(GPIO_NET, GPIO_PIN_NET);
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <GPIO_Configuration+0x60>)
 800065a:	f001 fc28 	bl	8001eae <GPIO_ResetBits>
    GPIO_ResetBits(GPIO_STATE, GPIO_PIN_STATE);
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <GPIO_Configuration+0x64>)
 8000664:	f001 fc23 	bl	8001eae <GPIO_ResetBits>
    GPIO_ResetBits(GPIO_BL0940_LED, GPIO_PIN_BL0940_LED_1 | GPIO_PIN_BL0940_LED_2 | GPIO_PIN_BL0940_LED_3 | GPIO_PIN_BL0940_LED_4);
 8000668:	210f      	movs	r1, #15
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <GPIO_Configuration+0x68>)
 800066c:	f001 fc1f 	bl	8001eae <GPIO_ResetBits>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40011000 	.word	0x40011000
 800067c:	40010c00 	.word	0x40010c00
 8000680:	40010800 	.word	0x40010800

08000684 <_LED_GetDevice>:
    .LED_ON = led_open,
    .LED_OFF = led_close,
};

struct LED_Sharp_Struct *_LED_GetDevice(enum LED_TYPE type)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    struct LED_Sharp_Struct *led_dev;

    switch (type)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d002      	beq.n	800069a <_LED_GetDevice+0x16>
 8000694:	2b02      	cmp	r3, #2
 8000696:	d003      	beq.n	80006a0 <_LED_GetDevice+0x1c>
    case STATE_LED:
        led_dev = &led_state_dev;
        break;

    default:
        break;
 8000698:	e005      	b.n	80006a6 <_LED_GetDevice+0x22>
        led_dev = &led_net_dev;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <_LED_GetDevice+0x30>)
 800069c:	60fb      	str	r3, [r7, #12]
        break;
 800069e:	e002      	b.n	80006a6 <_LED_GetDevice+0x22>
        led_dev = &led_state_dev;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <_LED_GetDevice+0x34>)
 80006a2:	60fb      	str	r3, [r7, #12]
        break;
 80006a4:	bf00      	nop
    }

    return led_dev;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000018 	.word	0x20000018

080006bc <led_reflash_status>:
 * @description: led设备状态刷新, 需要注册进ms级定时器
 * @param {type} 
 * @return {type} 
 */
void led_reflash_status(struct LED_Sharp_Struct *led)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    if (led->count_timer != 0)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	89db      	ldrh	r3, [r3, #14]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d041      	beq.n	8000750 <led_reflash_status+0x94>
    {
        led->count_timer--;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	89db      	ldrh	r3, [r3, #14]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	81da      	strh	r2, [r3, #14]

        if (led->count_timer == 0)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	89db      	ldrh	r3, [r3, #14]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d11e      	bne.n	800071e <led_reflash_status+0x62>
        {
            switch (led->model)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d831      	bhi.n	800074e <led_reflash_status+0x92>
 80006ea:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <led_reflash_status+0x34>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	0800074f 	.word	0x0800074f
 80006fc:	08000715 	.word	0x08000715
            {
            case LED_ON_MODE:
                led->LED_ON(led);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	4798      	blx	r3
                break;
 8000708:	e022      	b.n	8000750 <led_reflash_status+0x94>

            case LED_OFF_MODE:
                led->LED_OFF(led);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	4798      	blx	r3
                break;
 8000712:	e01d      	b.n	8000750 <led_reflash_status+0x94>
                // led->set_time_ms = 0;
                // led->sharp_timer_ms = 0;
                break;

            case LED_Sharp_Repeat_MODE:
                led->count_timer = led->set_time_ms;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	899a      	ldrh	r2, [r3, #12]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	81da      	strh	r2, [r3, #14]
                break;
 800071c:	e018      	b.n	8000750 <led_reflash_status+0x94>

            default:
                break;
            }
        }
        else if (led->count_timer == (led->set_time_ms - 1))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	89db      	ldrh	r3, [r3, #14]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	899b      	ldrh	r3, [r3, #12]
 8000728:	3b01      	subs	r3, #1
 800072a:	429a      	cmp	r2, r3
 800072c:	d104      	bne.n	8000738 <led_reflash_status+0x7c>
        {
            led->LED_ON(led);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	4798      	blx	r3
        else if (led->count_timer == led->sharp_timer_ms)
        {
            led->LED_OFF(led);
        }
    }
}
 8000736:	e00b      	b.n	8000750 <led_reflash_status+0x94>
        else if (led->count_timer == led->sharp_timer_ms)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	89da      	ldrh	r2, [r3, #14]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	895b      	ldrh	r3, [r3, #10]
 8000740:	429a      	cmp	r2, r3
 8000742:	d105      	bne.n	8000750 <led_reflash_status+0x94>
            led->LED_OFF(led);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	4798      	blx	r3
}
 800074c:	e000      	b.n	8000750 <led_reflash_status+0x94>
                break;
 800074e:	bf00      	nop
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <led_set_mode>:

inline void led_set_mode(enum LED_TYPE type, enum LED_Sharp_Model mode)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	71bb      	strb	r3, [r7, #6]
    struct LED_Sharp_Struct *led_dev = _LED_GetDevice(type);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff8a 	bl	8000684 <_LED_GetDevice>
 8000770:	60f8      	str	r0, [r7, #12]

    led_dev->model = mode;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	705a      	strb	r2, [r3, #1]
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <led_set_time>:

inline void led_set_time(enum LED_TYPE type, uint16_t set_time, uint16_t sharp_time)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	460b      	mov	r3, r1
 800078c:	80bb      	strh	r3, [r7, #4]
 800078e:	4613      	mov	r3, r2
 8000790:	807b      	strh	r3, [r7, #2]
    struct LED_Sharp_Struct *led_dev = _LED_GetDevice(type);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff75 	bl	8000684 <_LED_GetDevice>
 800079a:	60f8      	str	r0, [r7, #12]

    led_dev->set_time_ms = set_time;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	88ba      	ldrh	r2, [r7, #4]
 80007a0:	819a      	strh	r2, [r3, #12]
    led_dev->sharp_timer_ms = sharp_time;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	887a      	ldrh	r2, [r7, #2]
 80007a6:	815a      	strh	r2, [r3, #10]
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <led_open>:

void led_open(struct LED_Sharp_Struct *led_dev)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    GPIO_SetBits(led_dev->gpiox, led_dev->gpio_pin);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	891b      	ldrh	r3, [r3, #8]
 80007c0:	4619      	mov	r1, r3
 80007c2:	4610      	mov	r0, r2
 80007c4:	f001 fb65 	bl	8001e92 <GPIO_SetBits>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <led_close>:

void led_close(struct LED_Sharp_Struct *led_dev)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    GPIO_ResetBits(led_dev->gpiox, led_dev->gpio_pin);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	891b      	ldrh	r3, [r3, #8]
 80007e0:	4619      	mov	r1, r3
 80007e2:	4610      	mov	r0, r2
 80007e4:	f001 fb63 	bl	8001eae <GPIO_ResetBits>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <hw_led_init>:

void hw_led_init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af02      	add	r7, sp, #8
    RCC_Configuration();
 80007f6:	f7ff feff 	bl	80005f8 <RCC_Configuration>
    GPIO_Configuration();
 80007fa:	f7ff ff0d 	bl	8000618 <GPIO_Configuration>

    /* 注册LED设备到定时器 */
    timer_creat(led_reflash_status, 10, 0, true, &led_net_dev);
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <hw_led_init+0x34>)
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2301      	movs	r3, #1
 8000804:	2200      	movs	r2, #0
 8000806:	210a      	movs	r1, #10
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <hw_led_init+0x38>)
 800080a:	f002 f89f 	bl	800294c <timer_creat>
    timer_creat(led_reflash_status, 10, 0, true, &led_state_dev);
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <hw_led_init+0x3c>)
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	2200      	movs	r2, #0
 8000816:	210a      	movs	r1, #10
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <hw_led_init+0x38>)
 800081a:	f002 f897 	bl	800294c <timer_creat>
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	080006bd 	.word	0x080006bd
 800082c:	20000018 	.word	0x20000018

08000830 <led_test>:
 * @description: for test 
 * @param {type} 
 * @return {type} 
 */
void led_test(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    led_set_mode(NET_LED, LED_Sharp_Repeat_MODE);
 8000834:	2104      	movs	r1, #4
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff ff8e 	bl	8000758 <led_set_mode>
    led_set_time(NET_LED, 1000, 500);
 800083c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff ff9b 	bl	8000780 <led_set_time>

    led_set_mode(STATE_LED, LED_Sharp_Repeat_MODE);
 800084a:	2104      	movs	r1, #4
 800084c:	2002      	movs	r0, #2
 800084e:	f7ff ff83 	bl	8000758 <led_set_mode>
    led_set_time(STATE_LED, 2000, 1000);
 8000852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000856:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff ff90 	bl	8000780 <led_set_time>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <RCC_Configuration>:
#define UART3_GPIO_TX GPIO_Pin_10
#define UART3_GPIO_RX GPIO_Pin_11
#define UART3_GPIO GPIOB

static void RCC_Configuration(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* Enable UART GPIO clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8000868:	2101      	movs	r1, #1
 800086a:	2005      	movs	r0, #5
 800086c:	f001 fd42 	bl	80022f4 <RCC_APB2PeriphClockCmd>
  /* Enable UART clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000870:	2101      	movs	r1, #1
 8000872:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000876:	f001 fd3d 	bl	80022f4 <RCC_APB2PeriphClockCmd>

  /* Enable UART GPIO clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 800087a:	2101      	movs	r1, #1
 800087c:	2005      	movs	r0, #5
 800087e:	f001 fd39 	bl	80022f4 <RCC_APB2PeriphClockCmd>
  /* Enable UART clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000882:	2101      	movs	r1, #1
 8000884:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000888:	f001 fd52 	bl	8002330 <RCC_APB1PeriphClockCmd>

  /* Enable UART GPIO clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 800088c:	2101      	movs	r1, #1
 800088e:	2009      	movs	r0, #9
 8000890:	f001 fd30 	bl	80022f4 <RCC_APB2PeriphClockCmd>
  /* Enable UART clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000894:	2101      	movs	r1, #1
 8000896:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800089a:	f001 fd49 	bl	8002330 <RCC_APB1PeriphClockCmd>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <NVIC_Configuration>:

static void NVIC_Configuration(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the USART1 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;         //通道设置为串口1中断（故后面应选择在“void USART1_IRQHandler(void)”开中断）
 80008a8:	2325      	movs	r3, #37	; 0x25
 80008aa:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //中断占先等级0
 80008ac:	2300      	movs	r3, #0
 80008ae:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;        //中断响应优先级0
 80008b0:	2301      	movs	r3, #1
 80008b2:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;           //打开中断
 80008b4:	2301      	movs	r3, #1
 80008b6:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fc08 	bl	80010d0 <NVIC_Init>

  //DMA发送中断设置
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel4_IRQn;
 80008c0:	230e      	movs	r3, #14
 80008c2:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fbfc 	bl	80010d0 <NVIC_Init>

  /* Enable the USART2 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;         //通道设置为串口1中断（故后面应选择在“void USART1_IRQHandler(void)”开中断）
 80008d8:	2326      	movs	r3, #38	; 0x26
 80008da:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //中断占先等级0
 80008dc:	2300      	movs	r3, #0
 80008de:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;        //中断响应优先级0
 80008e0:	2304      	movs	r3, #4
 80008e2:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;           //打开中断
 80008e4:	2301      	movs	r3, #1
 80008e6:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fbf0 	bl	80010d0 <NVIC_Init>

  //DMA发送中断设置
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel7_IRQn;
 80008f0:	2311      	movs	r3, #17
 80008f2:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
 80008f8:	2305      	movs	r3, #5
 80008fa:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fbe4 	bl	80010d0 <NVIC_Init>

  /* Enable the USART3 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;         //通道设置为串口1中断（故后面应选择在“void USART1_IRQHandler(void)”开中断）
 8000908:	2327      	movs	r3, #39	; 0x27
 800090a:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //中断占先等级0
 800090c:	2300      	movs	r3, #0
 800090e:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 6;        //中断响应优先级0
 8000910:	2306      	movs	r3, #6
 8000912:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;           //打开中断
 8000914:	2301      	movs	r3, #1
 8000916:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fbd8 	bl	80010d0 <NVIC_Init>

  //DMA发送中断设置
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel2_IRQn;
 8000920:	230c      	movs	r3, #12
 8000922:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 7;
 8000928:	2307      	movs	r3, #7
 800092a:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800092c:	2301      	movs	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fbcc 	bl	80010d0 <NVIC_Init>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <GPIO_Configuration>:

static void GPIO_Configuration(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000946:	2303      	movs	r3, #3
 8000948:	71bb      	strb	r3, [r7, #6]

  /* Configure USART Rx/tx PIN */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800094a:	2304      	movs	r3, #4
 800094c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART1_GPIO_RX;
 800094e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000952:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART1_GPIO, &GPIO_InitStructure);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	481b      	ldr	r0, [pc, #108]	; (80009c8 <GPIO_Configuration+0x88>)
 800095a:	f001 f9c5 	bl	8001ce8 <GPIO_Init>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800095e:	2318      	movs	r3, #24
 8000960:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART1_GPIO_TX;
 8000962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000966:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART1_GPIO, &GPIO_InitStructure);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4619      	mov	r1, r3
 800096c:	4816      	ldr	r0, [pc, #88]	; (80009c8 <GPIO_Configuration+0x88>)
 800096e:	f001 f9bb 	bl	8001ce8 <GPIO_Init>

  /* Configure USART Rx/tx PIN */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000972:	2304      	movs	r3, #4
 8000974:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART2_GPIO_RX;
 8000976:	2308      	movs	r3, #8
 8000978:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART2_GPIO, &GPIO_InitStructure);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4812      	ldr	r0, [pc, #72]	; (80009c8 <GPIO_Configuration+0x88>)
 8000980:	f001 f9b2 	bl	8001ce8 <GPIO_Init>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000984:	2318      	movs	r3, #24
 8000986:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART2_GPIO_TX;
 8000988:	2304      	movs	r3, #4
 800098a:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART2_GPIO, &GPIO_InitStructure);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <GPIO_Configuration+0x88>)
 8000992:	f001 f9a9 	bl	8001ce8 <GPIO_Init>

  /* Configure USART Rx/tx PIN */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000996:	2304      	movs	r3, #4
 8000998:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART3_GPIO_RX;
 800099a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800099e:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART3_GPIO, &GPIO_InitStructure);
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <GPIO_Configuration+0x8c>)
 80009a6:	f001 f99f 	bl	8001ce8 <GPIO_Init>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80009aa:	2318      	movs	r3, #24
 80009ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART3_GPIO_TX;
 80009ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b2:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART3_GPIO, &GPIO_InitStructure);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <GPIO_Configuration+0x8c>)
 80009ba:	f001 f995 	bl	8001ce8 <GPIO_Init>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010800 	.word	0x40010800
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <UART_Configuration>:

static void UART_Configuration(struct uart_device *uart, struct uart_configure *cfg)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  USART_InitTypeDef USART_InitStructure;
  USART_ClockInitTypeDef USART_ClockInitStructure;

  USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;     //提升USART时钟时使能还是失能，钟低电平活动
 80009da:	2300      	movs	r3, #0
 80009dc:	813b      	strh	r3, [r7, #8]
  USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;           //指定SLCK引脚上时钟的极性
 80009de:	2300      	movs	r3, #0
 80009e0:	817b      	strh	r3, [r7, #10]
  USART_ClockInitStructure.USART_CPHA = USART_CPHA_2Edge;         //时钟第二个边缘进行数据捕获
 80009e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e6:	81bb      	strh	r3, [r7, #12]
  USART_ClockInitStructure.USART_LastBit = USART_LastBit_Disable; //在SCLK引脚上输出最后发送的那个数据字的脉冲不从SCLK输出
 80009e8:	2300      	movs	r3, #0
 80009ea:	81fb      	strh	r3, [r7, #14]
  USART_ClockInit(uart->uartx, &USART_ClockInitStructure);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f107 0208 	add.w	r2, r7, #8
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fe44 	bl	8002684 <USART_ClockInit>

  USART_DeInit(uart->uartx);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fd29 	bl	8002458 <USART_DeInit>

  USART_InitStructure.USART_BaudRate = cfg->baud_rate;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	613b      	str	r3, [r7, #16]
  if (cfg->data_bits == DATA_BITS_8)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	f003 030f 	and.w	r3, r3, #15
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b08      	cmp	r3, #8
 8000a18:	d102      	bne.n	8000a20 <UART_Configuration+0x50>
  {
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	82bb      	strh	r3, [r7, #20]
 8000a1e:	e009      	b.n	8000a34 <UART_Configuration+0x64>
  }
  else if (cfg->data_bits == DATA_BITS_9)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	791b      	ldrb	r3, [r3, #4]
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b09      	cmp	r3, #9
 8000a2c:	d102      	bne.n	8000a34 <UART_Configuration+0x64>
  {
    USART_InitStructure.USART_WordLength = USART_WordLength_9b;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	82bb      	strh	r3, [r7, #20]
  }

  if (cfg->stop_bits == STOP_BITS_1)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	791b      	ldrb	r3, [r3, #4]
 8000a38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <UART_Configuration+0x78>
  {
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	82fb      	strh	r3, [r7, #22]
 8000a46:	e014      	b.n	8000a72 <UART_Configuration+0xa2>
  }
  else if (cfg->stop_bits == STOP_BITS_1_5)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b10      	cmp	r3, #16
 8000a54:	d103      	bne.n	8000a5e <UART_Configuration+0x8e>
  {
    USART_InitStructure.USART_StopBits = USART_StopBits_1_5;
 8000a56:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a5a:	82fb      	strh	r3, [r7, #22]
 8000a5c:	e009      	b.n	8000a72 <UART_Configuration+0xa2>
  }
  else if (cfg->stop_bits == STOP_BITS_2)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	791b      	ldrb	r3, [r3, #4]
 8000a62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	d102      	bne.n	8000a72 <UART_Configuration+0xa2>
  {
    USART_InitStructure.USART_StopBits = USART_StopBits_2;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a70:	82fb      	strh	r3, [r7, #22]
  }

  if (cfg->parity == PARITY_NONE)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	791b      	ldrb	r3, [r3, #4]
 8000a76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <UART_Configuration+0xb6>
  {
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8000a80:	2300      	movs	r3, #0
 8000a82:	833b      	strh	r3, [r7, #24]
 8000a84:	e014      	b.n	8000ab0 <UART_Configuration+0xe0>
  }
  else if (cfg->parity == PARITY_ODD)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	791b      	ldrb	r3, [r3, #4]
 8000a8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b40      	cmp	r3, #64	; 0x40
 8000a92:	d103      	bne.n	8000a9c <UART_Configuration+0xcc>
  {
    USART_InitStructure.USART_Parity = USART_Parity_Odd;
 8000a94:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a98:	833b      	strh	r3, [r7, #24]
 8000a9a:	e009      	b.n	8000ab0 <UART_Configuration+0xe0>
  }
  else if (cfg->parity == PARITY_EVEN)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	791b      	ldrb	r3, [r3, #4]
 8000aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b80      	cmp	r3, #128	; 0x80
 8000aa8:	d102      	bne.n	8000ab0 <UART_Configuration+0xe0>
  {
    USART_InitStructure.USART_Parity = USART_Parity_Even;
 8000aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aae:	833b      	strh	r3, [r7, #24]
  }
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	83bb      	strh	r3, [r7, #28]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	837b      	strh	r3, [r7, #26]
  USART_Init(uart->uartx, &USART_InitStructure);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f107 0210 	add.w	r2, r7, #16
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fd24 	bl	8002510 <USART_Init>

  //串口采用DMA发送
  USART_DMACmd(uart->uartx, USART_DMAReq_Tx, ENABLE);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2201      	movs	r2, #1
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fe68 	bl	80027a6 <USART_DMACmd>
  USART_ITConfig(uart->uartx, USART_IT_RXNE, ENABLE);  // 接收中断使能
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f240 5125 	movw	r1, #1317	; 0x525
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fe19 	bl	8002718 <USART_ITConfig>
  USART_ClearITPendingBit(uart->uartx, USART_IT_RXNE); // 清除接收完成中断
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f240 5125 	movw	r1, #1317	; 0x525
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fee5 	bl	80028be <USART_ClearITPendingBit>
  /* Enable USART */
  USART_Cmd(uart->uartx, ENABLE);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2101      	movs	r1, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fded 	bl	80026da <USART_Cmd>
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <UART_DMA_Tx_Config>:
}
#endif

#ifdef USE_USART_DMA_TX
static void UART_DMA_Tx_Config(struct uart_data *pdata)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  DMA_InitTypeDef DMA_InitStructure;
  struct uart_device *uart = pdata->uart_device;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34

  //启动DMA时钟
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8000b16:	2101      	movs	r1, #1
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f001 fbcd 	bl	80022b8 <RCC_AHBPeriphClockCmd>

  //通道配置
  DMA_DeInit(uart->dma_tx.tx_ch);
 8000b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fe90 	bl	8001848 <DMA_DeInit>
  //外设地址
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (uart->uartx->DR);
 8000b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	60bb      	str	r3, [r7, #8]
  //内存地址
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pdata->stream_tx;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3374      	adds	r3, #116	; 0x74
 8000b34:	60fb      	str	r3, [r7, #12]
  //dma传输方向单向
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8000b36:	2310      	movs	r3, #16
 8000b38:	613b      	str	r3, [r7, #16]
  //设置DMA在传输时缓冲区的长度
  DMA_InitStructure.DMA_BufferSize = UART_DMA_RB_BUFSZ;
 8000b3a:	236c      	movs	r3, #108	; 0x6c
 8000b3c:	617b      	str	r3, [r7, #20]
  //设置DMA的外设递增模式，一个外设
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  //设置DMA的内存递增模式
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	61fb      	str	r3, [r7, #28]
  //外设数据字长
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  //内存数据字长
  DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  // DMA模式，一次或者循环模式
  //DMA_InitStructure.DMA_Mode = DMA_Mode_Normal ;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000b4e:	2320      	movs	r3, #32
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  //设置DMA的优先级别
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  //设置DMA的2个memory中的变量互相访问
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30

  DMA_Init(uart->dma_tx.tx_ch, &DMA_InitStructure);
 8000b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f107 0208 	add.w	r2, r7, #8
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 ff2a 	bl	80019c0 <DMA_Init>
  // 清除DMA标志
  //  DMA_ClearFlag(uart->dma_tx.tx_gl_flag);
  DMA_ITConfig(uart->dma_tx.tx_ch, DMA_IT_TC, ENABLE); // dma传输中断
 8000b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 ff7d 	bl	8001a74 <DMA_ITConfig>
  DMA_Cmd(uart->dma_tx.tx_ch, DISABLE);
 8000b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 ff5b 	bl	8001a3c <DMA_Cmd>
}
 8000b86:	bf00      	nop
 8000b88:	3738      	adds	r7, #56	; 0x38
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <uart_isr>:
#endif

static void uart_isr(struct uart_data *puart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  USART_TypeDef *uart = puart->uart_device->uartx;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	60fb      	str	r3, [r7, #12]

  if (USART_GetITStatus(uart, USART_IT_RXNE) != RESET)
 8000ba0:	f240 5125 	movw	r1, #1317	; 0x525
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f001 fe30 	bl	800280a <USART_GetITStatus>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d039      	beq.n	8000c24 <uart_isr+0x94>
  {
    if (uart_getFlagStatus(uart, UART_FLAG_RC) == false)
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f000 f930 	bl	8000e18 <uart_getFlagStatus>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f083 0301 	eor.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d02a      	beq.n	8000c1a <uart_isr+0x8a>
    {
      puart->stream_rx[puart->rx_index] = (uint8_t)USART_ReceiveData(uart);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f001 fe11 	bl	80027ec <USART_ReceiveData>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	799b      	ldrb	r3, [r3, #6]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	440b      	add	r3, r1
 8000bda:	721a      	strb	r2, [r3, #8]
      ++puart->rx_index;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	799b      	ldrb	r3, [r3, #6]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	719a      	strb	r2, [r3, #6]
      puart->rx_index = puart->rx_index % UART_DMA_RB_BUFSZ;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	089a      	lsrs	r2, r3, #2
 8000bee:	4924      	ldr	r1, [pc, #144]	; (8000c80 <uart_isr+0xf0>)
 8000bf0:	fba1 1202 	umull	r1, r2, r1, r2
 8000bf4:	08d2      	lsrs	r2, r2, #3
 8000bf6:	216c      	movs	r1, #108	; 0x6c
 8000bf8:	fb01 f202 	mul.w	r2, r1, r2
 8000bfc:	1a9b      	subs	r3, r3, r2
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	719a      	strb	r2, [r3, #6]

      if (puart->rx_index == puart->recv_len)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	799a      	ldrb	r2, [r3, #6]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	79db      	ldrb	r3, [r3, #7]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d104      	bne.n	8000c1a <uart_isr+0x8a>
        __uart_setflag(uart, UART_FLAG_RC, true);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2104      	movs	r1, #4
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f000 f8cb 	bl	8000db0 <__uart_setflag>
    }
    /* clear interrupt */
    USART_ClearITPendingBit(uart, USART_IT_RXNE);
 8000c1a:	f240 5125 	movw	r1, #1317	; 0x525
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f001 fe4d 	bl	80028be <USART_ClearITPendingBit>
  {
  }
#endif

  /* 一帧数据发送完成后，并且TXE=1时即数据已经被转移到移位寄存器中， USART_CR1中的TCIE为1产生中断*/
  if (USART_GetITStatus(uart, USART_IT_TC) != RESET)
 8000c24:	f240 6126 	movw	r1, #1574	; 0x626
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f001 fdee 	bl	800280a <USART_GetITStatus>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d011      	beq.n	8000c58 <uart_isr+0xc8>
  {
    // 传输完成，将其UART_FLAG_xx_TC复位
#ifdef USE_USART_DMA_TX
    __uart_setflag(uart, UART_FLAG_DMA_TC, false);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2101      	movs	r1, #1
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f000 f8b9 	bl	8000db0 <__uart_setflag>
#elif
    __uart_setflag(uart, UART_FLAG_TC, false);
#endif

    /* clear interrupt */
    uart_tc_isr_hook();
 8000c3e:	f000 fa21 	bl	8001084 <uart_tc_isr_hook>
    USART_ClearITPendingBit(uart, USART_IT_TC);
 8000c42:	f240 6126 	movw	r1, #1574	; 0x626
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f001 fe39 	bl	80028be <USART_ClearITPendingBit>
    USART_ITConfig(uart, USART_IT_TC, DISABLE);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f240 6126 	movw	r1, #1574	; 0x626
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f001 fd60 	bl	8002718 <USART_ITConfig>
  }

  if (USART_GetITStatus(uart, USART_IT_TXE) != RESET)
 8000c58:	f240 7127 	movw	r1, #1831	; 0x727
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f001 fdd4 	bl	800280a <USART_GetITStatus>
  {
  }

  /* 检测到过载错误，当RXNE仍是1时，当前被接收在移位寄存器中的数据，需要传送至RDR寄存器是，硬件将该位 置位 */
  if (USART_GetITStatus(uart, USART_FLAG_ORE) == SET)
 8000c62:	2108      	movs	r1, #8
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f001 fdd0 	bl	800280a <USART_GetITStatus>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d102      	bne.n	8000c76 <uart_isr+0xe6>
  {
    USART_ReceiveData(uart);
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f001 fdbb 	bl	80027ec <USART_ReceiveData>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	4bda12f7 	.word	0x4bda12f7

08000c84 <dma_isr>:

static void dma_isr(struct uart_data *puart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  struct uart_dma_tx *dma_tx = &puart->uart_device->dma_tx;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3308      	adds	r3, #8
 8000c92:	60fb      	str	r3, [r7, #12]

  if (DMA_GetITStatus(dma_tx->tx_tc_IT) != RESET)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 ff31 	bl	8001b00 <DMA_GetITStatus>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d035      	beq.n	8000d10 <dma_isr+0x8c>
  {
    if (puart->uart_device->uartx == USART3)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <dma_isr+0x94>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d110      	bne.n	8000cd2 <dma_isr+0x4e>
    {
      USART_ClearITPendingBit(puart->uart_device->uartx, USART_IT_TC);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f240 6126 	movw	r1, #1574	; 0x626
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fdff 	bl	80028be <USART_ClearITPendingBit>
      USART_ITConfig(puart->uart_device->uartx, USART_IT_TC, ENABLE); // 传输中断使能
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f240 6126 	movw	r1, #1574	; 0x626
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fd23 	bl	8002718 <USART_ITConfig>
    }

    NET_LED_TRIGGLE;
 8000cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <dma_isr+0x98>)
 8000cd8:	f001 f8c2 	bl	8001e60 <GPIO_ReadOutputDataBit>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f1c3 0301 	rsb	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <dma_isr+0x98>)
 8000cec:	f001 f8ed 	bl	8001eca <GPIO_WriteBit>
    uart_dmaisr_hook();
 8000cf0:	f3af 8000 	nop.w
    puart->tx_flag = false; // 使能再次发送
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	715a      	strb	r2, [r3, #5]
    DMA_Cmd(dma_tx->tx_ch, DISABLE);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fe9b 	bl	8001a3c <DMA_Cmd>
    DMA_ClearFlag(dma_tx->tx_gl_flag);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fede 	bl	8001acc <DMA_ClearFlag>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40004800 	.word	0x40004800
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <USART1_IRQHandler>:
    .rx_index = 0,
    .recv_len = 2,
};

void USART1_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  uart_isr(&duart1);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART1_IRQHandler+0x10>)
 8000d26:	f7ff ff33 	bl	8000b90 <uart_isr>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000050 	.word	0x20000050

08000d34 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  dma_isr(&duart1);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <DMA1_Channel4_IRQHandler+0x10>)
 8000d3a:	f7ff ffa3 	bl	8000c84 <dma_isr>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000050 	.word	0x20000050

08000d48 <USART3_IRQHandler>:
    .rx_index = 0,
    .recv_len = 2,
};

void USART3_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  uart_isr(&duart3);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <USART3_IRQHandler+0x10>)
 8000d4e:	f7ff ff1f 	bl	8000b90 <uart_isr>
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000150 	.word	0x20000150

08000d5c <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  dma_isr(&duart3);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <DMA1_Channel2_IRQHandler+0x10>)
 8000d62:	f7ff ff8f 	bl	8000c84 <dma_isr>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000150 	.word	0x20000150

08000d70 <__get_duartx>:
 * @description: 
 * @param {type} 
 * @return {type} 
 */
struct uart_data *__get_duartx(USART_TypeDef *uartx)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  struct uart_data *pstream;

#ifdef USING_UART1
  if (USART1 == uartx)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <__get_duartx+0x30>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d102      	bne.n	8000d86 <__get_duartx+0x16>
    pstream = &duart1;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <__get_duartx+0x34>)
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e005      	b.n	8000d92 <__get_duartx+0x22>
#ifdef USING_UART2
  else if (USART2 == uartx)
    pstream = &duart2;
#endif
#ifdef USING_UART3
  else if (USART3 == uartx)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <__get_duartx+0x38>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <__get_duartx+0x22>
    pstream = &duart3;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <__get_duartx+0x3c>)
 8000d90:	60fb      	str	r3, [r7, #12]
#endif

  return pstream;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40013800 	.word	0x40013800
 8000da4:	20000050 	.word	0x20000050
 8000da8:	40004800 	.word	0x40004800
 8000dac:	20000150 	.word	0x20000150

08000db0 <__uart_setflag>:
 * @description: 内部函数，提供修改相关FLAG状态
 * @param {type} 
 * @return {type} 
 */
void __uart_setflag(USART_TypeDef *uartx, enum UART_FLAG uflag, bool status)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	70bb      	strb	r3, [r7, #2]
  struct uart_data *pstream = __get_duartx(uartx);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ffd5 	bl	8000d70 <__get_duartx>
 8000dc6:	60f8      	str	r0, [r7, #12]

  switch (uflag)
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d81d      	bhi.n	8000e0c <__uart_setflag+0x5c>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <__uart_setflag+0x28>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000ded 	.word	0x08000ded
 8000ddc:	08000df5 	.word	0x08000df5
 8000de0:	08000dfd 	.word	0x08000dfd
 8000de4:	08000e05 	.word	0x08000e05
 8000de8:	08000e0d 	.word	0x08000e0d
  {
  case UART_FLAG_DMA_TC:
    pstream->tx_flag = status;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	78ba      	ldrb	r2, [r7, #2]
 8000df0:	715a      	strb	r2, [r3, #5]
    break;
 8000df2:	e00c      	b.n	8000e0e <__uart_setflag+0x5e>

  case UART_FLAG_DMA_RC:
    pstream->rx_flag = status;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	78ba      	ldrb	r2, [r7, #2]
 8000df8:	711a      	strb	r2, [r3, #4]
    break;
 8000dfa:	e008      	b.n	8000e0e <__uart_setflag+0x5e>

  case UART_FLAG_TC:
    pstream->tx_flag = status;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	78ba      	ldrb	r2, [r7, #2]
 8000e00:	715a      	strb	r2, [r3, #5]
    break;
 8000e02:	e004      	b.n	8000e0e <__uart_setflag+0x5e>

  case UART_FLAG_RC:
    pstream->rx_flag = status;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	78ba      	ldrb	r2, [r7, #2]
 8000e08:	711a      	strb	r2, [r3, #4]
    break;
 8000e0a:	e000      	b.n	8000e0e <__uart_setflag+0x5e>

  case UART_FLAG_IDLE:
    break;

  default:
    break;
 8000e0c:	bf00      	nop
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop

08000e18 <uart_getFlagStatus>:

bool uart_getFlagStatus(USART_TypeDef *uartx, enum UART_FLAG uflag)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
  struct uart_data *pstream = __get_duartx(uartx);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ffa1 	bl	8000d70 <__get_duartx>
 8000e2e:	60b8      	str	r0, [r7, #8]

  switch (uflag)
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d82e      	bhi.n	8000e96 <uart_getFlagStatus+0x7e>
 8000e38:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <uart_getFlagStatus+0x28>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e55 	.word	0x08000e55
 8000e44:	08000e5d 	.word	0x08000e5d
 8000e48:	08000e65 	.word	0x08000e65
 8000e4c:	08000e6d 	.word	0x08000e6d
 8000e50:	08000e75 	.word	0x08000e75
  {
  case UART_FLAG_DMA_TC:
    ret = (pstream->tx_flag == true) ? true : false;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	795b      	ldrb	r3, [r3, #5]
 8000e58:	73fb      	strb	r3, [r7, #15]
    break;
 8000e5a:	e01f      	b.n	8000e9c <uart_getFlagStatus+0x84>

  case UART_FLAG_DMA_RC:
    ret = (pstream->rx_flag == true) ? true : false;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	73fb      	strb	r3, [r7, #15]
    break;
 8000e62:	e01b      	b.n	8000e9c <uart_getFlagStatus+0x84>

  case UART_FLAG_TC:
    ret = (pstream->tx_flag == true) ? true : false;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	73fb      	strb	r3, [r7, #15]
    break;
 8000e6a:	e017      	b.n	8000e9c <uart_getFlagStatus+0x84>

  case UART_FLAG_RC:
    ret = (pstream->rx_flag == true) ? true : false;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	791b      	ldrb	r3, [r3, #4]
 8000e70:	73fb      	strb	r3, [r7, #15]
    break;
 8000e72:	e013      	b.n	8000e9c <uart_getFlagStatus+0x84>

  case UART_FLAG_IDLE:
    if ((pstream->tx_flag == false) && (pstream->rx_flag == false))
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	795b      	ldrb	r3, [r3, #5]
 8000e78:	f083 0301 	eor.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00b      	beq.n	8000e9a <uart_getFlagStatus+0x82>
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	791b      	ldrb	r3, [r3, #4]
 8000e86:	f083 0301 	eor.w	r3, r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <uart_getFlagStatus+0x82>
      ret = true;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
    break;
 8000e94:	e001      	b.n	8000e9a <uart_getFlagStatus+0x82>

  default:
    break;
 8000e96:	bf00      	nop
 8000e98:	e000      	b.n	8000e9c <uart_getFlagStatus+0x84>
    break;
 8000e9a:	bf00      	nop
  }

  return ret;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop

08000ea8 <uart_read>:

  return pstream->recv_len;
}

int16_t uart_read(USART_TypeDef *uartx, uint8_t *pbuf, uint8_t size)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  int16_t ret = -1;
 8000eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eba:	82bb      	strh	r3, [r7, #20]
  struct uart_data *pstream = __get_duartx(uartx);
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff ff57 	bl	8000d70 <__get_duartx>
 8000ec2:	6138      	str	r0, [r7, #16]

  if (size == 0)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <uart_read+0x28>
    return ret;
 8000eca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ece:	e033      	b.n	8000f38 <uart_read+0x90>

  if (pstream->recv_len != size)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	79db      	ldrb	r3, [r3, #7]
 8000ed4:	79fa      	ldrb	r2, [r7, #7]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d002      	beq.n	8000ee0 <uart_read+0x38>
    pstream->recv_len = size;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	79fa      	ldrb	r2, [r7, #7]
 8000ede:	71da      	strb	r2, [r3, #7]

  if (uart_getFlagStatus(uartx, UART_FLAG_RC) == true)
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff ff98 	bl	8000e18 <uart_getFlagStatus>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d022      	beq.n	8000f34 <uart_read+0x8c>
  {
    for (i = 0; i < size; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75fb      	strb	r3, [r7, #23]
 8000ef2:	e00a      	b.n	8000f0a <uart_read+0x62>
      pbuf[i] = pstream->stream_rx[i];
 8000ef4:	7dfa      	ldrb	r2, [r7, #23]
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	440b      	add	r3, r1
 8000efc:	6939      	ldr	r1, [r7, #16]
 8000efe:	440a      	add	r2, r1
 8000f00:	7a12      	ldrb	r2, [r2, #8]
 8000f02:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	3301      	adds	r3, #1
 8000f08:	75fb      	strb	r3, [r7, #23]
 8000f0a:	7dfa      	ldrb	r2, [r7, #23]
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3f0      	bcc.n	8000ef4 <uart_read+0x4c>

    ret = size;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	82bb      	strh	r3, [r7, #20]
    pstream->rx_index = 0;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	719a      	strb	r2, [r3, #6]
    __uart_setflag(uartx, UART_FLAG_RC, false);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff ff45 	bl	8000db0 <__uart_setflag>
    memset(pstream->stream_rx, 0, sizeof(pstream->stream_rx)); // refflush
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	3308      	adds	r3, #8
 8000f2a:	226c      	movs	r2, #108	; 0x6c
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 ffdc 	bl	8002eec <memset>
  }

  return ret;
 8000f34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <uart_write>:

int16_t uart_write(USART_TypeDef *uartx, uint8_t *pbuf, uint8_t size)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	71fb      	strb	r3, [r7, #7]
  int16_t ret = -1;
 8000f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f52:	82fb      	strh	r3, [r7, #22]
  uint8_t i = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	757b      	strb	r3, [r7, #21]
  struct uart_data *pstream = __get_duartx(uartx);
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff ff09 	bl	8000d70 <__get_duartx>
 8000f5e:	6138      	str	r0, [r7, #16]

  if (uart_getFlagStatus(uartx, UART_FLAG_DMA_TC) == false)
 8000f60:	2101      	movs	r1, #1
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f7ff ff58 	bl	8000e18 <uart_getFlagStatus>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f083 0301 	eor.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d02a      	beq.n	8000fca <uart_write+0x8a>
  {
    ret = size;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	82fb      	strh	r3, [r7, #22]
    for (i = 0; i < size; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	757b      	strb	r3, [r7, #21]
 8000f7c:	e00c      	b.n	8000f98 <uart_write+0x58>
      pstream->stream_tx[i] = pbuf[i];
 8000f7e:	7d7b      	ldrb	r3, [r7, #21]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	441a      	add	r2, r3
 8000f84:	7d7b      	ldrb	r3, [r7, #21]
 8000f86:	7811      	ldrb	r1, [r2, #0]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    for (i = 0; i < size; i++)
 8000f92:	7d7b      	ldrb	r3, [r7, #21]
 8000f94:	3301      	adds	r3, #1
 8000f96:	757b      	strb	r3, [r7, #21]
 8000f98:	7d7a      	ldrb	r2, [r7, #21]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3ee      	bcc.n	8000f7e <uart_write+0x3e>

#ifdef USE_USART_DMA_TX
    __uart_setflag(uartx, UART_FLAG_DMA_TC, true);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff ff03 	bl	8000db0 <__uart_setflag>
    //DMA方式发送,设置数据长度
    DMA_SetCurrDataCounter(pstream->uart_device->dma_tx.tx_ch, size);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	79fa      	ldrb	r2, [r7, #7]
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fd79 	bl	8001aae <DMA_SetCurrDataCounter>
    //启动DMA发送
    DMA_Cmd(pstream->uart_device->dma_tx.tx_ch, ENABLE);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fd39 	bl	8001a3c <DMA_Cmd>
    // 按字节发送
    for (i = 0; i < size; i++)
      USART_SendData(pstream->uart_device->uartx, pbuf[0]);
#endif
  }
  return ret;
 8000fca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <hw_uart_init>:

void hw_uart_init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
  struct uart_device *uart;

  RCC_Configuration();
 8000fde:	f7ff fc41 	bl	8000864 <RCC_Configuration>
  NVIC_Configuration();
 8000fe2:	f7ff fc5e 	bl	80008a2 <NVIC_Configuration>
  GPIO_Configuration();
 8000fe6:	f7ff fcab 	bl	8000940 <GPIO_Configuration>

#ifdef USING_UART1
  uart = &uart1;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <hw_uart_init+0x50>)
 8000fec:	607b      	str	r3, [r7, #4]
  config1.baud_rate = BAUD_RATE_9600;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <hw_uart_init+0x54>)
 8000ff0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ff4:	601a      	str	r2, [r3, #0]

  UART_Configuration(uart, &config1);
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <hw_uart_init+0x54>)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fce9 	bl	80009d0 <UART_Configuration>
  UART_DMA_Tx_Config(&duart1);
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <hw_uart_init+0x58>)
 8001000:	f7ff fd82 	bl	8000b08 <UART_DMA_Tx_Config>
  UART_Configuration(uart, &config2);
  UART_DMA_Tx_Config(&duart2);
#endif

#ifdef USING_UART3
  uart = &uart3;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <hw_uart_init+0x5c>)
 8001006:	607b      	str	r3, [r7, #4]
  config3.baud_rate = BAUD_RATE_4800;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <hw_uart_init+0x60>)
 800100a:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800100e:	601a      	str	r2, [r3, #0]

  UART_Configuration(uart, &config3);
 8001010:	4909      	ldr	r1, [pc, #36]	; (8001038 <hw_uart_init+0x60>)
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fcdc 	bl	80009d0 <UART_Configuration>
  UART_DMA_Tx_Config(&duart3);
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <hw_uart_init+0x64>)
 800101a:	f7ff fd75 	bl	8000b08 <UART_DMA_Tx_Config>
#endif
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000038 	.word	0x20000038
 800102c:	20000030 	.word	0x20000030
 8001030:	20000050 	.word	0x20000050
 8001034:	20000138 	.word	0x20000138
 8001038:	20000130 	.word	0x20000130
 800103c:	20000150 	.word	0x20000150

08001040 <RCC_Configuration>:
 */

#include "uart_485.h"

static void RCC_Configuration(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001044:	2101      	movs	r1, #1
 8001046:	2008      	movs	r0, #8
 8001048:	f001 f954 	bl	80022f4 <RCC_APB2PeriphClockCmd>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <GPIO_Configuration>:

static void GPIO_Configuration(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001056:	2303      	movs	r3, #3
 8001058:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800105a:	2310      	movs	r3, #16
 800105c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 800105e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001062:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <GPIO_Configuration+0x30>)
 800106a:	f000 fe3d 	bl	8001ce8 <GPIO_Init>

  UART3_485_RECV();
 800106e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <GPIO_Configuration+0x30>)
 8001074:	f000 ff1b 	bl	8001eae <GPIO_ResetBits>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010c00 	.word	0x40010c00

08001084 <uart_tc_isr_hook>:

void uart_tc_isr_hook(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  UART3_485_RECV();
 8001088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <uart_tc_isr_hook+0x14>)
 800108e:	f000 ff0e 	bl	8001eae <GPIO_ResetBits>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40010c00 	.word	0x40010c00

0800109c <hw_uart_485_init>:
  UART3_485_SEND();
  return uart_write(uartx, pbuf, size);
}

void hw_uart_485_init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  RCC_Configuration();
 80010a0:	f7ff ffce 	bl	8001040 <RCC_Configuration>
  GPIO_Configuration();
 80010a4:	f7ff ffd4 	bl	8001050 <GPIO_Configuration>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <NVIC_PriorityGroupConfig+0x20>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60d3      	str	r3, [r2, #12]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	230f      	movs	r3, #15
 80010e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	78db      	ldrb	r3, [r3, #3]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d03a      	beq.n	8001162 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <NVIC_Init+0xbc>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f1c3 0304 	rsb	r3, r3, #4
 8001100:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa22 f303 	lsr.w	r3, r2, r3
 800110a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	461a      	mov	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4013      	ands	r3, r2
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	4313      	orrs	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <NVIC_Init+0xc0>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	6979      	ldr	r1, [r7, #20]
 8001138:	b2c9      	uxtb	r1, r1
 800113a:	4413      	add	r3, r2
 800113c:	460a      	mov	r2, r1
 800113e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800114a:	4911      	ldr	r1, [pc, #68]	; (8001190 <NVIC_Init+0xc0>)
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	7812      	ldrb	r2, [r2, #0]
 8001150:	0952      	lsrs	r2, r2, #5
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001156:	2201      	movs	r2, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800115c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001160:	e00f      	b.n	8001182 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800116a:	4909      	ldr	r1, [pc, #36]	; (8001190 <NVIC_Init+0xc0>)
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	7812      	ldrb	r2, [r2, #0]
 8001170:	0952      	lsrs	r2, r2, #5
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001176:	2201      	movs	r2, #1
 8001178:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800117a:	f100 0320 	add.w	r3, r0, #32
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	e000e100 	.word	0xe000e100

08001194 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80011a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011a8:	4904      	ldr	r1, [pc, #16]	; (80011bc <NVIC_SetVectorTable+0x28>)
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d106      	bne.n	80011dc <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <SysTick_CLKSourceConfig+0x34>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <SysTick_CLKSourceConfig+0x34>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 80011da:	e005      	b.n	80011e8 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SysTick_CLKSourceConfig+0x34>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <SysTick_CLKSourceConfig+0x34>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <CAN_DeInit+0x44>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d10a      	bne.n	800121e <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8001208:	2101      	movs	r1, #1
 800120a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800120e:	f001 f8cb 	bl	80023a8 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8001212:	2100      	movs	r1, #0
 8001214:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001218:	f001 f8c6 	bl	80023a8 <RCC_APB1PeriphResetCmd>
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 800121c:	e009      	b.n	8001232 <CAN_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 800121e:	2101      	movs	r1, #1
 8001220:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001224:	f001 f8c0 	bl	80023a8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8001228:	2100      	movs	r1, #0
 800122a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800122e:	f001 f8bb 	bl	80023a8 <RCC_APB1PeriphResetCmd>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40006400 	.word	0x40006400

08001240 <CAN_Init>:
  *                         CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 0202 	bic.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800126a:	e002      	b.n	8001272 <CAN_Init+0x32>
  {
    wait_ack++;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	3301      	adds	r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b01      	cmp	r3, #1
 800127c:	d004      	beq.n	8001288 <CAN_Init+0x48>
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001284:	4293      	cmp	r3, r2
 8001286:	d1f1      	bne.n	800126c <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b01      	cmp	r3, #1
 8001292:	d002      	beq.n	800129a <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e09c      	b.n	80013d4 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	799b      	ldrb	r3, [r3, #6]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d106      	bne.n	80012b0 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e005      	b.n	80012bc <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	79db      	ldrb	r3, [r3, #7]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d106      	bne.n	80012d2 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e005      	b.n	80012de <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	7a1b      	ldrb	r3, [r3, #8]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d106      	bne.n	80012f4 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f043 0220 	orr.w	r2, r3, #32
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e005      	b.n	8001300 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 0220 	bic.w	r2, r3, #32
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	7a5b      	ldrb	r3, [r3, #9]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d106      	bne.n	8001316 <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f043 0210 	orr.w	r2, r3, #16
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e005      	b.n	8001322 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0210 	bic.w	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	7a9b      	ldrb	r3, [r3, #10]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d106      	bne.n	8001338 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f043 0208 	orr.w	r2, r3, #8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e005      	b.n	8001344 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 0208 	bic.w	r2, r3, #8
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	7adb      	ldrb	r3, [r3, #11]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f043 0204 	orr.w	r2, r3, #4
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e005      	b.n	8001366 <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 0204 	bic.w	r2, r3, #4
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	789b      	ldrb	r3, [r3, #2]
 800136a:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	78db      	ldrb	r3, [r3, #3]
 8001370:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8001372:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800137a:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	795b      	ldrb	r3, [r3, #5]
 8001380:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8001382:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800138a:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 0201 	bic.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80013a0:	e002      	b.n	80013a8 <CAN_Init+0x168>
   {
     wait_ack++;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d104      	bne.n	80013be <CAN_Init+0x17e>
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d1f1      	bne.n	80013a2 <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d102      	bne.n	80013d0 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	e001      	b.n	80013d4 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <CAN_FilterInit>:
  *                               structure that contains the configuration 
  *                               information.
  * @retval None.
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 80013e0:	b490      	push	{r4, r7}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a9b      	ldrb	r3, [r3, #10]
 80013f0:	461a      	mov	r2, r3
 80013f2:	2301      	movs	r3, #1
 80013f4:	4093      	lsls	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <CAN_FilterInit+0x180>)
 80013fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013fe:	4a58      	ldr	r2, [pc, #352]	; (8001560 <CAN_FilterInit+0x180>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <CAN_FilterInit+0x180>)
 800140a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43db      	mvns	r3, r3
 8001412:	4953      	ldr	r1, [pc, #332]	; (8001560 <CAN_FilterInit+0x180>)
 8001414:	4013      	ands	r3, r2
 8001416:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7b1b      	ldrb	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d129      	bne.n	8001476 <CAN_FilterInit+0x96>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8001422:	4b4f      	ldr	r3, [pc, #316]	; (8001560 <CAN_FilterInit+0x180>)
 8001424:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	494c      	ldr	r1, [pc, #304]	; (8001560 <CAN_FilterInit+0x180>)
 800142e:	4013      	ands	r3, r2
 8001430:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	88db      	ldrh	r3, [r3, #6]
 8001438:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	8852      	ldrh	r2, [r2, #2]
 800143e:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8001440:	4947      	ldr	r1, [pc, #284]	; (8001560 <CAN_FilterInit+0x180>)
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	7a92      	ldrb	r2, [r2, #10]
 8001446:	4610      	mov	r0, r2
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8001448:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800144c:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8001450:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	889b      	ldrh	r3, [r3, #4]
 8001458:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	8812      	ldrh	r2, [r2, #0]
 800145e:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001460:	493f      	ldr	r1, [pc, #252]	; (8001560 <CAN_FilterInit+0x180>)
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	7a92      	ldrb	r2, [r2, #10]
 8001466:	4610      	mov	r0, r2
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8001468:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800146c:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	440b      	add	r3, r1
 8001474:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7b1b      	ldrb	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d128      	bne.n	80014d0 <CAN_FilterInit+0xf0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <CAN_FilterInit+0x180>)
 8001480:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001484:	4936      	ldr	r1, [pc, #216]	; (8001560 <CAN_FilterInit+0x180>)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	8852      	ldrh	r2, [r2, #2]
 8001498:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800149a:	4931      	ldr	r1, [pc, #196]	; (8001560 <CAN_FilterInit+0x180>)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	7a92      	ldrb	r2, [r2, #10]
 80014a0:	4610      	mov	r0, r2
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80014a2:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80014a6:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80014aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	889b      	ldrh	r3, [r3, #4]
 80014b2:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	88d2      	ldrh	r2, [r2, #6]
 80014b8:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80014ba:	4929      	ldr	r1, [pc, #164]	; (8001560 <CAN_FilterInit+0x180>)
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	7a92      	ldrb	r2, [r2, #10]
 80014c0:	4610      	mov	r0, r2
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80014c2:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80014c6:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7adb      	ldrb	r3, [r3, #11]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <CAN_FilterInit+0x10c>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <CAN_FilterInit+0x180>)
 80014da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <CAN_FilterInit+0x180>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 80014ea:	e007      	b.n	80014fc <CAN_FilterInit+0x11c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <CAN_FilterInit+0x180>)
 80014ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014f2:	491b      	ldr	r1, [pc, #108]	; (8001560 <CAN_FilterInit+0x180>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	891b      	ldrh	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d108      	bne.n	8001516 <CAN_FilterInit+0x136>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <CAN_FilterInit+0x180>)
 8001506:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	4914      	ldr	r1, [pc, #80]	; (8001560 <CAN_FilterInit+0x180>)
 8001510:	4013      	ands	r3, r2
 8001512:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	891b      	ldrh	r3, [r3, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <CAN_FilterInit+0x14e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <CAN_FilterInit+0x180>)
 8001520:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <CAN_FilterInit+0x180>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7b5b      	ldrb	r3, [r3, #13]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <CAN_FilterInit+0x166>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <CAN_FilterInit+0x180>)
 8001538:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800153c:	4908      	ldr	r1, [pc, #32]	; (8001560 <CAN_FilterInit+0x180>)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <CAN_FilterInit+0x180>)
 8001548:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <CAN_FilterInit+0x180>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bc90      	pop	{r4, r7}
 800155e:	4770      	bx	lr
 8001560:	40006400 	.word	0x40006400

08001564 <CAN_StructInit>:
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which
  *                         will be initialized.
  * @retval None.
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2203      	movs	r2, #3
 80015a0:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2202      	movs	r2, #2
 80015a6:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	801a      	strh	r2, [r3, #0]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	460b      	mov	r3, r1
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	331b      	adds	r3, #27
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7a1b      	ldrb	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10b      	bne.n	80015fe <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	331b      	adds	r3, #27
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	4413      	add	r3, r2
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0d5b      	lsrs	r3, r3, #21
 80015f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e00a      	b.n	8001614 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	331b      	adds	r3, #27
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001614:	7afb      	ldrb	r3, [r7, #11]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	331b      	adds	r3, #27
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	b2da      	uxtb	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 800162c:	7afb      	ldrb	r3, [r7, #11]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	331b      	adds	r3, #27
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	3304      	adds	r3, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	b2da      	uxtb	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	331b      	adds	r3, #27
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	4413      	add	r3, r2
 8001650:	3304      	adds	r3, #4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	b2da      	uxtb	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 800165c:	7afb      	ldrb	r3, [r7, #11]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4413      	add	r3, r2
 8001664:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8001670:	7afb      	ldrb	r3, [r7, #11]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8001686:	7afb      	ldrb	r3, [r7, #11]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	b2da      	uxtb	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 800169c:	7afb      	ldrb	r3, [r7, #11]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0e1b      	lsrs	r3, r3, #24
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80016f2:	7afb      	ldrb	r3, [r7, #11]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0e1b      	lsrs	r3, r3, #24
 8001702:	b2da      	uxtb	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001708:	7afb      	ldrb	r3, [r7, #11]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f043 0220 	orr.w	r2, r3, #32
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 800171a:	e005      	b.n	8001728 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f043 0220 	orr.w	r2, r3, #32
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	611a      	str	r2, [r3, #16]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *                   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	4613      	mov	r3, r2
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	431a      	orrs	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 8001752:	e006      	b.n	8001762 <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	43db      	mvns	r3, r3
 800175c:	401a      	ands	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	615a      	str	r2, [r3, #20]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <CAN_ClearITPendingBit>:
  *                  -  CAN_IT_LEC    
  *                  -  CAN_IT_ERR 
  * @retval None.
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177c:	d043      	beq.n	8001806 <CAN_ClearITPendingBit+0x9a>
 800177e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001782:	d80d      	bhi.n	80017a0 <CAN_ClearITPendingBit+0x34>
 8001784:	2b08      	cmp	r3, #8
 8001786:	d02a      	beq.n	80017de <CAN_ClearITPendingBit+0x72>
 8001788:	2b08      	cmp	r3, #8
 800178a:	d804      	bhi.n	8001796 <CAN_ClearITPendingBit+0x2a>
 800178c:	2b01      	cmp	r3, #1
 800178e:	d01e      	beq.n	80017ce <CAN_ClearITPendingBit+0x62>
 8001790:	2b04      	cmp	r3, #4
 8001792:	d020      	beq.n	80017d6 <CAN_ClearITPendingBit+0x6a>
	      CANx->MSR = CAN_MSR_ERRI; 
	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
                  of the CAN Bus status*/
	      break;
      default :
	      break;
 8001794:	e051      	b.n	800183a <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8001796:	2b20      	cmp	r3, #32
 8001798:	d025      	beq.n	80017e6 <CAN_ClearITPendingBit+0x7a>
 800179a:	2b40      	cmp	r3, #64	; 0x40
 800179c:	d027      	beq.n	80017ee <CAN_ClearITPendingBit+0x82>
	      break;
 800179e:	e04c      	b.n	800183a <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80017a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017a4:	d03b      	beq.n	800181e <CAN_ClearITPendingBit+0xb2>
 80017a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017aa:	d806      	bhi.n	80017ba <CAN_ClearITPendingBit+0x4e>
 80017ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b0:	d02d      	beq.n	800180e <CAN_ClearITPendingBit+0xa2>
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b6:	d02e      	beq.n	8001816 <CAN_ClearITPendingBit+0xaa>
	      break;
 80017b8:	e03f      	b.n	800183a <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80017ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017be:	d01a      	beq.n	80017f6 <CAN_ClearITPendingBit+0x8a>
 80017c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017c4:	d01b      	beq.n	80017fe <CAN_ClearITPendingBit+0x92>
 80017c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ca:	d02f      	beq.n	800182c <CAN_ClearITPendingBit+0xc0>
	      break;
 80017cc:	e035      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <CAN_ClearITPendingBit+0xd8>)
 80017d2:	609a      	str	r2, [r3, #8]
	      break;
 80017d4:	e031      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->RF0R = CAN_RF0R_FULL0; 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2208      	movs	r2, #8
 80017da:	60da      	str	r2, [r3, #12]
	      break;
 80017dc:	e02d      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->RF0R = CAN_RF0R_FOVR0; 
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2210      	movs	r2, #16
 80017e2:	60da      	str	r2, [r3, #12]
	      break;
 80017e4:	e029      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->RF1R = CAN_RF1R_FULL1;  
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2208      	movs	r2, #8
 80017ea:	611a      	str	r2, [r3, #16]
	      break;
 80017ec:	e025      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->RF1R = CAN_RF1R_FOVR1; 
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2210      	movs	r2, #16
 80017f2:	611a      	str	r2, [r3, #16]
	      break;
 80017f4:	e021      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_WKUI;  
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2208      	movs	r2, #8
 80017fa:	605a      	str	r2, [r3, #4]
	      break;
 80017fc:	e01d      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_SLAKI;   
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2210      	movs	r2, #16
 8001802:	605a      	str	r2, [r3, #4]
	      break;
 8001804:	e019      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2204      	movs	r2, #4
 800180a:	605a      	str	r2, [r3, #4]
	      break;
 800180c:	e015      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI; 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	605a      	str	r2, [r3, #4]
	      break;
 8001814:	e011      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI; 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2204      	movs	r2, #4
 800181a:	605a      	str	r2, [r3, #4]
	      break;
 800181c:	e00d      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->ESR = RESET; 
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
	      CANx->MSR = CAN_MSR_ERRI; 
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2204      	movs	r2, #4
 8001828:	605a      	str	r2, [r3, #4]
	      break;
 800182a:	e006      	b.n	800183a <CAN_ClearITPendingBit+0xce>
	      CANx->ESR = RESET; 
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
	      CANx->MSR = CAN_MSR_ERRI; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2204      	movs	r2, #4
 8001836:	605a      	str	r2, [r3, #4]
	      break;
 8001838:	bf00      	nop
   }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	00010101 	.word	0x00010101

08001848 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a43      	ldr	r2, [pc, #268]	; (8001988 <DMA_DeInit+0x140>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d106      	bne.n	800188c <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 800187e:	4b43      	ldr	r3, [pc, #268]	; (800198c <DMA_DeInit+0x144>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a42      	ldr	r2, [pc, #264]	; (800198c <DMA_DeInit+0x144>)
 8001884:	f043 030f 	orr.w	r3, r3, #15
 8001888:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 800188a:	e077      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a40      	ldr	r2, [pc, #256]	; (8001990 <DMA_DeInit+0x148>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d106      	bne.n	80018a2 <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8001894:	4b3d      	ldr	r3, [pc, #244]	; (800198c <DMA_DeInit+0x144>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a3c      	ldr	r2, [pc, #240]	; (800198c <DMA_DeInit+0x144>)
 800189a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800189e:	6053      	str	r3, [r2, #4]
}
 80018a0:	e06c      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a3b      	ldr	r2, [pc, #236]	; (8001994 <DMA_DeInit+0x14c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d106      	bne.n	80018b8 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <DMA_DeInit+0x144>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4a37      	ldr	r2, [pc, #220]	; (800198c <DMA_DeInit+0x144>)
 80018b0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80018b4:	6053      	str	r3, [r2, #4]
}
 80018b6:	e061      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a37      	ldr	r2, [pc, #220]	; (8001998 <DMA_DeInit+0x150>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d106      	bne.n	80018ce <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 80018c0:	4b32      	ldr	r3, [pc, #200]	; (800198c <DMA_DeInit+0x144>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a31      	ldr	r2, [pc, #196]	; (800198c <DMA_DeInit+0x144>)
 80018c6:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80018ca:	6053      	str	r3, [r2, #4]
}
 80018cc:	e056      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a32      	ldr	r2, [pc, #200]	; (800199c <DMA_DeInit+0x154>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d106      	bne.n	80018e4 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <DMA_DeInit+0x144>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a2c      	ldr	r2, [pc, #176]	; (800198c <DMA_DeInit+0x144>)
 80018dc:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80018e0:	6053      	str	r3, [r2, #4]
}
 80018e2:	e04b      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <DMA_DeInit+0x158>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d106      	bne.n	80018fa <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <DMA_DeInit+0x144>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a26      	ldr	r2, [pc, #152]	; (800198c <DMA_DeInit+0x144>)
 80018f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f6:	6053      	str	r3, [r2, #4]
}
 80018f8:	e040      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <DMA_DeInit+0x15c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d106      	bne.n	8001910 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <DMA_DeInit+0x144>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a21      	ldr	r2, [pc, #132]	; (800198c <DMA_DeInit+0x144>)
 8001908:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800190c:	6053      	str	r3, [r2, #4]
}
 800190e:	e035      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <DMA_DeInit+0x160>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d106      	bne.n	8001926 <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <DMA_DeInit+0x164>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4a23      	ldr	r2, [pc, #140]	; (80019ac <DMA_DeInit+0x164>)
 800191e:	f043 030f 	orr.w	r3, r3, #15
 8001922:	6053      	str	r3, [r2, #4]
}
 8001924:	e02a      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <DMA_DeInit+0x168>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d106      	bne.n	800193c <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <DMA_DeInit+0x164>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <DMA_DeInit+0x164>)
 8001934:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001938:	6053      	str	r3, [r2, #4]
}
 800193a:	e01f      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <DMA_DeInit+0x16c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d106      	bne.n	8001952 <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <DMA_DeInit+0x164>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a18      	ldr	r2, [pc, #96]	; (80019ac <DMA_DeInit+0x164>)
 800194a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800194e:	6053      	str	r3, [r2, #4]
}
 8001950:	e014      	b.n	800197c <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <DMA_DeInit+0x170>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d106      	bne.n	8001968 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <DMA_DeInit+0x164>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <DMA_DeInit+0x164>)
 8001960:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8001964:	6053      	str	r3, [r2, #4]
}
 8001966:	e009      	b.n	800197c <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a14      	ldr	r2, [pc, #80]	; (80019bc <DMA_DeInit+0x174>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d105      	bne.n	800197c <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <DMA_DeInit+0x164>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <DMA_DeInit+0x164>)
 8001976:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800197a:	6053      	str	r3, [r2, #4]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40020008 	.word	0x40020008
 800198c:	40020000 	.word	0x40020000
 8001990:	4002001c 	.word	0x4002001c
 8001994:	40020030 	.word	0x40020030
 8001998:	40020044 	.word	0x40020044
 800199c:	40020058 	.word	0x40020058
 80019a0:	4002006c 	.word	0x4002006c
 80019a4:	40020080 	.word	0x40020080
 80019a8:	40020408 	.word	0x40020408
 80019ac:	40020400 	.word	0x40020400
 80019b0:	4002041c 	.word	0x4002041c
 80019b4:	40020430 	.word	0x40020430
 80019b8:	40020444 	.word	0x40020444
 80019bc:	40020458 	.word	0x40020458

080019c0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019de:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80019ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80019fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001a06:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60da      	str	r2, [r3, #12]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001a5a:	e006      	b.n	8001a6a <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001a64:	4013      	ands	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8001a94:	e006      	b.n	8001aa4 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR &= ~DMA_IT;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	601a      	str	r2, [r3, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.                 
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	605a      	str	r2, [r3, #4]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
	...

08001acc <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8001ade:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <DMA_ClearFlag+0x2c>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8001ae4:	e002      	b.n	8001aec <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <DMA_ClearFlag+0x30>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6053      	str	r3, [r2, #4]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020000 	.word	0x40020000

08001b00 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <DMA_GetITStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <DMA_GetITStatus+0x48>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	e002      	b.n	8001b28 <DMA_GetITStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <DMA_GetITStatus+0x4c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <DMA_GetITStatus+0x38>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e001      	b.n	8001b3c <DMA_GetITStatus+0x3c>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40020000 	.word	0x40020000

08001b50 <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <FLASH_Unlock+0x18>)
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <FLASH_Unlock+0x1c>)
 8001b58:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8001b5a:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <FLASH_Unlock+0x18>)
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <FLASH_Unlock+0x20>)
 8001b5e:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	45670123 	.word	0x45670123
 8001b70:	cdef89ab 	.word	0xcdef89ab

08001b74 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001b80:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001b84:	f000 f88e 	bl	8001ca4 <FLASH_WaitForLastOperation>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d11b      	bne.n	8001bca <FLASH_ErasePage+0x56>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <FLASH_ErasePage+0x60>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <FLASH_ErasePage+0x60>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 8001b9e:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <FLASH_ErasePage+0x60>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <FLASH_ErasePage+0x60>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <FLASH_ErasePage+0x60>)
 8001baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bae:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001bb0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001bb4:	f000 f876 	bl	8001ca4 <FLASH_WaitForLastOperation>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <FLASH_ErasePage+0x60>)
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	4904      	ldr	r1, [pc, #16]	; (8001bd4 <FLASH_ErasePage+0x60>)
 8001bc2:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	610b      	str	r3, [r1, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8001be4:	2304      	movs	r3, #4
 8001be6:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001be8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bec:	f000 f85a 	bl	8001ca4 <FLASH_WaitForLastOperation>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d115      	bne.n	8001c26 <FLASH_ProgramHalfWord+0x4e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <FLASH_ProgramHalfWord+0x58>)
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <FLASH_ProgramHalfWord+0x58>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	887a      	ldrh	r2, [r7, #2]
 8001c0a:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c10:	f000 f848 	bl	8001ca4 <FLASH_WaitForLastOperation>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <FLASH_ProgramHalfWord+0x58>)
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	4904      	ldr	r1, [pc, #16]	; (8001c30 <FLASH_ProgramHalfWord+0x58>)
 8001c1e:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001c22:	4013      	ands	r3, r2
 8001c24:	610b      	str	r3, [r1, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40022000 	.word	0x40022000

08001c34 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
  *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8001c3c:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <FLASH_ClearFlag+0x18>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60d3      	str	r3, [r2, #12]
#endif /* STM32F10X_XL */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40022000 	.word	0x40022000

08001c50 <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8001c56:	2304      	movs	r3, #4
 8001c58:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <FLASH_GetBank1Status+0x50>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d102      	bne.n	8001c6c <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
 8001c66:	2301      	movs	r3, #1
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	e013      	b.n	8001c94 <FLASH_GetBank1Status+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <FLASH_GetBank1Status+0x50>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <FLASH_GetBank1Status+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	e00a      	b.n	8001c94 <FLASH_GetBank1Status+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <FLASH_GetBank1Status+0x50>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <FLASH_GetBank1Status+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	e001      	b.n	8001c94 <FLASH_GetBank1Status+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8001c90:	2304      	movs	r3, #4
 8001c92:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 8001c94:	79fb      	ldrb	r3, [r7, #7]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001cac:	2304      	movs	r3, #4
 8001cae:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8001cb0:	f7ff ffce 	bl	8001c50 <FLASH_GetBank1Status>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001cb8:	e006      	b.n	8001cc8 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetBank1Status();
 8001cba:	f7ff ffc9 	bl	8001c50 <FLASH_GetBank1Status>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <FLASH_WaitForLastOperation+0x30>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f2      	bne.n	8001cba <FLASH_WaitForLastOperation+0x16>
  }
  if(Timeout == 0x00 )
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8001cda:	2305      	movs	r3, #5
 8001cdc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	78db      	ldrb	r3, [r3, #3]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	78db      	ldrb	r3, [r3, #3]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	789b      	ldrb	r3, [r3, #2]
 8001d24:	461a      	mov	r2, r3
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d044      	beq.n	8001dc0 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	e038      	b.n	8001db4 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001d42:	2201      	movs	r2, #1
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d126      	bne.n	8001dae <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001d66:	220f      	movs	r2, #15
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4013      	ands	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	78db      	ldrb	r3, [r3, #3]
 8001d8c:	2b28      	cmp	r3, #40	; 0x28
 8001d8e:	d105      	bne.n	8001d9c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001d90:	2201      	movs	r2, #1
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	409a      	lsls	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	615a      	str	r2, [r3, #20]
 8001d9a:	e008      	b.n	8001dae <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	78db      	ldrb	r3, [r3, #3]
 8001da0:	2b48      	cmp	r3, #72	; 0x48
 8001da2:	d104      	bne.n	8001dae <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001da4:	2201      	movs	r2, #1
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	409a      	lsls	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b07      	cmp	r3, #7
 8001db8:	d9c3      	bls.n	8001d42 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	2bff      	cmp	r3, #255	; 0xff
 8001dc6:	d946      	bls.n	8001e56 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	e03a      	b.n	8001e4a <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	2201      	movs	r2, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d127      	bne.n	8001e44 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	78db      	ldrb	r3, [r3, #3]
 8001e20:	2b28      	cmp	r3, #40	; 0x28
 8001e22:	d105      	bne.n	8001e30 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	3308      	adds	r3, #8
 8001e28:	2201      	movs	r2, #1
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	78db      	ldrb	r3, [r3, #3]
 8001e34:	2b48      	cmp	r3, #72	; 0x48
 8001e36:	d105      	bne.n	8001e44 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	3301      	adds	r3, #1
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b07      	cmp	r3, #7
 8001e4e:	d9c1      	bls.n	8001dd4 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	605a      	str	r2, [r3, #4]
  }
}
 8001e56:	bf00      	nop
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e001      	b.n	8001e86 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	611a      	str	r2, [r3, #16]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	615a      	str	r2, [r3, #20]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	807b      	strh	r3, [r7, #2]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001eda:	787b      	ldrb	r3, [r7, #1]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee0:	887a      	ldrh	r2, [r7, #2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8001ee6:	e002      	b.n	8001eee <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8001ee8:	887a      	ldrh	r2, [r7, #2]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	615a      	str	r2, [r3, #20]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <RCC_DeInit+0x54>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <RCC_DeInit+0x54>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <RCC_DeInit+0x54>)
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	490f      	ldr	r1, [pc, #60]	; (8001f4c <RCC_DeInit+0x54>)
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <RCC_DeInit+0x58>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <RCC_DeInit+0x54>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <RCC_DeInit+0x54>)
 8001f1a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <RCC_DeInit+0x54>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <RCC_DeInit+0x54>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <RCC_DeInit+0x54>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <RCC_DeInit+0x54>)
 8001f36:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f3a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <RCC_DeInit+0x54>)
 8001f3e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f42:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	f8ff0000 	.word	0xf8ff0000

08001f54 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <RCC_HSEConfig+0x58>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <RCC_HSEConfig+0x58>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <RCC_HSEConfig+0x58>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <RCC_HSEConfig+0x58>)
 8001f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f72:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7a:	d003      	beq.n	8001f84 <RCC_HSEConfig+0x30>
 8001f7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f80:	d007      	beq.n	8001f92 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8001f82:	e00d      	b.n	8001fa0 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <RCC_HSEConfig+0x58>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a08      	ldr	r2, [pc, #32]	; (8001fac <RCC_HSEConfig+0x58>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
      break;
 8001f90:	e006      	b.n	8001fa0 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <RCC_HSEConfig+0x58>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <RCC_HSEConfig+0x58>)
 8001f98:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001f9c:	6013      	str	r3, [r2, #0]
      break;
 8001f9e:	bf00      	nop
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000

08001fb0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001fc2:	2031      	movs	r0, #49	; 0x31
 8001fc4:	f000 fa0e 	bl	80023e4 <RCC_GetFlagStatus>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001fd8:	d002      	beq.n	8001fe0 <RCC_WaitForHSEStartUp+0x30>
 8001fda:	79bb      	ldrb	r3, [r7, #6]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001fe0:	2031      	movs	r0, #49	; 0x31
 8001fe2:	f000 f9ff 	bl	80023e4 <RCC_GetFlagStatus>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001fec:	2301      	movs	r3, #1
 8001fee:	71fb      	strb	r3, [r7, #7]
 8001ff0:	e001      	b.n	8001ff6 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <RCC_PLLConfig+0x38>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800201a:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002028:	4a03      	ldr	r2, [pc, #12]	; (8002038 <RCC_PLLConfig+0x38>)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6053      	str	r3, [r2, #4]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000

0800203c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8002046:	4a04      	ldr	r2, [pc, #16]	; (8002058 <RCC_PLLCmd+0x1c>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	42420060 	.word	0x42420060

0800205c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <RCC_SYSCLKConfig+0x34>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f023 0303 	bic.w	r3, r3, #3
 8002074:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <RCC_SYSCLKConfig+0x34>)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6053      	str	r3, [r2, #4]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000

08002094 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <RCC_GetSYSCLKSource+0x18>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	b2db      	uxtb	r3, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000

080020b0 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <RCC_HCLKConfig+0x34>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c8:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <RCC_HCLKConfig+0x34>)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6053      	str	r3, [r2, #4]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <RCC_PCLK1Config+0x34>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002100:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <RCC_PCLK1Config+0x34>)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6053      	str	r3, [r2, #4]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000

08002120 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <RCC_PCLK2Config+0x34>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002138:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002144:	4a03      	ldr	r2, [pc, #12]	; (8002154 <RCC_PCLK2Config+0x34>)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6053      	str	r3, [r2, #4]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	40021000 	.word	0x40021000

08002158 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8002170:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <RCC_GetClocksFreq+0x14c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d007      	beq.n	8002190 <RCC_GetClocksFreq+0x38>
 8002180:	2b08      	cmp	r3, #8
 8002182:	d009      	beq.n	8002198 <RCC_GetClocksFreq+0x40>
 8002184:	2b00      	cmp	r3, #0
 8002186:	d133      	bne.n	80021f0 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a47      	ldr	r2, [pc, #284]	; (80022a8 <RCC_GetClocksFreq+0x150>)
 800218c:	601a      	str	r2, [r3, #0]
      break;
 800218e:	e033      	b.n	80021f8 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a45      	ldr	r2, [pc, #276]	; (80022a8 <RCC_GetClocksFreq+0x150>)
 8002194:	601a      	str	r2, [r3, #0]
      break;
 8002196:	e02f      	b.n	80021f8 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8002198:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <RCC_GetClocksFreq+0x14c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021a0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80021a2:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <RCC_GetClocksFreq+0x14c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021aa:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	3302      	adds	r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <RCC_GetClocksFreq+0x154>)
 80021be:	fb02 f203 	mul.w	r2, r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80021c6:	e017      	b.n	80021f8 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80021c8:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <RCC_GetClocksFreq+0x14c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4a35      	ldr	r2, [pc, #212]	; (80022ac <RCC_GetClocksFreq+0x154>)
 80021d8:	fb02 f203 	mul.w	r2, r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	601a      	str	r2, [r3, #0]
      break;
 80021e0:	e00a      	b.n	80021f8 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4a30      	ldr	r2, [pc, #192]	; (80022a8 <RCC_GetClocksFreq+0x150>)
 80021e6:	fb02 f203 	mul.w	r2, r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
      break;
 80021ee:	e003      	b.n	80021f8 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a2d      	ldr	r2, [pc, #180]	; (80022a8 <RCC_GetClocksFreq+0x150>)
 80021f4:	601a      	str	r2, [r3, #0]
      break;
 80021f6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <RCC_GetClocksFreq+0x14c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002200:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002208:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <RCC_GetClocksFreq+0x158>)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	4413      	add	r3, r2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	40da      	lsrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <RCC_GetClocksFreq+0x14c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002228:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002230:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <RCC_GetClocksFreq+0x158>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	40da      	lsrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <RCC_GetClocksFreq+0x14c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002250:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	0adb      	lsrs	r3, r3, #11
 8002256:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002258:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <RCC_GetClocksFreq+0x158>)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	40da      	lsrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <RCC_GetClocksFreq+0x14c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002278:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	0b9b      	lsrs	r3, r3, #14
 800227e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8002280:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <RCC_GetClocksFreq+0x15c>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	4413      	add	r3, r2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	fbb2 f2f3 	udiv	r2, r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	611a      	str	r2, [r3, #16]
}
 800229a:	bf00      	nop
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	40021000 	.word	0x40021000
 80022a8:	007a1200 	.word	0x007a1200
 80022ac:	003d0900 	.word	0x003d0900
 80022b0:	20000230 	.word	0x20000230
 80022b4:	20000240 	.word	0x20000240

080022b8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <RCC_AHBPeriphClockCmd+0x38>)
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	4908      	ldr	r1, [pc, #32]	; (80022f0 <RCC_AHBPeriphClockCmd+0x38>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80022d6:	e006      	b.n	80022e6 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <RCC_AHBPeriphClockCmd+0x38>)
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	43db      	mvns	r3, r3
 80022e0:	4903      	ldr	r1, [pc, #12]	; (80022f0 <RCC_AHBPeriphClockCmd+0x38>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	614b      	str	r3, [r1, #20]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000

080022f4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <RCC_APB2PeriphClockCmd+0x38>)
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <RCC_APB2PeriphClockCmd+0x38>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4313      	orrs	r3, r2
 8002310:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002312:	e006      	b.n	8002322 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <RCC_APB2PeriphClockCmd+0x38>)
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	43db      	mvns	r3, r3
 800231c:	4903      	ldr	r1, [pc, #12]	; (800232c <RCC_APB2PeriphClockCmd+0x38>)
 800231e:	4013      	ands	r3, r2
 8002320:	618b      	str	r3, [r1, #24]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	40021000 	.word	0x40021000

08002330 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <RCC_APB1PeriphClockCmd+0x38>)
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <RCC_APB1PeriphClockCmd+0x38>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4313      	orrs	r3, r2
 800234c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800234e:	e006      	b.n	800235e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <RCC_APB1PeriphClockCmd+0x38>)
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	43db      	mvns	r3, r3
 8002358:	4903      	ldr	r1, [pc, #12]	; (8002368 <RCC_APB1PeriphClockCmd+0x38>)
 800235a:	4013      	ands	r3, r2
 800235c:	61cb      	str	r3, [r1, #28]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000

0800236c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <RCC_APB2PeriphResetCmd+0x38>)
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <RCC_APB2PeriphResetCmd+0x38>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4313      	orrs	r3, r2
 8002388:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800238a:	e006      	b.n	800239a <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <RCC_APB2PeriphResetCmd+0x38>)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	43db      	mvns	r3, r3
 8002394:	4903      	ldr	r1, [pc, #12]	; (80023a4 <RCC_APB2PeriphResetCmd+0x38>)
 8002396:	4013      	ands	r3, r2
 8002398:	60cb      	str	r3, [r1, #12]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	40021000 	.word	0x40021000

080023a8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <RCC_APB1PeriphResetCmd+0x38>)
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <RCC_APB1PeriphResetCmd+0x38>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80023c6:	e006      	b.n	80023d6 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <RCC_APB1PeriphResetCmd+0x38>)
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <RCC_APB1PeriphResetCmd+0x38>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	610b      	str	r3, [r1, #16]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	40021000 	.word	0x40021000

080023e4 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d103      	bne.n	8002410 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <RCC_GetFlagStatus+0x70>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e009      	b.n	8002424 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d103      	bne.n	800241e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <RCC_GetFlagStatus+0x70>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e002      	b.n	8002424 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <RCC_GetFlagStatus+0x70>)
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 800243c:	2301      	movs	r3, #1
 800243e:	74fb      	strb	r3, [r7, #19]
 8002440:	e001      	b.n	8002446 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8002446:	7cfb      	ldrb	r3, [r7, #19]
}
 8002448:	4618      	mov	r0, r3
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a26      	ldr	r2, [pc, #152]	; (80024fc <USART_DeInit+0xa4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d10a      	bne.n	800247e <USART_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002468:	2101      	movs	r1, #1
 800246a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800246e:	f7ff ff7d 	bl	800236c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002472:	2100      	movs	r1, #0
 8002474:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002478:	f7ff ff78 	bl	800236c <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 800247c:	e03a      	b.n	80024f4 <USART_DeInit+0x9c>
  else if (USARTx == USART2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <USART_DeInit+0xa8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10a      	bne.n	800249c <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002486:	2101      	movs	r1, #1
 8002488:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800248c:	f7ff ff8c 	bl	80023a8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002490:	2100      	movs	r1, #0
 8002492:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002496:	f7ff ff87 	bl	80023a8 <RCC_APB1PeriphResetCmd>
}
 800249a:	e02b      	b.n	80024f4 <USART_DeInit+0x9c>
  else if (USARTx == USART3)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a19      	ldr	r2, [pc, #100]	; (8002504 <USART_DeInit+0xac>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10a      	bne.n	80024ba <USART_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80024a4:	2101      	movs	r1, #1
 80024a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80024aa:	f7ff ff7d 	bl	80023a8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80024ae:	2100      	movs	r1, #0
 80024b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80024b4:	f7ff ff78 	bl	80023a8 <RCC_APB1PeriphResetCmd>
}
 80024b8:	e01c      	b.n	80024f4 <USART_DeInit+0x9c>
  else if (USARTx == UART4)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <USART_DeInit+0xb0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10a      	bne.n	80024d8 <USART_DeInit+0x80>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80024c2:	2101      	movs	r1, #1
 80024c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024c8:	f7ff ff6e 	bl	80023a8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80024cc:	2100      	movs	r1, #0
 80024ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024d2:	f7ff ff69 	bl	80023a8 <RCC_APB1PeriphResetCmd>
}
 80024d6:	e00d      	b.n	80024f4 <USART_DeInit+0x9c>
    if (USARTx == UART5)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a0c      	ldr	r2, [pc, #48]	; (800250c <USART_DeInit+0xb4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d109      	bne.n	80024f4 <USART_DeInit+0x9c>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80024e0:	2101      	movs	r1, #1
 80024e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80024e6:	f7ff ff5f 	bl	80023a8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80024ea:	2100      	movs	r1, #0
 80024ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80024f0:	f7ff ff5a 	bl	80023a8 <RCC_APB1PeriphResetCmd>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40013800 	.word	0x40013800
 8002500:	40004400 	.word	0x40004400
 8002504:	40004800 	.word	0x40004800
 8002508:	40004c00 	.word	0x40004c00
 800250c:	40005000 	.word	0x40005000

08002510 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800251a:	2300      	movs	r3, #0
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251e:	2300      	movs	r3, #0
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8a1b      	ldrh	r3, [r3, #16]
 8002536:	b29b      	uxth	r3, r3
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800253a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8002540:	4013      	ands	r3, r2
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	88db      	ldrh	r3, [r3, #6]
 8002548:	461a      	mov	r2, r3
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	4313      	orrs	r3, r2
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	899b      	ldrh	r3, [r3, #12]
 800255c:	b29b      	uxth	r3, r3
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002562:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8002566:	4013      	ands	r3, r2
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	889a      	ldrh	r2, [r3, #4]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	891b      	ldrh	r3, [r3, #8]
 8002572:	4313      	orrs	r3, r2
 8002574:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800257a:	4313      	orrs	r3, r2
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	4313      	orrs	r3, r2
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	b29a      	uxth	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	8a9b      	ldrh	r3, [r3, #20]
 8002592:	b29b      	uxth	r3, r3
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8002596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002598:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800259c:	4013      	ands	r3, r2
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	899b      	ldrh	r3, [r3, #12]
 80025a4:	461a      	mov	r2, r3
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	4313      	orrs	r3, r2
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fdcd 	bl	8002158 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4a2e      	ldr	r2, [pc, #184]	; (800267c <USART_Init+0x16c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d102      	bne.n	80025cc <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ca:	e001      	b.n	80025d0 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	899b      	ldrh	r3, [r3, #12]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da0c      	bge.n	80025f6 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80025dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	009a      	lsls	r2, r3, #2
 80025e6:	441a      	add	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
 80025f4:	e00b      	b.n	800260e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80025f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	009a      	lsls	r2, r3, #2
 8002600:	441a      	add	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <USART_Init+0x170>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	2264      	movs	r2, #100	; 0x64
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	899b      	ldrh	r3, [r3, #12]
 8002630:	b29b      	uxth	r3, r3
 8002632:	b21b      	sxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	da0c      	bge.n	8002652 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	3332      	adds	r3, #50	; 0x32
 800263e:	4a10      	ldr	r2, [pc, #64]	; (8002680 <USART_Init+0x170>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264c:	4313      	orrs	r3, r2
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002650:	e00b      	b.n	800266a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	3332      	adds	r3, #50	; 0x32
 8002658:	4a09      	ldr	r2, [pc, #36]	; (8002680 <USART_Init+0x170>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002666:	4313      	orrs	r3, r2
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	b29a      	uxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	811a      	strh	r2, [r3, #8]
}
 8002672:	bf00      	nop
 8002674:	3730      	adds	r7, #48	; 0x30
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40013800 	.word	0x40013800
 8002680:	51eb851f 	.word	0x51eb851f

08002684 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8a1b      	ldrh	r3, [r3, #16]
 8002696:	b29b      	uxth	r3, r3
 8002698:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	881a      	ldrh	r2, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	889b      	ldrh	r3, [r3, #4]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	88db      	ldrh	r3, [r3, #6]
 80026bc:	4313      	orrs	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	821a      	strh	r2, [r3, #16]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	899b      	ldrh	r3, [r3, #12]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80026fc:	e007      	b.n	800270e <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	899b      	ldrh	r3, [r3, #12]
 8002702:	b29b      	uxth	r3, r3
 8002704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002708:	b29a      	uxth	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	819a      	strh	r2, [r3, #12]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	b2db      	uxtb	r3, r3
 8002744:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800274e:	2201      	movs	r2, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d103      	bne.n	8002766 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	330c      	adds	r3, #12
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e009      	b.n	800277a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d103      	bne.n	8002774 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3310      	adds	r3, #16
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e002      	b.n	800277a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3314      	adds	r3, #20
 8002778:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800277a:	787b      	ldrb	r3, [r7, #1]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800278c:	e006      	b.n	800279c <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	6819      	ldr	r1, [r3, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	43da      	mvns	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	400a      	ands	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]
 80027b2:	4613      	mov	r3, r2
 80027b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 80027b6:	787b      	ldrb	r3, [r7, #1]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8a9b      	ldrh	r3, [r3, #20]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 80027cc:	e009      	b.n	80027e2 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8a9b      	ldrh	r3, [r3, #20]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4013      	ands	r3, r2
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	829a      	strh	r2, [r3, #20]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	889b      	ldrh	r3, [r3, #4]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fe:	b29b      	uxth	r3, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800280a:	b480      	push	{r7}
 800280c:	b087      	sub	sp, #28
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	b2db      	uxtb	r3, r3
 800282e:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8002838:	2201      	movs	r2, #1
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d107      	bne.n	8002858 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	899b      	ldrh	r3, [r3, #12]
 800284c:	b29b      	uxth	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	4013      	ands	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	e011      	b.n	800287c <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d107      	bne.n	800286e <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8a1b      	ldrh	r3, [r3, #16]
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4013      	ands	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e006      	b.n	800287c <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8a9b      	ldrh	r3, [r3, #20]
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800287c:	887b      	ldrh	r3, [r7, #2]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002884:	2201      	movs	r2, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <USART_GetITStatus+0xa4>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80028a8:	2301      	movs	r3, #1
 80028aa:	74fb      	strb	r3, [r7, #19]
 80028ac:	e001      	b.n	80028b2 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80028ca:	2300      	movs	r3, #0
 80028cc:	81fb      	strh	r3, [r7, #14]
 80028ce:	2300      	movs	r3, #0
 80028d0:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80028d8:	89fb      	ldrh	r3, [r7, #14]
 80028da:	2201      	movs	r2, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80028e2:	89bb      	ldrh	r3, [r7, #12]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	801a      	strh	r2, [r3, #0]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
	...

080028f8 <TickHandler>:
#define SYS_TICK_RATE_HZ 1000
static volatile uint32_t sys_seconds_cnt;
static volatile uint16_t sys_millisec_cnt;

inline void TickHandler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
    uint32_t millisec_increment = 1000 / SYS_TICK_RATE_HZ;
 80028fe:	2301      	movs	r3, #1
 8002900:	607b      	str	r3, [r7, #4]

    sys_millisec_cnt += millisec_increment;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	b29a      	uxth	r2, r3
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <TickHandler+0x4c>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	4413      	add	r3, r2
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <TickHandler+0x4c>)
 8002912:	801a      	strh	r2, [r3, #0]
    if (sys_millisec_cnt >= 1000)
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <TickHandler+0x4c>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291e:	d30c      	bcc.n	800293a <TickHandler+0x42>
    {
        sys_millisec_cnt -= 1000;
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <TickHandler+0x4c>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800292a:	b29a      	uxth	r2, r3
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <TickHandler+0x4c>)
 800292e:	801a      	strh	r2, [r3, #0]
        sys_seconds_cnt++;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <TickHandler+0x50>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <TickHandler+0x50>)
 8002938:	6013      	str	r3, [r2, #0]
    }
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	20000694 	.word	0x20000694
 8002948:	20000690 	.word	0x20000690

0800294c <timer_creat>:
timer_id timer_creat(void (*pFunction)(void *para),
                     const unsigned int delay,
                     const unsigned int period,
                     bool run,
                     void *para)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	70fb      	strb	r3, [r7, #3]
    timer_id index = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]

    while ((timer_list[index].pfun != NULL) && (index < OS_TIMER_MAX))
 800295e:	e005      	b.n	800296c <timer_creat+0x20>
    {
        index++;
 8002960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	75fb      	strb	r3, [r7, #23]
    while ((timer_list[index].pfun != NULL) && (index < OS_TIMER_MAX))
 800296c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002970:	492d      	ldr	r1, [pc, #180]	; (8002a28 <timer_creat+0xdc>)
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <timer_creat+0x3e>
 8002982:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002986:	2b1f      	cmp	r3, #31
 8002988:	ddea      	ble.n	8002960 <timer_creat+0x14>
    }

    if (index < OS_TIMER_MAX)
 800298a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800298e:	2b1f      	cmp	r3, #31
 8002990:	dc41      	bgt.n	8002a16 <timer_creat+0xca>
    {
        // printf("time index %d\r\n",index);
        timer_list[index].pfun = pFunction;
 8002992:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002996:	4924      	ldr	r1, [pc, #144]	; (8002a28 <timer_creat+0xdc>)
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	601a      	str	r2, [r3, #0]
        timer_list[index].delay = delay;
 80029a6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80029aa:	491f      	ldr	r1, [pc, #124]	; (8002a28 <timer_creat+0xdc>)
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	3304      	adds	r3, #4
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	601a      	str	r2, [r3, #0]
        timer_list[index].delay_temp = delay;
 80029bc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80029c0:	4919      	ldr	r1, [pc, #100]	; (8002a28 <timer_creat+0xdc>)
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	3308      	adds	r3, #8
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	601a      	str	r2, [r3, #0]
        timer_list[index].period = period;
 80029d2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80029d6:	4914      	ldr	r1, [pc, #80]	; (8002a28 <timer_creat+0xdc>)
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	330c      	adds	r3, #12
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	601a      	str	r2, [r3, #0]
        timer_list[index].run = run;
 80029e8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80029ec:	490e      	ldr	r1, [pc, #56]	; (8002a28 <timer_creat+0xdc>)
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	3310      	adds	r3, #16
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	701a      	strb	r2, [r3, #0]
        timer_list[index].para = para;
 80029fe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002a02:	4909      	ldr	r1, [pc, #36]	; (8002a28 <timer_creat+0xdc>)
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3314      	adds	r3, #20
 8002a10:	6a3a      	ldr	r2, [r7, #32]
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e001      	b.n	8002a1a <timer_creat+0xce>
    }
    else
    {
        index = -1;
 8002a16:	23ff      	movs	r3, #255	; 0xff
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    return index;
 8002a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	200006bc 	.word	0x200006bc

08002a2c <timer_delete>:

bool timer_delete(const timer_id index)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
    if (index >= OS_TIMER_MAX)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	2b1f      	cmp	r3, #31
 8002a3c:	dd01      	ble.n	8002a42 <timer_delete+0x16>
        return false;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e043      	b.n	8002aca <timer_delete+0x9e>

    if (timer_list[index].pfun == NULL)
 8002a42:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002a46:	4923      	ldr	r1, [pc, #140]	; (8002ad4 <timer_delete+0xa8>)
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <timer_delete+0x30>
    {
        return false;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e036      	b.n	8002aca <timer_delete+0x9e>
    }
    timer_list[index].pfun = NULL;
 8002a5c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002a60:	491c      	ldr	r1, [pc, #112]	; (8002ad4 <timer_delete+0xa8>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
    timer_list[index].delay = 0;
 8002a70:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002a74:	4917      	ldr	r1, [pc, #92]	; (8002ad4 <timer_delete+0xa8>)
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3304      	adds	r3, #4
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
    timer_list[index].period = 0;
 8002a86:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002a8a:	4912      	ldr	r1, [pc, #72]	; (8002ad4 <timer_delete+0xa8>)
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	330c      	adds	r3, #12
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
    timer_list[index].run = false;
 8002a9c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <timer_delete+0xa8>)
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	3310      	adds	r3, #16
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
    timer_list[index].para = NULL;
 8002ab2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002ab6:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <timer_delete+0xa8>)
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
    return true;
 8002ac8:	2301      	movs	r3, #1
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	200006bc 	.word	0x200006bc

08002ad8 <timer_sched>:
 * @description: period : 0 一直重复执行， n(>0)  重复执行n次
 * @param {type} 
 * @return {type} 
 */
inline void timer_sched(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
    uint8_t index;

    for (index = 0; index < OS_TIMER_MAX; index++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	71fb      	strb	r3, [r7, #7]
 8002ae2:	e091      	b.n	8002c08 <timer_sched+0x130>
    {
        if (timer_list[index].delay == 0)
 8002ae4:	79fa      	ldrb	r2, [r7, #7]
 8002ae6:	494c      	ldr	r1, [pc, #304]	; (8002c18 <timer_sched+0x140>)
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	3304      	adds	r3, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d171      	bne.n	8002bde <timer_sched+0x106>
        {
            if (timer_list[index].run)
 8002afa:	79fa      	ldrb	r2, [r7, #7]
 8002afc:	4946      	ldr	r1, [pc, #280]	; (8002c18 <timer_sched+0x140>)
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3310      	adds	r3, #16
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d078      	beq.n	8002c02 <timer_sched+0x12a>
            {
                (*timer_list[index].pfun)(timer_list[index].para);
 8002b10:	79fa      	ldrb	r2, [r7, #7]
 8002b12:	4941      	ldr	r1, [pc, #260]	; (8002c18 <timer_sched+0x140>)
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	79fa      	ldrb	r2, [r7, #7]
 8002b22:	483d      	ldr	r0, [pc, #244]	; (8002c18 <timer_sched+0x140>)
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4403      	add	r3, r0
 8002b2e:	3314      	adds	r3, #20
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	4788      	blx	r1

                if (timer_list[index].period == 0)
 8002b36:	79fa      	ldrb	r2, [r7, #7]
 8002b38:	4937      	ldr	r1, [pc, #220]	; (8002c18 <timer_sched+0x140>)
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	330c      	adds	r3, #12
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d112      	bne.n	8002b72 <timer_sched+0x9a>
                {
                    timer_list[index].delay = timer_list[index].delay_temp;
 8002b4c:	79f9      	ldrb	r1, [r7, #7]
 8002b4e:	79fa      	ldrb	r2, [r7, #7]
 8002b50:	4831      	ldr	r0, [pc, #196]	; (8002c18 <timer_sched+0x140>)
 8002b52:	460b      	mov	r3, r1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	440b      	add	r3, r1
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4403      	add	r3, r0
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	482d      	ldr	r0, [pc, #180]	; (8002c18 <timer_sched+0x140>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4403      	add	r3, r0
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	6019      	str	r1, [r3, #0]
 8002b70:	e047      	b.n	8002c02 <timer_sched+0x12a>
                }
                else if (timer_list[index].period == 1)
 8002b72:	79fa      	ldrb	r2, [r7, #7]
 8002b74:	4928      	ldr	r1, [pc, #160]	; (8002c18 <timer_sched+0x140>)
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	330c      	adds	r3, #12
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <timer_sched+0xbc>
                {
                    timer_delete(index);
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff4d 	bl	8002a2c <timer_delete>
 8002b92:	e036      	b.n	8002c02 <timer_sched+0x12a>
                }
                else
                {
                    timer_list[index].delay = timer_list[index].delay_temp;
 8002b94:	79f9      	ldrb	r1, [r7, #7]
 8002b96:	79fa      	ldrb	r2, [r7, #7]
 8002b98:	481f      	ldr	r0, [pc, #124]	; (8002c18 <timer_sched+0x140>)
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	440b      	add	r3, r1
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4403      	add	r3, r0
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	481b      	ldr	r0, [pc, #108]	; (8002c18 <timer_sched+0x140>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4403      	add	r3, r0
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	6019      	str	r1, [r3, #0]
                    --timer_list[index].period;
 8002bb8:	79fa      	ldrb	r2, [r7, #7]
 8002bba:	4917      	ldr	r1, [pc, #92]	; (8002c18 <timer_sched+0x140>)
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1e59      	subs	r1, r3, #1
 8002bcc:	4812      	ldr	r0, [pc, #72]	; (8002c18 <timer_sched+0x140>)
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4403      	add	r3, r0
 8002bd8:	330c      	adds	r3, #12
 8002bda:	6019      	str	r1, [r3, #0]
 8002bdc:	e011      	b.n	8002c02 <timer_sched+0x12a>
                }
            }
        }
        else
        {
            --timer_list[index].delay;
 8002bde:	79fa      	ldrb	r2, [r7, #7]
 8002be0:	490d      	ldr	r1, [pc, #52]	; (8002c18 <timer_sched+0x140>)
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	3304      	adds	r3, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	1e59      	subs	r1, r3, #1
 8002bf2:	4809      	ldr	r0, [pc, #36]	; (8002c18 <timer_sched+0x140>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4403      	add	r3, r0
 8002bfe:	3304      	adds	r3, #4
 8002c00:	6019      	str	r1, [r3, #0]
    for (index = 0; index < OS_TIMER_MAX; index++)
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	3301      	adds	r3, #1
 8002c06:	71fb      	strb	r3, [r7, #7]
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	2b1f      	cmp	r3, #31
 8002c0c:	f67f af6a 	bls.w	8002ae4 <timer_sched+0xc>
        }
    }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200006bc 	.word	0x200006bc

08002c1c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af00      	add	r7, sp, #0
  uint16_t size = -1;
 8002c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c26:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint8_t buf_rc[40];

  hw_board_init();
 8002c28:	f7fd fbe0 	bl	80003ec <hw_board_init>
  hw_uart_init();
 8002c2c:	f7fe f9d4 	bl	8000fd8 <hw_uart_init>
  hw_uart_485_init();
 8002c30:	f7fe fa34 	bl	800109c <hw_uart_485_init>
  hw_can_init();
 8002c34:	f7fd fc9a 	bl	800056c <hw_can_init>
  hw_gpio_init();
 8002c38:	f7fd fcd6 	bl	80005e8 <hw_gpio_init>
  hw_led_init();
 8002c3c:	f7fd fdd8 	bl	80007f0 <hw_led_init>

  /* TODO - Add your application code here */
  led_test();
 8002c40:	f7fd fdf6 	bl	8000830 <led_test>
  /* Infinite loop */
  while (1)
  {
    if (uart_getFlagStatus(USART1, UART_FLAG_RC))
 8002c44:	2104      	movs	r1, #4
 8002c46:	480e      	ldr	r0, [pc, #56]	; (8002c80 <main+0x64>)
 8002c48:	f7fe f8e6 	bl	8000e18 <uart_getFlagStatus>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f8      	beq.n	8002c44 <main+0x28>
    {
      size = uart_read(USART1, buf_rc, 2);
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	2202      	movs	r2, #2
 8002c56:	4619      	mov	r1, r3
 8002c58:	4809      	ldr	r0, [pc, #36]	; (8002c80 <main+0x64>)
 8002c5a:	f7fe f925 	bl	8000ea8 <uart_read>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	85fb      	strh	r3, [r7, #46]	; 0x2e
      uart_write(USART1, buf_rc, size);
 8002c62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4805      	ldr	r0, [pc, #20]	; (8002c80 <main+0x64>)
 8002c6c:	f7fe f968 	bl	8000f40 <uart_write>
      memset(buf_rc, 0, sizeof(buf_rc));
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	2228      	movs	r2, #40	; 0x28
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f938 	bl	8002eec <memset>
    if (uart_getFlagStatus(USART1, UART_FLAG_RC))
 8002c7c:	e7e2      	b.n	8002c44 <main+0x28>
 8002c7e:	bf00      	nop
 8002c80:	40013800 	.word	0x40013800

08002c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c8a:	e003      	b.n	8002c94 <LoopCopyDataInit>

08002c8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002c8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c92:	3104      	adds	r1, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c94:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002c98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c9c:	d3f6      	bcc.n	8002c8c <CopyDataInit>
	ldr	r2, =_sbss
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002ca0:	e002      	b.n	8002ca8 <LoopFillZerobss>

08002ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ca2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ca4:	f842 3b04 	str.w	r3, [r2], #4

08002ca8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002caa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002cac:	d3f9      	bcc.n	8002ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cae:	f000 f83f 	bl	8002d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cb2:	f000 f8f7 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cb6:	f7ff ffb1 	bl	8002c1c <main>
	bx	lr
 8002cba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cbc:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002cc0:	0800301c 	.word	0x0800301c
	ldr	r0, =_sdata
 8002cc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002cc8:	20000674 	.word	0x20000674
	ldr	r2, =_sbss
 8002ccc:	20000674 	.word	0x20000674
	ldr	r3, = _ebss
 8002cd0:	200009c8 	.word	0x200009c8

08002cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cd4:	e7fe      	b.n	8002cd4 <ADC1_2_IRQHandler>

08002cd6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <HardFault_Handler+0x4>

08002ce8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <MemManage_Handler+0x4>

08002cee <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <BusFault_Handler+0x4>

08002cf4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler+0x4>

08002cfa <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	af00      	add	r7, sp, #0
  TickHandler();
 8002d22:	f7ff fde9 	bl	80028f8 <TickHandler>
  timer_sched();
 8002d26:	f7ff fed7 	bl	8002ad8 <timer_sched>
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <SystemInit+0x5c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <SystemInit+0x5c>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002d40:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <SystemInit+0x5c>)
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4911      	ldr	r1, [pc, #68]	; (8002d8c <SystemInit+0x5c>)
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <SystemInit+0x60>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <SystemInit+0x5c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <SystemInit+0x5c>)
 8002d52:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <SystemInit+0x5c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <SystemInit+0x5c>)
 8002d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d66:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <SystemInit+0x5c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <SystemInit+0x5c>)
 8002d6e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002d72:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <SystemInit+0x5c>)
 8002d76:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002d7a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002d7c:	f000 f80c 	bl	8002d98 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <SystemInit+0x64>)
 8002d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d86:	609a      	str	r2, [r3, #8]
#endif 
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	f8ff0000 	.word	0xf8ff0000
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002d9c:	f000 f802 	bl	8002da4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	2300      	movs	r3, #0
 8002db0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002db2:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a39      	ldr	r2, [pc, #228]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002dbe:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <SetSysClockTo72+0x38>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002dda:	d1f0      	bne.n	8002dbe <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002ddc:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002de8:	2301      	movs	r3, #1
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	e001      	b.n	8002df2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d14b      	bne.n	8002e90 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <SetSysClockTo72+0xfc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <SetSysClockTo72+0xfc>)
 8002dfe:	f043 0310 	orr.w	r3, r3, #16
 8002e02:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002e04:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <SetSysClockTo72+0xfc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <SetSysClockTo72+0xfc>)
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002e10:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <SetSysClockTo72+0xfc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <SetSysClockTo72+0xfc>)
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e26:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e36:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e3e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002e42:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e4a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002e4e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002e5c:	bf00      	nop
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f9      	beq.n	8002e5e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e70:	f023 0303 	bic.w	r3, r3, #3
 8002e74:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002e82:	bf00      	nop
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <SetSysClockTo72+0xf8>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d1f9      	bne.n	8002e84 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40022000 	.word	0x40022000

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	4e0c      	ldr	r6, [pc, #48]	; (8002edc <__libc_init_array+0x38>)
 8002eaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eac:	1ba4      	subs	r4, r4, r6
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	42a5      	cmp	r5, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	f000 f89e 	bl	8002ff4 <_init>
 8002eb8:	2500      	movs	r5, #0
 8002eba:	4e0a      	ldr	r6, [pc, #40]	; (8002ee4 <__libc_init_array+0x40>)
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	; (8002ee8 <__libc_init_array+0x44>)
 8002ebe:	1ba4      	subs	r4, r4, r6
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	42a5      	cmp	r5, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ecc:	4798      	blx	r3
 8002ece:	3501      	adds	r5, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed6:	4798      	blx	r3
 8002ed8:	3501      	adds	r5, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08003010 	.word	0x08003010
 8002ee0:	08003010 	.word	0x08003010
 8002ee4:	08003010 	.word	0x08003010
 8002ee8:	08003018 	.word	0x08003018

08002eec <memset>:
 8002eec:	4603      	mov	r3, r0
 8002eee:	4402      	add	r2, r0
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <memset+0xa>
 8002ef4:	4770      	bx	lr
 8002ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8002efa:	e7f9      	b.n	8002ef0 <memset+0x4>

08002efc <register_fini>:
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <register_fini+0xc>)
 8002efe:	b113      	cbz	r3, 8002f06 <register_fini+0xa>
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <register_fini+0x10>)
 8002f02:	f000 b805 	b.w	8002f10 <atexit>
 8002f06:	4770      	bx	lr
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	08002f1d 	.word	0x08002f1d

08002f10 <atexit>:
 8002f10:	2300      	movs	r3, #0
 8002f12:	4601      	mov	r1, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 b816 	b.w	8002f48 <__register_exitproc>

08002f1c <__libc_fini_array>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4d07      	ldr	r5, [pc, #28]	; (8002f3c <__libc_fini_array+0x20>)
 8002f20:	4c07      	ldr	r4, [pc, #28]	; (8002f40 <__libc_fini_array+0x24>)
 8002f22:	1b64      	subs	r4, r4, r5
 8002f24:	10a4      	asrs	r4, r4, #2
 8002f26:	b91c      	cbnz	r4, 8002f30 <__libc_fini_array+0x14>
 8002f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f2c:	f000 b868 	b.w	8003000 <_fini>
 8002f30:	3c01      	subs	r4, #1
 8002f32:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002f36:	4798      	blx	r3
 8002f38:	e7f5      	b.n	8002f26 <__libc_fini_array+0xa>
 8002f3a:	bf00      	nop
 8002f3c:	08003018 	.word	0x08003018
 8002f40:	0800301c 	.word	0x0800301c

08002f44 <__retarget_lock_acquire_recursive>:
 8002f44:	4770      	bx	lr

08002f46 <__retarget_lock_release_recursive>:
 8002f46:	4770      	bx	lr

08002f48 <__register_exitproc>:
 8002f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f4c:	4c26      	ldr	r4, [pc, #152]	; (8002fe8 <__register_exitproc+0xa0>)
 8002f4e:	4606      	mov	r6, r0
 8002f50:	6820      	ldr	r0, [r4, #0]
 8002f52:	4698      	mov	r8, r3
 8002f54:	460f      	mov	r7, r1
 8002f56:	4691      	mov	r9, r2
 8002f58:	f7ff fff4 	bl	8002f44 <__retarget_lock_acquire_recursive>
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <__register_exitproc+0xa4>)
 8002f5e:	681d      	ldr	r5, [r3, #0]
 8002f60:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8002f64:	b918      	cbnz	r0, 8002f6e <__register_exitproc+0x26>
 8002f66:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8002f6a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8002f6e:	6843      	ldr	r3, [r0, #4]
 8002f70:	2b1f      	cmp	r3, #31
 8002f72:	dd19      	ble.n	8002fa8 <__register_exitproc+0x60>
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <__register_exitproc+0xa8>)
 8002f76:	b933      	cbnz	r3, 8002f86 <__register_exitproc+0x3e>
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	f7ff ffe4 	bl	8002f46 <__retarget_lock_release_recursive>
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f86:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f8a:	f3af 8000 	nop.w
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d0f2      	beq.n	8002f78 <__register_exitproc+0x30>
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8002f98:	6042      	str	r2, [r0, #4]
 8002f9a:	6003      	str	r3, [r0, #0]
 8002f9c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8002fa0:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8002fa4:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8002fa8:	6843      	ldr	r3, [r0, #4]
 8002faa:	b19e      	cbz	r6, 8002fd4 <__register_exitproc+0x8c>
 8002fac:	2201      	movs	r2, #1
 8002fae:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8002fb2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8002fb6:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	2e02      	cmp	r6, #2
 8002fc0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8002fc4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8002fc8:	bf02      	ittt	eq
 8002fca:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8002fce:	430a      	orreq	r2, r1
 8002fd0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	6042      	str	r2, [r0, #4]
 8002fda:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8002fde:	6820      	ldr	r0, [r4, #0]
 8002fe0:	f7ff ffb1 	bl	8002f46 <__retarget_lock_release_recursive>
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e7cc      	b.n	8002f82 <__register_exitproc+0x3a>
 8002fe8:	20000670 	.word	0x20000670
 8002fec:	0800300c 	.word	0x0800300c
 8002ff0:	00000000 	.word	0x00000000

08002ff4 <_init>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	bf00      	nop
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr

08003000 <_fini>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr
