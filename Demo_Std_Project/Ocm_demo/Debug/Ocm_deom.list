
Ocm_deom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08001ad8  08001ad8  00011ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08001adc  08001adc  00011adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ae4  08001ae4  00011ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000063c  20000000  08001ae8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000048  2000063c  08002124  0002063c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000684  08002124  00020684  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004d84  00000000  00000000  00020665  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000120c  00000000  00000000  000253e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000620  00000000  00000000  000265f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  00026c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000f26a  00000000  00000000  00027180  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000058d4  00000000  00000000  000363ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00053ab1  00000000  00000000  0003bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0008f76f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001994  00000000  00000000  0008f7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00091180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000063c 	.word	0x2000063c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ac0 	.word	0x08001ac0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000640 	.word	0x20000640
 8000148:	08001ac0 	.word	0x08001ac0

0800014c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015c:	2b00      	cmp	r3, #0
 800015e:	da0b      	bge.n	8000178 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	b2da      	uxtb	r2, r3
 8000164:	490c      	ldr	r1, [pc, #48]	; (8000198 <NVIC_SetPriority+0x4c>)
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f003 030f 	and.w	r3, r3, #15
 800016c:	3b04      	subs	r3, #4
 800016e:	0112      	lsls	r2, r2, #4
 8000170:	b2d2      	uxtb	r2, r2
 8000172:	440b      	add	r3, r1
 8000174:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000176:	e009      	b.n	800018c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	b2da      	uxtb	r2, r3
 800017c:	4907      	ldr	r1, [pc, #28]	; (800019c <NVIC_SetPriority+0x50>)
 800017e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000182:	0112      	lsls	r2, r2, #4
 8000184:	b2d2      	uxtb	r2, r2
 8000186:	440b      	add	r3, r1
 8000188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000ed00 	.word	0xe000ed00
 800019c:	e000e100 	.word	0xe000e100

080001a0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001ae:	d301      	bcc.n	80001b4 <SysTick_Config+0x14>
 80001b0:	2301      	movs	r3, #1
 80001b2:	e011      	b.n	80001d8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80001ba:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <SysTick_Config+0x40>)
 80001bc:	3b01      	subs	r3, #1
 80001be:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80001c0:	210f      	movs	r1, #15
 80001c2:	f04f 30ff 	mov.w	r0, #4294967295
 80001c6:	f7ff ffc1 	bl	800014c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ca:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SysTick_Config+0x40>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <SysTick_Config+0x40>)
 80001d2:	2207      	movs	r2, #7
 80001d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80001d6:	2300      	movs	r3, #0
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	e000e010 	.word	0xe000e010

080001e4 <Config_Data_ReInit>:

union STM32_ID_12Byte STM32_ID;
Config_Data_Str Config_Data;

void Config_Data_ReInit(Config_Data_Str *config)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *temp_ptr = (u8 *)config;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60bb      	str	r3, [r7, #8]
    //清零所有参数
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80001f0:	2300      	movs	r3, #0
 80001f2:	81fb      	strh	r3, [r7, #14]
 80001f4:	e007      	b.n	8000206 <Config_Data_ReInit+0x22>
    {
        temp_ptr[i] = 0;
 80001f6:	89fb      	ldrh	r3, [r7, #14]
 80001f8:	68ba      	ldr	r2, [r7, #8]
 80001fa:	4413      	add	r3, r2
 80001fc:	2200      	movs	r2, #0
 80001fe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000200:	89fb      	ldrh	r3, [r7, #14]
 8000202:	3301      	adds	r3, #1
 8000204:	81fb      	strh	r3, [r7, #14]
 8000206:	89fb      	ldrh	r3, [r7, #14]
 8000208:	2b15      	cmp	r3, #21
 800020a:	d9f4      	bls.n	80001f6 <Config_Data_ReInit+0x12>
    }
    //设置默认值
    config->save_data_flag = 1;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2201      	movs	r2, #1
 8000210:	751a      	strb	r2, [r3, #20]

    // Dev_Config_Reinit(&(config->dev_con));
    // Dev_Config_Reinit((config->dev_con));
};
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr

0800021c <Write_Config_To_Flash>:

void Write_Config_To_Flash(Config_Data_Str *config)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *data_ptr = (u8 *)config;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	60fb      	str	r3, [r7, #12]
    u32 flash_addr = CONFIG_DATA_FLASH_ADDR;
 8000228:	4b22      	ldr	r3, [pc, #136]	; (80002b4 <Write_Config_To_Flash+0x98>)
 800022a:	613b      	str	r3, [r7, #16]
    FLASH_Unlock();                                                                            /* 每次擦除Flash中数据时得先解锁 */
 800022c:	f000 fcb4 	bl	8000b98 <FLASH_Unlock>
    FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR); //清除标记
 8000230:	2035      	movs	r0, #53	; 0x35
 8000232:	f000 fd23 	bl	8000c7c <FLASH_ClearFlag>

    // 页擦除
    for (i = 0; i < (sizeof(Config_Data_Str) / FLASH_Page_SIZE + 1); i++)
 8000236:	2300      	movs	r3, #0
 8000238:	82fb      	strh	r3, [r7, #22]
 800023a:	e00e      	b.n	800025a <Write_Config_To_Flash+0x3e>
        while (FLASH_COMPLETE != FLASH_ErasePage(CONFIG_DATA_FLASH_ADDR + i * FLASH_Page_SIZE))
 800023c:	bf00      	nop
 800023e:	8afb      	ldrh	r3, [r7, #22]
 8000240:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000244:	333f      	adds	r3, #63	; 0x3f
 8000246:	029b      	lsls	r3, r3, #10
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fcb7 	bl	8000bbc <FLASH_ErasePage>
 800024e:	4603      	mov	r3, r0
 8000250:	2b04      	cmp	r3, #4
 8000252:	d1f4      	bne.n	800023e <Write_Config_To_Flash+0x22>
    for (i = 0; i < (sizeof(Config_Data_Str) / FLASH_Page_SIZE + 1); i++)
 8000254:	8afb      	ldrh	r3, [r7, #22]
 8000256:	3301      	adds	r3, #1
 8000258:	82fb      	strh	r3, [r7, #22]
 800025a:	8afb      	ldrh	r3, [r7, #22]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0ed      	beq.n	800023c <Write_Config_To_Flash+0x20>
            ;

    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000260:	2300      	movs	r3, #0
 8000262:	82fb      	strh	r3, [r7, #22]
 8000264:	e01f      	b.n	80002a6 <Write_Config_To_Flash+0x8a>
    {
        while (FLASH_COMPLETE != FLASH_ProgramHalfWord(flash_addr, (data_ptr[i] + data_ptr[i + 1] * 256)))
 8000266:	bf00      	nop
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	4413      	add	r3, r2
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b29a      	uxth	r2, r3
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	3301      	adds	r3, #1
 8000276:	68f9      	ldr	r1, [r7, #12]
 8000278:	440b      	add	r3, r1
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	b29b      	uxth	r3, r3
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	b29b      	uxth	r3, r3
 8000282:	4413      	add	r3, r2
 8000284:	b29b      	uxth	r3, r3
 8000286:	4619      	mov	r1, r3
 8000288:	6938      	ldr	r0, [r7, #16]
 800028a:	f000 fcc9 	bl	8000c20 <FLASH_ProgramHalfWord>
 800028e:	4603      	mov	r3, r0
 8000290:	2b04      	cmp	r3, #4
 8000292:	d1e9      	bne.n	8000268 <Write_Config_To_Flash+0x4c>
            ;
        i++;
 8000294:	8afb      	ldrh	r3, [r7, #22]
 8000296:	3301      	adds	r3, #1
 8000298:	82fb      	strh	r3, [r7, #22]
        flash_addr += 2;
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	3302      	adds	r3, #2
 800029e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80002a0:	8afb      	ldrh	r3, [r7, #22]
 80002a2:	3301      	adds	r3, #1
 80002a4:	82fb      	strh	r3, [r7, #22]
 80002a6:	8afb      	ldrh	r3, [r7, #22]
 80002a8:	2b15      	cmp	r3, #21
 80002aa:	d9dc      	bls.n	8000266 <Write_Config_To_Flash+0x4a>
    }
}
 80002ac:	bf00      	nop
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	0800fc00 	.word	0x0800fc00

080002b8 <Read_Config_Form_Flash>:

void Read_Config_Form_Flash(Config_Data_Str *config)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *data_ptr = (u8 *)config;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	60fb      	str	r3, [r7, #12]
    u16 tmp_read;
    u32 flash_addr = CONFIG_DATA_FLASH_ADDR;
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <Read_Config_Form_Flash+0x74>)
 80002c6:	613b      	str	r3, [r7, #16]

    // 读取指定地址的数据
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80002c8:	2300      	movs	r3, #0
 80002ca:	82fb      	strh	r3, [r7, #22]
 80002cc:	e01c      	b.n	8000308 <Read_Config_Form_Flash+0x50>
    {
        tmp_read = *(vu16 *)(flash_addr);
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	817b      	strh	r3, [r7, #10]
        data_ptr[i] = tmp_read % 256;
 80002d4:	8afb      	ldrh	r3, [r7, #22]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	4413      	add	r3, r2
 80002da:	897a      	ldrh	r2, [r7, #10]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	701a      	strb	r2, [r3, #0]
        i++;
 80002e0:	8afb      	ldrh	r3, [r7, #22]
 80002e2:	3301      	adds	r3, #1
 80002e4:	82fb      	strh	r3, [r7, #22]
        if (i < sizeof(Config_Data_Str))
 80002e6:	8afb      	ldrh	r3, [r7, #22]
 80002e8:	2b15      	cmp	r3, #21
 80002ea:	d807      	bhi.n	80002fc <Read_Config_Form_Flash+0x44>
            data_ptr[i] = tmp_read / 256;
 80002ec:	897b      	ldrh	r3, [r7, #10]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b299      	uxth	r1, r3
 80002f2:	8afb      	ldrh	r3, [r7, #22]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	4413      	add	r3, r2
 80002f8:	b2ca      	uxtb	r2, r1
 80002fa:	701a      	strb	r2, [r3, #0]

        flash_addr += 2;
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	3302      	adds	r3, #2
 8000300:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000302:	8afb      	ldrh	r3, [r7, #22]
 8000304:	3301      	adds	r3, #1
 8000306:	82fb      	strh	r3, [r7, #22]
 8000308:	8afb      	ldrh	r3, [r7, #22]
 800030a:	2b15      	cmp	r3, #21
 800030c:	d9df      	bls.n	80002ce <Read_Config_Form_Flash+0x16>
    }

    //判断是否为第一次启动
    if (config->save_data_flag != 1)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	7d1b      	ldrb	r3, [r3, #20]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d005      	beq.n	8000322 <Read_Config_Form_Flash+0x6a>
    {
        Config_Data_ReInit(config);    //重置所有参数
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f7ff ff64 	bl	80001e4 <Config_Data_ReInit>
        Write_Config_To_Flash(config); //回写参数到flash
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ff7d 	bl	800021c <Write_Config_To_Flash>
    }
}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	0800fc00 	.word	0x0800fc00

08000330 <Cpu_GetId>:

//读取ChipID
void Cpu_GetId(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
    STM32_ID.id_u32[0] = *(__IO u32 *)(0x1FFFF7E8); //产品唯一身份标识寄存器(96位)
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <Cpu_GetId+0x24>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <Cpu_GetId+0x28>)
 800033a:	6013      	str	r3, [r2, #0]
    STM32_ID.id_u32[1] = *(__IO u32 *)(0x1FFFF7EC);
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <Cpu_GetId+0x2c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <Cpu_GetId+0x28>)
 8000342:	6053      	str	r3, [r2, #4]
    STM32_ID.id_u32[2] = *(__IO u32 *)(0x1FFFF7F0);
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <Cpu_GetId+0x30>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a03      	ldr	r2, [pc, #12]	; (8000358 <Cpu_GetId+0x28>)
 800034a:	6093      	str	r3, [r2, #8]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	1ffff7e8 	.word	0x1ffff7e8
 8000358:	20000658 	.word	0x20000658
 800035c:	1ffff7ec 	.word	0x1ffff7ec
 8000360:	1ffff7f0 	.word	0x1ffff7f0

08000364 <RCC_Configuration>:

void RCC_Configuration(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
    ErrorStatus HSEStartUpStatus;

    RCC_DeInit();
 800036a:	f000 fd9d 	bl	8000ea8 <RCC_DeInit>
    RCC_HSEConfig(RCC_HSE_ON);
 800036e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000372:	f000 fdc7 	bl	8000f04 <RCC_HSEConfig>
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000376:	f000 fdf3 	bl	8000f60 <RCC_WaitForHSEStartUp>
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
    if (HSEStartUpStatus == SUCCESS)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d122      	bne.n	80003ca <RCC_Configuration+0x66>
    {
        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000384:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000388:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800038c:	f000 fe10 	bl	8000fb0 <RCC_PLLConfig>
        RCC_PLLCmd(ENABLE);
 8000390:	2001      	movs	r0, #1
 8000392:	f000 fe2b 	bl	8000fec <RCC_PLLCmd>
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY == RESET))
 8000396:	bf00      	nop
 8000398:	2000      	movs	r0, #0
 800039a:	f000 ffbf 	bl	800131c <RCC_GetFlagStatus>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f9      	bne.n	8000398 <RCC_Configuration+0x34>
        {
        }
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80003a4:	2002      	movs	r0, #2
 80003a6:	f000 fe31 	bl	800100c <RCC_SYSCLKConfig>

        RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 fe58 	bl	8001060 <RCC_HCLKConfig>
        RCC_PCLK1Config(RCC_HCLK_Div2);
 80003b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80003b4:	f000 fe70 	bl	8001098 <RCC_PCLK1Config>
        RCC_PCLK2Config(RCC_HCLK_Div1); //串口波特率的确定
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fe89 	bl	80010d0 <RCC_PCLK2Config>

        while (RCC_GetSYSCLKSource() != 0x08)
 80003be:	bf00      	nop
 80003c0:	f000 fe40 	bl	8001044 <RCC_GetSYSCLKSource>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1fa      	bne.n	80003c0 <RCC_Configuration+0x5c>
        {
        }
    }
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <NVIC_Configuration>:

static void NVIC_Configuration(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b082      	sub	sp, #8
 80003d6:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;
#ifdef VETB_TAB_RAM
    NVYC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
 80003d8:	2100      	movs	r1, #0
 80003da:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80003de:	f000 fa91 	bl	8000904 <NVIC_SetVectorTable>
#endif
    /* Configure one bit for preemption priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 80003e2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80003e6:	f000 fa19 	bl	800081c <NVIC_PriorityGroupConfig>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <hw_board_init>:

void hw_board_init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    RCC_Configuration();  // 初始化时钟
 80003f8:	f7ff ffb4 	bl	8000364 <RCC_Configuration>
    NVIC_Configuration(); // 初始化向量中断
 80003fc:	f7ff ffe9 	bl	80003d2 <NVIC_Configuration>

    //启动系统时钟信号，设置时间为1ms
    SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); //AHB=72M/8=9M
 8000400:	f06f 0004 	mvn.w	r0, #4
 8000404:	f000 fa94 	bl	8000930 <SysTick_CLKSourceConfig>
    SysTick_Config(SYSTICK_TICK);
 8000408:	f242 3028 	movw	r0, #9000	; 0x2328
 800040c:	f7ff fec8 	bl	80001a0 <SysTick_Config>

    Cpu_GetId();                          //网关物理地址
 8000410:	f7ff ff8e 	bl	8000330 <Cpu_GetId>
    Read_Config_Form_Flash(&Config_Data); //载入保存的25个Net_ID
 8000414:	4802      	ldr	r0, [pc, #8]	; (8000420 <hw_board_init+0x2c>)
 8000416:	f7ff ff4f 	bl	80002b8 <Read_Config_Form_Flash>
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000664 	.word	0x20000664

08000424 <RCC_Configuration>:
#define UART3_GPIO_TX GPIO_Pin_10
#define UART3_GPIO_RX GPIO_Pin_11
#define UART3_GPIO GPIOB

static void RCC_Configuration(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
    /* Enable UART GPIO clocks */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 8000428:	2101      	movs	r1, #1
 800042a:	2005      	movs	r0, #5
 800042c:	f000 ff3a 	bl	80012a4 <RCC_APB2PeriphClockCmd>
    /* Enable UART clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000430:	2101      	movs	r1, #1
 8000432:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000436:	f000 ff35 	bl	80012a4 <RCC_APB2PeriphClockCmd>

    /* Enable UART GPIO clocks */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 800043a:	2101      	movs	r1, #1
 800043c:	2005      	movs	r0, #5
 800043e:	f000 ff31 	bl	80012a4 <RCC_APB2PeriphClockCmd>
    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000442:	2101      	movs	r1, #1
 8000444:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000448:	f000 ff4a 	bl	80012e0 <RCC_APB1PeriphClockCmd>

    /* Enable UART GPIO clocks */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 800044c:	2101      	movs	r1, #1
 800044e:	2009      	movs	r0, #9
 8000450:	f000 ff28 	bl	80012a4 <RCC_APB2PeriphClockCmd>
    /* Enable UART clock */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000454:	2101      	movs	r1, #1
 8000456:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800045a:	f000 ff41 	bl	80012e0 <RCC_APB1PeriphClockCmd>
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <GPIO_Configuration>:

static void GPIO_Configuration(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800046a:	2303      	movs	r3, #3
 800046c:	71bb      	strb	r3, [r7, #6]

    /* Configure USART Rx/tx PIN */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800046e:	2304      	movs	r3, #4
 8000470:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = UART1_GPIO_RX;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(UART1_GPIO, &GPIO_InitStructure);
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	4619      	mov	r1, r3
 800047c:	481b      	ldr	r0, [pc, #108]	; (80004ec <GPIO_Configuration+0x88>)
 800047e:	f000 fc57 	bl	8000d30 <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000482:	2318      	movs	r3, #24
 8000484:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = UART1_GPIO_TX;
 8000486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800048a:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(UART1_GPIO, &GPIO_InitStructure);
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	4816      	ldr	r0, [pc, #88]	; (80004ec <GPIO_Configuration+0x88>)
 8000492:	f000 fc4d 	bl	8000d30 <GPIO_Init>

    /* Configure USART Rx/tx PIN */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000496:	2304      	movs	r3, #4
 8000498:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = UART2_GPIO_RX;
 800049a:	2308      	movs	r3, #8
 800049c:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(UART2_GPIO, &GPIO_InitStructure);
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4619      	mov	r1, r3
 80004a2:	4812      	ldr	r0, [pc, #72]	; (80004ec <GPIO_Configuration+0x88>)
 80004a4:	f000 fc44 	bl	8000d30 <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80004a8:	2318      	movs	r3, #24
 80004aa:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = UART2_GPIO_TX;
 80004ac:	2304      	movs	r3, #4
 80004ae:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(UART2_GPIO, &GPIO_InitStructure);
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4619      	mov	r1, r3
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <GPIO_Configuration+0x88>)
 80004b6:	f000 fc3b 	bl	8000d30 <GPIO_Init>

    /* Configure USART Rx/tx PIN */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80004ba:	2304      	movs	r3, #4
 80004bc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = UART3_GPIO_RX;
 80004be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004c2:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(UART3_GPIO, &GPIO_InitStructure);
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <GPIO_Configuration+0x8c>)
 80004ca:	f000 fc31 	bl	8000d30 <GPIO_Init>

    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80004ce:	2318      	movs	r3, #24
 80004d0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Pin = UART3_GPIO_TX;
 80004d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d6:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(UART3_GPIO, &GPIO_InitStructure);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <GPIO_Configuration+0x8c>)
 80004de:	f000 fc27 	bl	8000d30 <GPIO_Init>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40010800 	.word	0x40010800
 80004f0:	40010c00 	.word	0x40010c00

080004f4 <UART_Configuration>:

static void UART_Configuration(struct uart_device* uart, struct uart_configure *cfg)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  USART_InitTypeDef USART_InitStructure;

  USART_InitStructure.USART_BaudRate = cfg->baud_rate;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	60bb      	str	r3, [r7, #8]

  if (cfg->data_bits == DATA_BITS_8)
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	f003 030f 	and.w	r3, r3, #15
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b08      	cmp	r3, #8
 8000510:	d102      	bne.n	8000518 <UART_Configuration+0x24>
  {
      USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000512:	2300      	movs	r3, #0
 8000514:	81bb      	strh	r3, [r7, #12]
 8000516:	e009      	b.n	800052c <UART_Configuration+0x38>
  }
  else if (cfg->data_bits == DATA_BITS_9)
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	f003 030f 	and.w	r3, r3, #15
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b09      	cmp	r3, #9
 8000524:	d102      	bne.n	800052c <UART_Configuration+0x38>
  {
      USART_InitStructure.USART_WordLength = USART_WordLength_9b;
 8000526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052a:	81bb      	strh	r3, [r7, #12]
  }

  if (cfg->stop_bits == STOP_BITS_1)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	d102      	bne.n	8000540 <UART_Configuration+0x4c>
  {
      USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800053a:	2300      	movs	r3, #0
 800053c:	81fb      	strh	r3, [r7, #14]
 800053e:	e014      	b.n	800056a <UART_Configuration+0x76>
  }else if (cfg->stop_bits == STOP_BITS_1_5) {
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b10      	cmp	r3, #16
 800054c:	d103      	bne.n	8000556 <UART_Configuration+0x62>
    USART_InitStructure.USART_StopBits = USART_StopBits_1_5;
 800054e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000552:	81fb      	strh	r3, [r7, #14]
 8000554:	e009      	b.n	800056a <UART_Configuration+0x76>
  }
  else if (cfg->stop_bits == STOP_BITS_2)
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b20      	cmp	r3, #32
 8000562:	d102      	bne.n	800056a <UART_Configuration+0x76>
  {
      USART_InitStructure.USART_StopBits = USART_StopBits_2;
 8000564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000568:	81fb      	strh	r3, [r7, #14]
  }

  if (cfg->parity == PARITY_NONE)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d102      	bne.n	800057e <UART_Configuration+0x8a>
  {
      USART_InitStructure.USART_Parity = USART_Parity_No;
 8000578:	2300      	movs	r3, #0
 800057a:	823b      	strh	r3, [r7, #16]
 800057c:	e014      	b.n	80005a8 <UART_Configuration+0xb4>
  }
  else if (cfg->parity == PARITY_ODD)
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b40      	cmp	r3, #64	; 0x40
 800058a:	d103      	bne.n	8000594 <UART_Configuration+0xa0>
  {
      USART_InitStructure.USART_Parity = USART_Parity_Odd;
 800058c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000590:	823b      	strh	r3, [r7, #16]
 8000592:	e009      	b.n	80005a8 <UART_Configuration+0xb4>
  }
  else if (cfg->parity == PARITY_EVEN)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b80      	cmp	r3, #128	; 0x80
 80005a0:	d102      	bne.n	80005a8 <UART_Configuration+0xb4>
  {
      USART_InitStructure.USART_Parity = USART_Parity_Even;
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	823b      	strh	r3, [r7, #16]
  }
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80005a8:	2300      	movs	r3, #0
 80005aa:	82bb      	strh	r3, [r7, #20]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80005ac:	230c      	movs	r3, #12
 80005ae:	827b      	strh	r3, [r7, #18]
  USART_Init(uart->uartx, &USART_InitStructure);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f107 0208 	add.w	r2, r7, #8
 80005b8:	4611      	mov	r1, r2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fee8 	bl	8001390 <USART_Init>

  USART_DMACmd(uart->uartx, USART_DMAReq_Tx, ENABLE); //串口采用DMA发送
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2201      	movs	r2, #1
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 f801 	bl	80015d0 <USART_DMACmd>
  USART_ITConfig(uart->uartx, USART_IT_RXNE, ENABLE); //接收中断使能
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2201      	movs	r2, #1
 80005d4:	f240 5125 	movw	r1, #1317	; 0x525
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 ffb2 	bl	8001542 <USART_ITConfig>

  /* Enable USART */
  USART_Cmd(uart->uartx, ENABLE);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2101      	movs	r1, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff8d 	bl	8001504 <USART_Cmd>
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <UART_DMA_Tx_Config>:
#endif


#ifdef USE_USART_DMA_TX
static void UART_DMA_Tx_Config(struct uart_data* pdata)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b08e      	sub	sp, #56	; 0x38
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
  DMA_InitTypeDef DMA_InitStructure;
  struct uart_device *uart = pdata->uart_device;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34

  //启动DMA时钟
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8000600:	2101      	movs	r1, #1
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fe30 	bl	8001268 <RCC_AHBPeriphClockCmd>

  //通道配置
  DMA_DeInit(uart->dma_tx.tx_ch);
 8000608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f9ab 	bl	8000968 <DMA_DeInit>
  //外设地址
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(pdata->uart_device->uartx->DR);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3304      	adds	r3, #4
 800061a:	60bb      	str	r3, [r7, #8]
  //内存地址
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pdata->stream_tx;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3374      	adds	r3, #116	; 0x74
 8000620:	60fb      	str	r3, [r7, #12]
  //dma传输方向单向
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8000622:	2310      	movs	r3, #16
 8000624:	613b      	str	r3, [r7, #16]
  //设置DMA在传输时缓冲区的长度
  DMA_InitStructure.DMA_BufferSize = UART_DMA_RB_BUFSZ;
 8000626:	236c      	movs	r3, #108	; 0x6c
 8000628:	617b      	str	r3, [r7, #20]
  //设置DMA的外设递增模式，一个外设
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
  //设置DMA的内存递增模式
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	61fb      	str	r3, [r7, #28]
  //外设数据字长
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  //内存数据字长
  DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  //设置DMA的传输模式
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800063a:	2300      	movs	r3, #0
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  //设置DMA的优先级别
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800063e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  //设置DMA的2个memory中的变量互相访问
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30

  DMA_Init(uart->dma_tx.tx_ch, &DMA_InitStructure);
 8000648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fa44 	bl	8000ae0 <DMA_Init>
  DMA_ITConfig(uart->dma_tx.tx_ch, DMA_IT_TC, ENABLE);
 8000658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fa7b 	bl	8000b5c <DMA_ITConfig>
}
 8000666:	bf00      	nop
 8000668:	3738      	adds	r7, #56	; 0x38
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <NVIC_Configuration>:
#endif

static void NVIC_Configuration(struct uart_device *uart)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the USART1 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = uart->irq;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000688:	2301      	movs	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
    NVIC_Init(&NVIC_InitStructure);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f8d5 	bl	8000840 <NVIC_Init>
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <uart_getc>:

int16_t uart_getc(USART_TypeDef* uartx)
{
 800069e:	b480      	push	{r7}
 80006a0:	b085      	sub	sp, #20
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  int16_t ch = -1;
 80006a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006aa:	81fb      	strh	r3, [r7, #14]

  if(uartx->SR & USART_FLAG_RXNE){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f003 0320 	and.w	r3, r3, #32
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <uart_getc+0x2a>
      ch = uartx->DR & 0x01FF;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	889b      	ldrh	r3, [r3, #4]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006c6:	81fb      	strh	r3, [r7, #14]
  }
  return ch;
 80006c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <uart_isr>:


static void uart_isr(struct uart_data *puart)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b084      	sub	sp, #16
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  USART_TypeDef* uart = puart->uart_device->uartx;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	60fb      	str	r3, [r7, #12]
  if (USART_GetITStatus(uart, USART_IT_RXNE) != RESET)
 80006e6:	f240 5125 	movw	r1, #1317	; 0x525
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f000 ffbd 	bl	800166a <USART_GetITStatus>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d024      	beq.n	8000740 <uart_isr+0x6a>
  {
      /* 奇偶校验错误检测，无校验错误 */
      if (USART_GetFlagStatus(uart, USART_FLAG_PE) == RESET)
 80006f6:	2101      	movs	r1, #1
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f000 ff9b 	bl	8001634 <USART_GetFlagStatus>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d118      	bne.n	8000736 <uart_isr+0x60>
      {
//	  uart_read(uart);	// 钩子函数
	  puart->stream_rx[puart->rx_index++] = uart_getc(uart);
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f7ff ffca 	bl	800069e <uart_getc>
 800070a:	4603      	mov	r3, r0
 800070c:	4618      	mov	r0, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	b2d1      	uxtb	r1, r2
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	7191      	strb	r1, [r2, #6]
 800071a:	4619      	mov	r1, r3
 800071c:	b2c2      	uxtb	r2, r0
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	440b      	add	r3, r1
 8000722:	721a      	strb	r2, [r3, #8]

	  if(puart->rx_index == puart->recv_len)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	799a      	ldrb	r2, [r3, #6]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	79db      	ldrb	r3, [r3, #7]
 800072c:	429a      	cmp	r2, r3
 800072e:	d102      	bne.n	8000736 <uart_isr+0x60>
	    puart->rx_flag = true;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2201      	movs	r2, #1
 8000734:	711a      	strb	r2, [r3, #4]
      }
      /* clear interrupt */
      USART_ClearITPendingBit(uart, USART_IT_RXNE);
 8000736:	f240 5125 	movw	r1, #1317	; 0x525
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f000 ffef 	bl	800171e <USART_ClearITPendingBit>

  }
#endif

  /* 一帧数据发送完成后，并且TXE=1时即数据已经被转移到移位寄存器中， USART_CR1中的TCIE为1产生中断*/
  if (USART_GetFlagStatus(uart, USART_IT_TC) != RESET)
 8000740:	f240 6126 	movw	r1, #1574	; 0x626
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f000 ff75 	bl	8001634 <USART_GetFlagStatus>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00a      	beq.n	8000766 <uart_isr+0x90>
  {
      /* clear interrupt */

      USART_ITConfig(uart, USART_IT_TC, DISABLE);
 8000750:	2200      	movs	r2, #0
 8000752:	f240 6126 	movw	r1, #1574	; 0x626
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f000 fef3 	bl	8001542 <USART_ITConfig>
      USART_ClearITPendingBit(uart, USART_IT_TC);
 800075c:	f240 6126 	movw	r1, #1574	; 0x626
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f000 ffdc 	bl	800171e <USART_ClearITPendingBit>
  }

  /* 检测到过载错误，当RXNE仍是1时，当前被接收在移位寄存器中的数据，需要传送至RDR寄存器是，硬件将该位 置位 */
  if (USART_GetFlagStatus(uart, USART_FLAG_ORE) == SET)
 8000766:	2108      	movs	r1, #8
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f000 ff63 	bl	8001634 <USART_GetFlagStatus>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d102      	bne.n	800077a <uart_isr+0xa4>
  {
      USART_ReceiveData(uart);
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f000 ff4e 	bl	8001616 <USART_ReceiveData>
  }

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <USART1_IRQHandler>:
    .rx_index = 0,
    .recv_len = 2,
};

void USART1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  uart_isr(&duart1);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <USART1_IRQHandler+0x10>)
 800078a:	f7ff ffa4 	bl	80006d6 <uart_isr>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000001c 	.word	0x2000001c

08000798 <USART3_IRQHandler>:
    .recv_len = 2,
};


void USART3_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  uart_isr(&duart3);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <USART3_IRQHandler+0x10>)
 800079e:	f7ff ff9a 	bl	80006d6 <uart_isr>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000118 	.word	0x20000118

080007ac <hw_uart_init>:

  return ret;
}

void hw_uart_init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  struct uart_device *uart;

  RCC_Configuration();
 80007b2:	f7ff fe37 	bl	8000424 <RCC_Configuration>
  GPIO_Configuration();
 80007b6:	f7ff fe55 	bl	8000464 <GPIO_Configuration>

#ifdef USING_UART1
  uart = &uart1;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <hw_uart_init+0x58>)
 80007bc:	607b      	str	r3, [r7, #4]
  config1.baud_rate = BAUD_RATE_9600;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <hw_uart_init+0x5c>)
 80007c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c4:	601a      	str	r2, [r3, #0]

  NVIC_Configuration(uart);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ff51 	bl	800066e <NVIC_Configuration>
  UART_Configuration(uart, &config1);
 80007cc:	490e      	ldr	r1, [pc, #56]	; (8000808 <hw_uart_init+0x5c>)
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff fe90 	bl	80004f4 <UART_Configuration>
  UART_DMA_Tx_Config(&duart1);
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <hw_uart_init+0x60>)
 80007d6:	f7ff ff0c 	bl	80005f2 <UART_DMA_Tx_Config>
  UART_Configuration(uart, &config2);
  UART_DMA_Tx_Config(&duart2);
#endif

#ifdef USING_UART3
  uart = &uart3;
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <hw_uart_init+0x64>)
 80007dc:	607b      	str	r3, [r7, #4]
  config3.baud_rate = BAUD_RATE_4800;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <hw_uart_init+0x68>)
 80007e0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80007e4:	601a      	str	r2, [r3, #0]

  NVIC_Configuration(uart);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff41 	bl	800066e <NVIC_Configuration>
  UART_Configuration(uart, &config3);
 80007ec:	4909      	ldr	r1, [pc, #36]	; (8000814 <hw_uart_init+0x68>)
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff fe80 	bl	80004f4 <UART_Configuration>
  UART_DMA_Tx_Config(&duart3);
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <hw_uart_init+0x6c>)
 80007f6:	f7ff fefc 	bl	80005f2 <UART_DMA_Tx_Config>
#endif
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	20000000 	.word	0x20000000
 800080c:	2000001c 	.word	0x2000001c
 8000810:	20000104 	.word	0x20000104
 8000814:	200000fc 	.word	0x200000fc
 8000818:	20000118 	.word	0x20000118

0800081c <NVIC_PriorityGroupConfig>:
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	4a05      	ldr	r2, [pc, #20]	; (800083c <NVIC_PriorityGroupConfig+0x20>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60d3      	str	r3, [r2, #12]
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <NVIC_Init>:
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	230f      	movs	r3, #15
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	78db      	ldrb	r3, [r3, #3]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d03a      	beq.n	80008d2 <NVIC_Init+0x92>
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <NVIC_Init+0xbc>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	43db      	mvns	r3, r3
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	f1c3 0304 	rsb	r3, r3, #4
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa22 f303 	lsr.w	r3, r2, r3
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	785b      	ldrb	r3, [r3, #1]
 8000880:	461a      	mov	r2, r3
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	789b      	ldrb	r3, [r3, #2]
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4013      	ands	r3, r2
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	4313      	orrs	r3, r2
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	011b      	lsls	r3, r3, #4
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <NVIC_Init+0xc0>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	6979      	ldr	r1, [r7, #20]
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4413      	add	r3, r2
 80008ac:	460a      	mov	r2, r1
 80008ae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	f003 031f 	and.w	r3, r3, #31
 80008ba:	4911      	ldr	r1, [pc, #68]	; (8000900 <NVIC_Init+0xc0>)
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	7812      	ldrb	r2, [r2, #0]
 80008c0:	0952      	lsrs	r2, r2, #5
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	4610      	mov	r0, r2
 80008c6:	2201      	movs	r2, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 80008d0:	e00f      	b.n	80008f2 <NVIC_Init+0xb2>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	f003 031f 	and.w	r3, r3, #31
 80008da:	4909      	ldr	r1, [pc, #36]	; (8000900 <NVIC_Init+0xc0>)
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	7812      	ldrb	r2, [r2, #0]
 80008e0:	0952      	lsrs	r2, r2, #5
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	4610      	mov	r0, r2
 80008e6:	2201      	movs	r2, #1
 80008e8:	409a      	lsls	r2, r3
 80008ea:	f100 0320 	add.w	r3, r0, #32
 80008ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008f2:	bf00      	nop
 80008f4:	371c      	adds	r7, #28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00
 8000900:	e000e100 	.word	0xe000e100

08000904 <NVIC_SetVectorTable>:
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000918:	4904      	ldr	r1, [pc, #16]	; (800092c <NVIC_SetVectorTable+0x28>)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	608b      	str	r3, [r1, #8]
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <SysTick_CLKSourceConfig>:
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d106      	bne.n	800094c <SysTick_CLKSourceConfig+0x1c>
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <SysTick_CLKSourceConfig+0x34>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <SysTick_CLKSourceConfig+0x34>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	e005      	b.n	8000958 <SysTick_CLKSourceConfig+0x28>
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <SysTick_CLKSourceConfig+0x34>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <SysTick_CLKSourceConfig+0x34>)
 8000952:	f023 0304 	bic.w	r3, r3, #4
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <DMA_DeInit>:
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000978:	4013      	ands	r3, r2
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a43      	ldr	r2, [pc, #268]	; (8000aa8 <DMA_DeInit+0x140>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <DMA_DeInit+0x44>
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <DMA_DeInit+0x144>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	4a42      	ldr	r2, [pc, #264]	; (8000aac <DMA_DeInit+0x144>)
 80009a4:	f043 030f 	orr.w	r3, r3, #15
 80009a8:	6053      	str	r3, [r2, #4]
 80009aa:	e077      	b.n	8000a9c <DMA_DeInit+0x134>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a40      	ldr	r2, [pc, #256]	; (8000ab0 <DMA_DeInit+0x148>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <DMA_DeInit+0x5a>
 80009b4:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <DMA_DeInit+0x144>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	4a3c      	ldr	r2, [pc, #240]	; (8000aac <DMA_DeInit+0x144>)
 80009ba:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80009be:	6053      	str	r3, [r2, #4]
 80009c0:	e06c      	b.n	8000a9c <DMA_DeInit+0x134>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a3b      	ldr	r2, [pc, #236]	; (8000ab4 <DMA_DeInit+0x14c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d106      	bne.n	80009d8 <DMA_DeInit+0x70>
 80009ca:	4b38      	ldr	r3, [pc, #224]	; (8000aac <DMA_DeInit+0x144>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a37      	ldr	r2, [pc, #220]	; (8000aac <DMA_DeInit+0x144>)
 80009d0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80009d4:	6053      	str	r3, [r2, #4]
 80009d6:	e061      	b.n	8000a9c <DMA_DeInit+0x134>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <DMA_DeInit+0x150>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <DMA_DeInit+0x86>
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <DMA_DeInit+0x144>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a31      	ldr	r2, [pc, #196]	; (8000aac <DMA_DeInit+0x144>)
 80009e6:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80009ea:	6053      	str	r3, [r2, #4]
 80009ec:	e056      	b.n	8000a9c <DMA_DeInit+0x134>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a32      	ldr	r2, [pc, #200]	; (8000abc <DMA_DeInit+0x154>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <DMA_DeInit+0x9c>
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <DMA_DeInit+0x144>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	4a2c      	ldr	r2, [pc, #176]	; (8000aac <DMA_DeInit+0x144>)
 80009fc:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000a00:	6053      	str	r3, [r2, #4]
 8000a02:	e04b      	b.n	8000a9c <DMA_DeInit+0x134>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a2e      	ldr	r2, [pc, #184]	; (8000ac0 <DMA_DeInit+0x158>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d106      	bne.n	8000a1a <DMA_DeInit+0xb2>
 8000a0c:	4b27      	ldr	r3, [pc, #156]	; (8000aac <DMA_DeInit+0x144>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a26      	ldr	r2, [pc, #152]	; (8000aac <DMA_DeInit+0x144>)
 8000a12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a16:	6053      	str	r3, [r2, #4]
 8000a18:	e040      	b.n	8000a9c <DMA_DeInit+0x134>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <DMA_DeInit+0x15c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <DMA_DeInit+0xc8>
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <DMA_DeInit+0x144>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4a21      	ldr	r2, [pc, #132]	; (8000aac <DMA_DeInit+0x144>)
 8000a28:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000a2c:	6053      	str	r3, [r2, #4]
 8000a2e:	e035      	b.n	8000a9c <DMA_DeInit+0x134>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a25      	ldr	r2, [pc, #148]	; (8000ac8 <DMA_DeInit+0x160>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <DMA_DeInit+0xde>
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <DMA_DeInit+0x164>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a23      	ldr	r2, [pc, #140]	; (8000acc <DMA_DeInit+0x164>)
 8000a3e:	f043 030f 	orr.w	r3, r3, #15
 8000a42:	6053      	str	r3, [r2, #4]
 8000a44:	e02a      	b.n	8000a9c <DMA_DeInit+0x134>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <DMA_DeInit+0x168>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d106      	bne.n	8000a5c <DMA_DeInit+0xf4>
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <DMA_DeInit+0x164>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <DMA_DeInit+0x164>)
 8000a54:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000a58:	6053      	str	r3, [r2, #4]
 8000a5a:	e01f      	b.n	8000a9c <DMA_DeInit+0x134>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <DMA_DeInit+0x16c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d106      	bne.n	8000a72 <DMA_DeInit+0x10a>
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <DMA_DeInit+0x164>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <DMA_DeInit+0x164>)
 8000a6a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000a6e:	6053      	str	r3, [r2, #4]
 8000a70:	e014      	b.n	8000a9c <DMA_DeInit+0x134>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <DMA_DeInit+0x170>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d106      	bne.n	8000a88 <DMA_DeInit+0x120>
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <DMA_DeInit+0x164>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a13      	ldr	r2, [pc, #76]	; (8000acc <DMA_DeInit+0x164>)
 8000a80:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000a84:	6053      	str	r3, [r2, #4]
 8000a86:	e009      	b.n	8000a9c <DMA_DeInit+0x134>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <DMA_DeInit+0x174>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d105      	bne.n	8000a9c <DMA_DeInit+0x134>
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <DMA_DeInit+0x164>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <DMA_DeInit+0x164>)
 8000a96:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000a9a:	6053      	str	r3, [r2, #4]
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40020008 	.word	0x40020008
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	4002001c 	.word	0x4002001c
 8000ab4:	40020030 	.word	0x40020030
 8000ab8:	40020044 	.word	0x40020044
 8000abc:	40020058 	.word	0x40020058
 8000ac0:	4002006c 	.word	0x4002006c
 8000ac4:	40020080 	.word	0x40020080
 8000ac8:	40020408 	.word	0x40020408
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	4002041c 	.word	0x4002041c
 8000ad4:	40020430 	.word	0x40020430
 8000ad8:	40020444 	.word	0x40020444
 8000adc:	40020458 	.word	0x40020458

08000ae0 <DMA_Init>:
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	431a      	orrs	r2, r3
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	431a      	orrs	r2, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b26:	431a      	orrs	r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	68da      	ldr	r2, [r3, #12]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <DMA_ITConfig>:
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	4613      	mov	r3, r2
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <DMA_ITConfig+0x22>
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	e006      	b.n	8000b8c <DMA_ITConfig+0x30>
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	401a      	ands	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
	...

08000b98 <FLASH_Unlock>:
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <FLASH_Unlock+0x18>)
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <FLASH_Unlock+0x1c>)
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <FLASH_Unlock+0x18>)
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <FLASH_Unlock+0x20>)
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	40022000 	.word	0x40022000
 8000bb4:	45670123 	.word	0x45670123
 8000bb8:	cdef89ab 	.word	0xcdef89ab

08000bbc <FLASH_ErasePage>:
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000bcc:	f000 f88e 	bl	8000cec <FLASH_WaitForLastOperation>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	d11b      	bne.n	8000c12 <FLASH_ErasePage+0x56>
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <FLASH_ErasePage+0x60>)
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <FLASH_ErasePage+0x60>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6113      	str	r3, [r2, #16]
 8000be6:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <FLASH_ErasePage+0x60>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6153      	str	r3, [r2, #20]
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <FLASH_ErasePage+0x60>)
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <FLASH_ErasePage+0x60>)
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf6:	6113      	str	r3, [r2, #16]
 8000bf8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8000bfc:	f000 f876 	bl	8000cec <FLASH_WaitForLastOperation>
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <FLASH_ErasePage+0x60>)
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <FLASH_ErasePage+0x60>)
 8000c0a:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8000c0e:	4013      	ands	r3, r2
 8000c10:	610b      	str	r3, [r1, #16]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40022000 	.word	0x40022000

08000c20 <FLASH_ProgramHalfWord>:
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c34:	f000 f85a 	bl	8000cec <FLASH_WaitForLastOperation>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d115      	bne.n	8000c6e <FLASH_ProgramHalfWord+0x4e>
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <FLASH_ProgramHalfWord+0x58>)
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <FLASH_ProgramHalfWord+0x58>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6113      	str	r3, [r2, #16]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	887a      	ldrh	r2, [r7, #2]
 8000c52:	801a      	strh	r2, [r3, #0]
 8000c54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c58:	f000 f848 	bl	8000cec <FLASH_WaitForLastOperation>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <FLASH_ProgramHalfWord+0x58>)
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	4904      	ldr	r1, [pc, #16]	; (8000c78 <FLASH_ProgramHalfWord+0x58>)
 8000c66:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	610b      	str	r3, [r1, #16]
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40022000 	.word	0x40022000

08000c7c <FLASH_ClearFlag>:
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <FLASH_ClearFlag+0x18>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60d3      	str	r3, [r2, #12]
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40022000 	.word	0x40022000

08000c98 <FLASH_GetBank1Status>:
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <FLASH_GetBank1Status+0x50>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d102      	bne.n	8000cb4 <FLASH_GetBank1Status+0x1c>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	e013      	b.n	8000cdc <FLASH_GetBank1Status+0x44>
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <FLASH_GetBank1Status+0x50>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <FLASH_GetBank1Status+0x2e>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	e00a      	b.n	8000cdc <FLASH_GetBank1Status+0x44>
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <FLASH_GetBank1Status+0x50>)
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <FLASH_GetBank1Status+0x40>
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	e001      	b.n	8000cdc <FLASH_GetBank1Status+0x44>
 8000cd8:	2304      	movs	r3, #4
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40022000 	.word	0x40022000

08000cec <FLASH_WaitForLastOperation>:
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	f7ff ffce 	bl	8000c98 <FLASH_GetBank1Status>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	e006      	b.n	8000d10 <FLASH_WaitForLastOperation+0x24>
 8000d02:	f7ff ffc9 	bl	8000c98 <FLASH_GetBank1Status>
 8000d06:	4603      	mov	r3, r0
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d102      	bne.n	8000d1c <FLASH_WaitForLastOperation+0x30>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f2      	bne.n	8000d02 <FLASH_WaitForLastOperation+0x16>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <FLASH_WaitForLastOperation+0x3a>
 8000d22:	2305      	movs	r3, #5
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <GPIO_Init>:
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	78db      	ldrb	r3, [r3, #3]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	78db      	ldrb	r3, [r3, #3]
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d005      	beq.n	8000d74 <GPIO_Init+0x44>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d044      	beq.n	8000e08 <GPIO_Init+0xd8>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	e038      	b.n	8000dfc <GPIO_Init+0xcc>
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d126      	bne.n	8000df6 <GPIO_Init+0xc6>
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	220f      	movs	r2, #15
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	78db      	ldrb	r3, [r3, #3]
 8000dd4:	2b28      	cmp	r3, #40	; 0x28
 8000dd6:	d105      	bne.n	8000de4 <GPIO_Init+0xb4>
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	e008      	b.n	8000df6 <GPIO_Init+0xc6>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	78db      	ldrb	r3, [r3, #3]
 8000de8:	2b48      	cmp	r3, #72	; 0x48
 8000dea:	d104      	bne.n	8000df6 <GPIO_Init+0xc6>
 8000dec:	2201      	movs	r2, #1
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	409a      	lsls	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2b07      	cmp	r3, #7
 8000e00:	d9c3      	bls.n	8000d8a <GPIO_Init+0x5a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	2bff      	cmp	r3, #255	; 0xff
 8000e0e:	d946      	bls.n	8000e9e <GPIO_Init+0x16e>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	e03a      	b.n	8000e92 <GPIO_Init+0x162>
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	3308      	adds	r3, #8
 8000e20:	2201      	movs	r2, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d127      	bne.n	8000e8c <GPIO_Init+0x15c>
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	220f      	movs	r2, #15
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	4013      	ands	r3, r2
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	69fa      	ldr	r2, [r7, #28]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	78db      	ldrb	r3, [r3, #3]
 8000e68:	2b28      	cmp	r3, #40	; 0x28
 8000e6a:	d105      	bne.n	8000e78 <GPIO_Init+0x148>
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	3308      	adds	r3, #8
 8000e70:	2201      	movs	r2, #1
 8000e72:	409a      	lsls	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	615a      	str	r2, [r3, #20]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	78db      	ldrb	r3, [r3, #3]
 8000e7c:	2b48      	cmp	r3, #72	; 0x48
 8000e7e:	d105      	bne.n	8000e8c <GPIO_Init+0x15c>
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	3308      	adds	r3, #8
 8000e84:	2201      	movs	r2, #1
 8000e86:	409a      	lsls	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	d9c1      	bls.n	8000e1c <GPIO_Init+0xec>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	bf00      	nop
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <RCC_DeInit>:
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <RCC_DeInit+0x54>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a12      	ldr	r2, [pc, #72]	; (8000efc <RCC_DeInit+0x54>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <RCC_DeInit+0x54>)
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	490f      	ldr	r1, [pc, #60]	; (8000efc <RCC_DeInit+0x54>)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <RCC_DeInit+0x58>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <RCC_DeInit+0x54>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <RCC_DeInit+0x54>)
 8000eca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <RCC_DeInit+0x54>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a08      	ldr	r2, [pc, #32]	; (8000efc <RCC_DeInit+0x54>)
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <RCC_DeInit+0x54>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <RCC_DeInit+0x54>)
 8000ee6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000eea:	6053      	str	r3, [r2, #4]
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <RCC_DeInit+0x54>)
 8000eee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000
 8000f00:	f8ff0000 	.word	0xf8ff0000

08000f04 <RCC_HSEConfig>:
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <RCC_HSEConfig+0x58>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <RCC_HSEConfig+0x58>)
 8000f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <RCC_HSEConfig+0x58>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <RCC_HSEConfig+0x58>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2a:	d003      	beq.n	8000f34 <RCC_HSEConfig+0x30>
 8000f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f30:	d007      	beq.n	8000f42 <RCC_HSEConfig+0x3e>
 8000f32:	e00d      	b.n	8000f50 <RCC_HSEConfig+0x4c>
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <RCC_HSEConfig+0x58>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <RCC_HSEConfig+0x58>)
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e006      	b.n	8000f50 <RCC_HSEConfig+0x4c>
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <RCC_HSEConfig+0x58>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <RCC_HSEConfig+0x58>)
 8000f48:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <RCC_WaitForHSEStartUp>:
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	2031      	movs	r0, #49	; 0x31
 8000f74:	f000 f9d2 	bl	800131c <RCC_GetFlagStatus>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71bb      	strb	r3, [r7, #6]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000f88:	d002      	beq.n	8000f90 <RCC_WaitForHSEStartUp+0x30>
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <RCC_WaitForHSEStartUp+0x12>
 8000f90:	2031      	movs	r0, #49	; 0x31
 8000f92:	f000 f9c3 	bl	800131c <RCC_GetFlagStatus>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <RCC_WaitForHSEStartUp+0x42>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	e001      	b.n	8000fa6 <RCC_WaitForHSEStartUp+0x46>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <RCC_PLLConfig>:
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <RCC_PLLConfig+0x38>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	4a03      	ldr	r2, [pc, #12]	; (8000fe8 <RCC_PLLConfig+0x38>)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6053      	str	r3, [r2, #4]
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000

08000fec <RCC_PLLCmd>:
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <RCC_PLLCmd+0x1c>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	42420060 	.word	0x42420060

0800100c <RCC_SYSCLKConfig>:
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <RCC_SYSCLKConfig+0x34>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f023 0303 	bic.w	r3, r3, #3
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4313      	orrs	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <RCC_SYSCLKConfig+0x34>)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6053      	str	r3, [r2, #4]
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <RCC_GetSYSCLKSource>:
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <RCC_GetSYSCLKSource+0x18>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000

08001060 <RCC_HCLKConfig>:
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <RCC_HCLKConfig+0x34>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4313      	orrs	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <RCC_HCLKConfig+0x34>)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6053      	str	r3, [r2, #4]
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <RCC_PCLK1Config>:
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <RCC_PCLK1Config+0x34>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <RCC_PCLK1Config+0x34>)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6053      	str	r3, [r2, #4]
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <RCC_PCLK2Config>:
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <RCC_PCLK2Config+0x34>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4a03      	ldr	r2, [pc, #12]	; (8001104 <RCC_PCLK2Config+0x34>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6053      	str	r3, [r2, #4]
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000

08001108 <RCC_GetClocksFreq>:
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <RCC_GetClocksFreq+0x14c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d007      	beq.n	8001140 <RCC_GetClocksFreq+0x38>
 8001130:	2b08      	cmp	r3, #8
 8001132:	d009      	beq.n	8001148 <RCC_GetClocksFreq+0x40>
 8001134:	2b00      	cmp	r3, #0
 8001136:	d133      	bne.n	80011a0 <RCC_GetClocksFreq+0x98>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a47      	ldr	r2, [pc, #284]	; (8001258 <RCC_GetClocksFreq+0x150>)
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e033      	b.n	80011a8 <RCC_GetClocksFreq+0xa0>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a45      	ldr	r2, [pc, #276]	; (8001258 <RCC_GetClocksFreq+0x150>)
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e02f      	b.n	80011a8 <RCC_GetClocksFreq+0xa0>
 8001148:	4b42      	ldr	r3, [pc, #264]	; (8001254 <RCC_GetClocksFreq+0x14c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b40      	ldr	r3, [pc, #256]	; (8001254 <RCC_GetClocksFreq+0x14c>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	0c9b      	lsrs	r3, r3, #18
 8001160:	3302      	adds	r3, #2
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <RCC_GetClocksFreq+0x70>
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4a3b      	ldr	r2, [pc, #236]	; (800125c <RCC_GetClocksFreq+0x154>)
 800116e:	fb02 f203 	mul.w	r2, r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e017      	b.n	80011a8 <RCC_GetClocksFreq+0xa0>
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <RCC_GetClocksFreq+0x14c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d006      	beq.n	8001192 <RCC_GetClocksFreq+0x8a>
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4a35      	ldr	r2, [pc, #212]	; (800125c <RCC_GetClocksFreq+0x154>)
 8001188:	fb02 f203 	mul.w	r2, r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e00a      	b.n	80011a8 <RCC_GetClocksFreq+0xa0>
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4a30      	ldr	r2, [pc, #192]	; (8001258 <RCC_GetClocksFreq+0x150>)
 8001196:	fb02 f203 	mul.w	r2, r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e003      	b.n	80011a8 <RCC_GetClocksFreq+0xa0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a2d      	ldr	r2, [pc, #180]	; (8001258 <RCC_GetClocksFreq+0x150>)
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	bf00      	nop
 80011a8:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <RCC_GetClocksFreq+0x14c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	4a29      	ldr	r2, [pc, #164]	; (8001260 <RCC_GetClocksFreq+0x158>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	40da      	lsrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <RCC_GetClocksFreq+0x14c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <RCC_GetClocksFreq+0x158>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	40da      	lsrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <RCC_GetClocksFreq+0x14c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	0adb      	lsrs	r3, r3, #11
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	4a15      	ldr	r2, [pc, #84]	; (8001260 <RCC_GetClocksFreq+0x158>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	40da      	lsrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <RCC_GetClocksFreq+0x14c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	0b9b      	lsrs	r3, r3, #14
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <RCC_GetClocksFreq+0x15c>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	fbb2 f2f3 	udiv	r2, r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	bf00      	nop
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	40021000 	.word	0x40021000
 8001258:	007a1200 	.word	0x007a1200
 800125c:	003d0900 	.word	0x003d0900
 8001260:	200001f8 	.word	0x200001f8
 8001264:	20000208 	.word	0x20000208

08001268 <RCC_AHBPeriphClockCmd>:
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <RCC_AHBPeriphClockCmd+0x20>
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <RCC_AHBPeriphClockCmd+0x38>)
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <RCC_AHBPeriphClockCmd+0x38>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4313      	orrs	r3, r2
 8001284:	614b      	str	r3, [r1, #20]
 8001286:	e006      	b.n	8001296 <RCC_AHBPeriphClockCmd+0x2e>
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <RCC_AHBPeriphClockCmd+0x38>)
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	43db      	mvns	r3, r3
 8001290:	4903      	ldr	r1, [pc, #12]	; (80012a0 <RCC_AHBPeriphClockCmd+0x38>)
 8001292:	4013      	ands	r3, r2
 8001294:	614b      	str	r3, [r1, #20]
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000

080012a4 <RCC_APB2PeriphClockCmd>:
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <RCC_APB2PeriphClockCmd+0x20>
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <RCC_APB2PeriphClockCmd+0x38>)
 80012b8:	699a      	ldr	r2, [r3, #24]
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <RCC_APB2PeriphClockCmd+0x38>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4313      	orrs	r3, r2
 80012c0:	618b      	str	r3, [r1, #24]
 80012c2:	e006      	b.n	80012d2 <RCC_APB2PeriphClockCmd+0x2e>
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <RCC_APB2PeriphClockCmd+0x38>)
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	4903      	ldr	r1, [pc, #12]	; (80012dc <RCC_APB2PeriphClockCmd+0x38>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	618b      	str	r3, [r1, #24]
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000

080012e0 <RCC_APB1PeriphClockCmd>:
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <RCC_APB1PeriphClockCmd+0x20>
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <RCC_APB1PeriphClockCmd+0x38>)
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <RCC_APB1PeriphClockCmd+0x38>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61cb      	str	r3, [r1, #28]
 80012fe:	e006      	b.n	800130e <RCC_APB1PeriphClockCmd+0x2e>
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <RCC_APB1PeriphClockCmd+0x38>)
 8001302:	69da      	ldr	r2, [r3, #28]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	43db      	mvns	r3, r3
 8001308:	4903      	ldr	r1, [pc, #12]	; (8001318 <RCC_APB1PeriphClockCmd+0x38>)
 800130a:	4013      	ands	r3, r2
 800130c:	61cb      	str	r3, [r1, #28]
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000

0800131c <RCC_GetFlagStatus>:
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	2300      	movs	r3, #0
 8001330:	74fb      	strb	r3, [r7, #19]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	095b      	lsrs	r3, r3, #5
 8001336:	b2db      	uxtb	r3, r3
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d103      	bne.n	8001348 <RCC_GetFlagStatus+0x2c>
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <RCC_GetFlagStatus+0x70>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <RCC_GetFlagStatus+0x40>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d103      	bne.n	8001356 <RCC_GetFlagStatus+0x3a>
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <RCC_GetFlagStatus+0x70>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e002      	b.n	800135c <RCC_GetFlagStatus+0x40>
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <RCC_GetFlagStatus+0x70>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <RCC_GetFlagStatus+0x5e>
 8001374:	2301      	movs	r3, #1
 8001376:	74fb      	strb	r3, [r7, #19]
 8001378:	e001      	b.n	800137e <RCC_GetFlagStatus+0x62>
 800137a:	2300      	movs	r3, #0
 800137c:	74fb      	strb	r3, [r7, #19]
 800137e:	7cfb      	ldrb	r3, [r7, #19]
 8001380:	4618      	mov	r0, r3
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <USART_Init>:
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	8a1b      	ldrh	r3, [r3, #16]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013bc:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80013c0:	4013      	ands	r3, r2
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	88db      	ldrh	r3, [r3, #6]
 80013c8:	461a      	mov	r2, r3
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	4313      	orrs	r3, r2
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	821a      	strh	r2, [r3, #16]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	899b      	ldrh	r3, [r3, #12]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e2:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80013e6:	4013      	ands	r3, r2
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	889a      	ldrh	r2, [r3, #4]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	891b      	ldrh	r3, [r3, #8]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	895b      	ldrh	r3, [r3, #10]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001402:	4313      	orrs	r3, r2
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	819a      	strh	r2, [r3, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	8a9b      	ldrh	r3, [r3, #20]
 8001412:	b29b      	uxth	r3, r3
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001418:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800141c:	4013      	ands	r3, r2
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	899b      	ldrh	r3, [r3, #12]
 8001424:	461a      	mov	r2, r3
 8001426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001428:	4313      	orrs	r3, r2
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	829a      	strh	r2, [r3, #20]
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fe65 	bl	8001108 <RCC_GetClocksFreq>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	4a2e      	ldr	r2, [pc, #184]	; (80014fc <USART_Init+0x16c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d102      	bne.n	800144c <USART_Init+0xbc>
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
 800144a:	e001      	b.n	8001450 <USART_Init+0xc0>
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	899b      	ldrh	r3, [r3, #12]
 8001454:	b29b      	uxth	r3, r3
 8001456:	b21b      	sxth	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	da0c      	bge.n	8001476 <USART_Init+0xe6>
 800145c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009a      	lsls	r2, r3, #2
 8001466:	441a      	add	r2, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e00b      	b.n	800148e <USART_Init+0xfe>
 8001476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	009a      	lsls	r2, r3, #2
 8001480:	441a      	add	r2, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fbb2 f3f3 	udiv	r3, r2, r3
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <USART_Init+0x170>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	2264      	movs	r2, #100	; 0x64
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	623b      	str	r3, [r7, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	899b      	ldrh	r3, [r3, #12]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da0c      	bge.n	80014d2 <USART_Init+0x142>
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	3332      	adds	r3, #50	; 0x32
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <USART_Init+0x170>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	095b      	lsrs	r3, r3, #5
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014cc:	4313      	orrs	r3, r2
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014d0:	e00b      	b.n	80014ea <USART_Init+0x15a>
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	3332      	adds	r3, #50	; 0x32
 80014d8:	4a09      	ldr	r2, [pc, #36]	; (8001500 <USART_Init+0x170>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e6:	4313      	orrs	r3, r2
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	811a      	strh	r2, [r3, #8]
 80014f2:	bf00      	nop
 80014f4:	3730      	adds	r7, #48	; 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40013800 	.word	0x40013800
 8001500:	51eb851f 	.word	0x51eb851f

08001504 <USART_Cmd>:
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <USART_Cmd+0x24>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	899b      	ldrh	r3, [r3, #12]
 800151a:	b29b      	uxth	r3, r3
 800151c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	819a      	strh	r2, [r3, #12]
 8001526:	e007      	b.n	8001538 <USART_Cmd+0x34>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	899b      	ldrh	r3, [r3, #12]
 800152c:	b29b      	uxth	r3, r3
 800152e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001532:	b29a      	uxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	819a      	strh	r2, [r3, #12]
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <USART_ITConfig>:
 8001542:	b480      	push	{r7}
 8001544:	b087      	sub	sp, #28
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	807b      	strh	r3, [r7, #2]
 800154e:	4613      	mov	r3, r2
 8001550:	707b      	strb	r3, [r7, #1]
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	b2db      	uxtb	r3, r3
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d103      	bne.n	8001590 <USART_ITConfig+0x4e>
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	330c      	adds	r3, #12
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e009      	b.n	80015a4 <USART_ITConfig+0x62>
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d103      	bne.n	800159e <USART_ITConfig+0x5c>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3310      	adds	r3, #16
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e002      	b.n	80015a4 <USART_ITConfig+0x62>
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3314      	adds	r3, #20
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <USART_ITConfig+0x76>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e006      	b.n	80015c6 <USART_ITConfig+0x84>
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	6819      	ldr	r1, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	43da      	mvns	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	400a      	ands	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <USART_DMACmd>:
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <USART_DMACmd+0x28>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	8a9b      	ldrh	r3, [r3, #20]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	829a      	strh	r2, [r3, #20]
 80015f6:	e009      	b.n	800160c <USART_DMACmd+0x3c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	8a9b      	ldrh	r3, [r3, #20]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	43db      	mvns	r3, r3
 8001602:	b29b      	uxth	r3, r3
 8001604:	4013      	ands	r3, r2
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	829a      	strh	r2, [r3, #20]
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <USART_ReceiveData>:
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	889b      	ldrh	r3, [r3, #4]
 8001622:	b29b      	uxth	r3, r3
 8001624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <USART_GetFlagStatus>:
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b29a      	uxth	r2, r3
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	4013      	ands	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <USART_GetFlagStatus+0x26>
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <USART_GetFlagStatus+0x2a>
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <USART_GetITStatus>:
 800166a:	b480      	push	{r7}
 800166c:	b087      	sub	sp, #28
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	807b      	strh	r3, [r7, #2]
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	2300      	movs	r3, #0
 8001684:	74fb      	strb	r3, [r7, #19]
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	b2db      	uxtb	r3, r3
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	2201      	movs	r2, #1
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <USART_GetITStatus+0x4e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	899b      	ldrh	r3, [r3, #12]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	4013      	ands	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e011      	b.n	80016dc <USART_GetITStatus+0x72>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d107      	bne.n	80016ce <USART_GetITStatus+0x64>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	8a1b      	ldrh	r3, [r3, #16]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e006      	b.n	80016dc <USART_GetITStatus+0x72>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8a9b      	ldrh	r3, [r3, #20]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4013      	ands	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <USART_GetITStatus+0xa4>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <USART_GetITStatus+0xa4>
 8001708:	2301      	movs	r3, #1
 800170a:	74fb      	strb	r3, [r7, #19]
 800170c:	e001      	b.n	8001712 <USART_GetITStatus+0xa8>
 800170e:	2300      	movs	r3, #0
 8001710:	74fb      	strb	r3, [r7, #19]
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	4618      	mov	r0, r3
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <USART_ClearITPendingBit>:
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	807b      	strh	r3, [r7, #2]
 800172a:	2300      	movs	r3, #0
 800172c:	81fb      	strh	r3, [r7, #14]
 800172e:	2300      	movs	r3, #0
 8001730:	81bb      	strh	r3, [r7, #12]
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	81fb      	strh	r3, [r7, #14]
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	2201      	movs	r2, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	81bb      	strh	r3, [r7, #12]
 8001742:	89bb      	ldrh	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  hw_board_init();
 800175a:	f7fe fe4b 	bl	80003f4 <hw_board_init>
  hw_uart_init();
 800175e:	f7ff f825 	bl	80007ac <hw_uart_init>

  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
 8001762:	e7fe      	b.n	8001762 <main+0xc>

08001764 <Reset_Handler>:
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800179c <LoopFillZerobss+0x14>
 8001768:	2100      	movs	r1, #0
 800176a:	e003      	b.n	8001774 <LoopCopyDataInit>

0800176c <CopyDataInit>:
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <LoopFillZerobss+0x18>)
 800176e:	585b      	ldr	r3, [r3, r1]
 8001770:	5043      	str	r3, [r0, r1]
 8001772:	3104      	adds	r1, #4

08001774 <LoopCopyDataInit>:
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <LoopFillZerobss+0x1c>)
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <LoopFillZerobss+0x20>)
 8001778:	1842      	adds	r2, r0, r1
 800177a:	429a      	cmp	r2, r3
 800177c:	d3f6      	bcc.n	800176c <CopyDataInit>
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <LoopFillZerobss+0x24>)
 8001780:	e002      	b.n	8001788 <LoopFillZerobss>

08001782 <FillZerobss>:
 8001782:	2300      	movs	r3, #0
 8001784:	f842 3b04 	str.w	r3, [r2], #4

08001788 <LoopFillZerobss>:
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <LoopFillZerobss+0x28>)
 800178a:	429a      	cmp	r2, r3
 800178c:	d3f9      	bcc.n	8001782 <FillZerobss>
 800178e:	f000 f83d 	bl	800180c <SystemInit>
 8001792:	f000 f8f5 	bl	8001980 <__libc_init_array>
 8001796:	f7ff ffde 	bl	8001756 <main>
 800179a:	4770      	bx	lr
 800179c:	20005000 	.word	0x20005000
 80017a0:	08001ae8 	.word	0x08001ae8
 80017a4:	20000000 	.word	0x20000000
 80017a8:	2000063c 	.word	0x2000063c
 80017ac:	2000063c 	.word	0x2000063c
 80017b0:	20000684 	.word	0x20000684

080017b4 <ADC1_2_IRQHandler>:
 80017b4:	e7fe      	b.n	80017b4 <ADC1_2_IRQHandler>

080017b6 <NMI_Handler>:
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <HardFault_Handler>:
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <SVC_Handler>:
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <DebugMon_Handler>:
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <SysTick_Handler>:
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <SystemInit>:
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <SystemInit+0x5c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <SystemInit+0x5c>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <SystemInit+0x5c>)
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4911      	ldr	r1, [pc, #68]	; (8001868 <SystemInit+0x5c>)
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <SystemInit+0x60>)
 8001824:	4013      	ands	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <SystemInit+0x5c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <SystemInit+0x5c>)
 800182e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <SystemInit+0x5c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SystemInit+0x5c>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <SystemInit+0x5c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <SystemInit+0x5c>)
 800184a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800184e:	6053      	str	r3, [r2, #4]
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SystemInit+0x5c>)
 8001852:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	f000 f80c 	bl	8001874 <SetSysClock>
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SystemInit+0x64>)
 800185e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	f8ff0000 	.word	0xf8ff0000
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <SetSysClock>:
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
 8001878:	f000 f802 	bl	8001880 <SetSysClockTo72>
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <SetSysClockTo72>:
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <SetSysClockTo72+0xf8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a39      	ldr	r2, [pc, #228]	; (8001978 <SetSysClockTo72+0xf8>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <SetSysClockTo72+0xf8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d103      	bne.n	80018b8 <SetSysClockTo72+0x38>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80018b6:	d1f0      	bne.n	800189a <SetSysClockTo72+0x1a>
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <SetSysClockTo72+0xf8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <SetSysClockTo72+0x4a>
 80018c4:	2301      	movs	r3, #1
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	e001      	b.n	80018ce <SetSysClockTo72+0x4e>
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d14b      	bne.n	800196c <SetSysClockTo72+0xec>
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <SetSysClockTo72+0xfc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a28      	ldr	r2, [pc, #160]	; (800197c <SetSysClockTo72+0xfc>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <SetSysClockTo72+0xfc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a25      	ldr	r2, [pc, #148]	; (800197c <SetSysClockTo72+0xfc>)
 80018e6:	f023 0303 	bic.w	r3, r3, #3
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <SetSysClockTo72+0xfc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <SetSysClockTo72+0xfc>)
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <SetSysClockTo72+0xf8>)
 80018fa:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <SetSysClockTo72+0xf8>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	6053      	str	r3, [r2, #4]
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <SetSysClockTo72+0xf8>)
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <SetSysClockTo72+0xf8>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	6053      	str	r3, [r2, #4]
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <SetSysClockTo72+0xf8>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <SetSysClockTo72+0xf8>)
 800190e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001912:	6053      	str	r3, [r2, #4]
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <SetSysClockTo72+0xf8>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <SetSysClockTo72+0xf8>)
 800191a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800191e:	6053      	str	r3, [r2, #4]
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <SetSysClockTo72+0xf8>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <SetSysClockTo72+0xf8>)
 8001926:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800192a:	6053      	str	r3, [r2, #4]
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <SetSysClockTo72+0xf8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a11      	ldr	r2, [pc, #68]	; (8001978 <SetSysClockTo72+0xf8>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	bf00      	nop
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <SetSysClockTo72+0xf8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f9      	beq.n	800193a <SetSysClockTo72+0xba>
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <SetSysClockTo72+0xf8>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <SetSysClockTo72+0xf8>)
 800194c:	f023 0303 	bic.w	r3, r3, #3
 8001950:	6053      	str	r3, [r2, #4]
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <SetSysClockTo72+0xf8>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <SetSysClockTo72+0xf8>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6053      	str	r3, [r2, #4]
 800195e:	bf00      	nop
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SetSysClockTo72+0xf8>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d1f9      	bne.n	8001960 <SetSysClockTo72+0xe0>
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	40022000 	.word	0x40022000

08001980 <__libc_init_array>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	2500      	movs	r5, #0
 8001984:	4e0c      	ldr	r6, [pc, #48]	; (80019b8 <__libc_init_array+0x38>)
 8001986:	4c0d      	ldr	r4, [pc, #52]	; (80019bc <__libc_init_array+0x3c>)
 8001988:	1ba4      	subs	r4, r4, r6
 800198a:	10a4      	asrs	r4, r4, #2
 800198c:	42a5      	cmp	r5, r4
 800198e:	d109      	bne.n	80019a4 <__libc_init_array+0x24>
 8001990:	f000 f896 	bl	8001ac0 <_init>
 8001994:	2500      	movs	r5, #0
 8001996:	4e0a      	ldr	r6, [pc, #40]	; (80019c0 <__libc_init_array+0x40>)
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <__libc_init_array+0x44>)
 800199a:	1ba4      	subs	r4, r4, r6
 800199c:	10a4      	asrs	r4, r4, #2
 800199e:	42a5      	cmp	r5, r4
 80019a0:	d105      	bne.n	80019ae <__libc_init_array+0x2e>
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
 80019a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019a8:	4798      	blx	r3
 80019aa:	3501      	adds	r5, #1
 80019ac:	e7ee      	b.n	800198c <__libc_init_array+0xc>
 80019ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019b2:	4798      	blx	r3
 80019b4:	3501      	adds	r5, #1
 80019b6:	e7f2      	b.n	800199e <__libc_init_array+0x1e>
 80019b8:	08001adc 	.word	0x08001adc
 80019bc:	08001adc 	.word	0x08001adc
 80019c0:	08001adc 	.word	0x08001adc
 80019c4:	08001ae4 	.word	0x08001ae4

080019c8 <register_fini>:
 80019c8:	4b02      	ldr	r3, [pc, #8]	; (80019d4 <register_fini+0xc>)
 80019ca:	b113      	cbz	r3, 80019d2 <register_fini+0xa>
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <register_fini+0x10>)
 80019ce:	f000 b805 	b.w	80019dc <atexit>
 80019d2:	4770      	bx	lr
 80019d4:	00000000 	.word	0x00000000
 80019d8:	080019e9 	.word	0x080019e9

080019dc <atexit>:
 80019dc:	2300      	movs	r3, #0
 80019de:	4601      	mov	r1, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 b816 	b.w	8001a14 <__register_exitproc>

080019e8 <__libc_fini_array>:
 80019e8:	b538      	push	{r3, r4, r5, lr}
 80019ea:	4d07      	ldr	r5, [pc, #28]	; (8001a08 <__libc_fini_array+0x20>)
 80019ec:	4c07      	ldr	r4, [pc, #28]	; (8001a0c <__libc_fini_array+0x24>)
 80019ee:	1b64      	subs	r4, r4, r5
 80019f0:	10a4      	asrs	r4, r4, #2
 80019f2:	b91c      	cbnz	r4, 80019fc <__libc_fini_array+0x14>
 80019f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019f8:	f000 b868 	b.w	8001acc <_fini>
 80019fc:	3c01      	subs	r4, #1
 80019fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001a02:	4798      	blx	r3
 8001a04:	e7f5      	b.n	80019f2 <__libc_fini_array+0xa>
 8001a06:	bf00      	nop
 8001a08:	08001ae4 	.word	0x08001ae4
 8001a0c:	08001ae8 	.word	0x08001ae8

08001a10 <__retarget_lock_acquire_recursive>:
 8001a10:	4770      	bx	lr

08001a12 <__retarget_lock_release_recursive>:
 8001a12:	4770      	bx	lr

08001a14 <__register_exitproc>:
 8001a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a18:	4c26      	ldr	r4, [pc, #152]	; (8001ab4 <__register_exitproc+0xa0>)
 8001a1a:	4606      	mov	r6, r0
 8001a1c:	6820      	ldr	r0, [r4, #0]
 8001a1e:	4698      	mov	r8, r3
 8001a20:	460f      	mov	r7, r1
 8001a22:	4691      	mov	r9, r2
 8001a24:	f7ff fff4 	bl	8001a10 <__retarget_lock_acquire_recursive>
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <__register_exitproc+0xa4>)
 8001a2a:	681d      	ldr	r5, [r3, #0]
 8001a2c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8001a30:	b918      	cbnz	r0, 8001a3a <__register_exitproc+0x26>
 8001a32:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8001a36:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8001a3a:	6843      	ldr	r3, [r0, #4]
 8001a3c:	2b1f      	cmp	r3, #31
 8001a3e:	dd19      	ble.n	8001a74 <__register_exitproc+0x60>
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <__register_exitproc+0xa8>)
 8001a42:	b933      	cbnz	r3, 8001a52 <__register_exitproc+0x3e>
 8001a44:	6820      	ldr	r0, [r4, #0]
 8001a46:	f7ff ffe4 	bl	8001a12 <__retarget_lock_release_recursive>
 8001a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a52:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001a56:	f3af 8000 	nop.w
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d0f2      	beq.n	8001a44 <__register_exitproc+0x30>
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8001a64:	6042      	str	r2, [r0, #4]
 8001a66:	6003      	str	r3, [r0, #0]
 8001a68:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8001a6c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8001a70:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8001a74:	6843      	ldr	r3, [r0, #4]
 8001a76:	b19e      	cbz	r6, 8001aa0 <__register_exitproc+0x8c>
 8001a78:	2201      	movs	r2, #1
 8001a7a:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8001a7e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8001a82:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8001a86:	409a      	lsls	r2, r3
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	2e02      	cmp	r6, #2
 8001a8c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8001a90:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8001a94:	bf02      	ittt	eq
 8001a96:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8001a9a:	430a      	orreq	r2, r1
 8001a9c:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	6042      	str	r2, [r0, #4]
 8001aa6:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8001aaa:	6820      	ldr	r0, [r4, #0]
 8001aac:	f7ff ffb1 	bl	8001a12 <__retarget_lock_release_recursive>
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	e7cc      	b.n	8001a4e <__register_exitproc+0x3a>
 8001ab4:	20000638 	.word	0x20000638
 8001ab8:	08001ad8 	.word	0x08001ad8
 8001abc:	00000000 	.word	0x00000000

08001ac0 <_init>:
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac2:	bf00      	nop
 8001ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac6:	bc08      	pop	{r3}
 8001ac8:	469e      	mov	lr, r3
 8001aca:	4770      	bx	lr

08001acc <_fini>:
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	bf00      	nop
 8001ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ad2:	bc08      	pop	{r3}
 8001ad4:	469e      	mov	lr, r3
 8001ad6:	4770      	bx	lr
