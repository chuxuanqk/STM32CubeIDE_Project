
Ocm_deom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000271c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08002828  08002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000644  20000000  08002838  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000354  20000644  08002e7c  00020644  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000998  08002e7c  00020998  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020644  2**0
                  CONTENTS, READONLY
  9 .debug_info   000011b8  00000000  00000000  0002066d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000539  00000000  00000000  00021825  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000880  00000000  00000000  00021d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000778  00000000  00000000  000225e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001c81  00000000  00000000  00022d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000011e2  00000000  00000000  000249d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00025bbb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000022bc  00000000  00000000  00025c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00027ef4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000644 	.word	0x20000644
 8000128:	00000000 	.word	0x00000000
 800012c:	08002810 	.word	0x08002810

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000648 	.word	0x20000648
 8000148:	08002810 	.word	0x08002810

0800014c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015c:	2b00      	cmp	r3, #0
 800015e:	da0b      	bge.n	8000178 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	b2da      	uxtb	r2, r3
 8000164:	490c      	ldr	r1, [pc, #48]	; (8000198 <NVIC_SetPriority+0x4c>)
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f003 030f 	and.w	r3, r3, #15
 800016c:	3b04      	subs	r3, #4
 800016e:	0112      	lsls	r2, r2, #4
 8000170:	b2d2      	uxtb	r2, r2
 8000172:	440b      	add	r3, r1
 8000174:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000176:	e009      	b.n	800018c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	b2da      	uxtb	r2, r3
 800017c:	4907      	ldr	r1, [pc, #28]	; (800019c <NVIC_SetPriority+0x50>)
 800017e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000182:	0112      	lsls	r2, r2, #4
 8000184:	b2d2      	uxtb	r2, r2
 8000186:	440b      	add	r3, r1
 8000188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000ed00 	.word	0xe000ed00
 800019c:	e000e100 	.word	0xe000e100

080001a0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001ae:	d301      	bcc.n	80001b4 <SysTick_Config+0x14>
 80001b0:	2301      	movs	r3, #1
 80001b2:	e011      	b.n	80001d8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80001ba:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <SysTick_Config+0x40>)
 80001bc:	3b01      	subs	r3, #1
 80001be:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80001c0:	210f      	movs	r1, #15
 80001c2:	f04f 30ff 	mov.w	r0, #4294967295
 80001c6:	f7ff ffc1 	bl	800014c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ca:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SysTick_Config+0x40>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <SysTick_Config+0x40>)
 80001d2:	2207      	movs	r2, #7
 80001d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80001d6:	2300      	movs	r3, #0
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	e000e010 	.word	0xe000e010

080001e4 <Config_Data_ReInit>:

union STM32_ID_12Byte STM32_ID;
Config_Data_Str Config_Data;

void Config_Data_ReInit(Config_Data_Str *config)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *temp_ptr = (u8 *)config;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60bb      	str	r3, [r7, #8]
    //清零所有参数
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80001f0:	2300      	movs	r3, #0
 80001f2:	81fb      	strh	r3, [r7, #14]
 80001f4:	e007      	b.n	8000206 <Config_Data_ReInit+0x22>
    {
        temp_ptr[i] = 0;
 80001f6:	89fb      	ldrh	r3, [r7, #14]
 80001f8:	68ba      	ldr	r2, [r7, #8]
 80001fa:	4413      	add	r3, r2
 80001fc:	2200      	movs	r2, #0
 80001fe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000200:	89fb      	ldrh	r3, [r7, #14]
 8000202:	3301      	adds	r3, #1
 8000204:	81fb      	strh	r3, [r7, #14]
 8000206:	89fb      	ldrh	r3, [r7, #14]
 8000208:	2b15      	cmp	r3, #21
 800020a:	d9f4      	bls.n	80001f6 <Config_Data_ReInit+0x12>
    }
    //设置默认值
    config->save_data_flag = 1;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2201      	movs	r2, #1
 8000210:	751a      	strb	r2, [r3, #20]

    // Dev_Config_Reinit(&(config->dev_con));
    // Dev_Config_Reinit((config->dev_con));
};
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr

0800021c <Write_Config_To_Flash>:

void Write_Config_To_Flash(Config_Data_Str *config)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *data_ptr = (u8 *)config;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	60fb      	str	r3, [r7, #12]
    u32 flash_addr = CONFIG_DATA_FLASH_ADDR;
 8000228:	4b22      	ldr	r3, [pc, #136]	; (80002b4 <Write_Config_To_Flash+0x98>)
 800022a:	613b      	str	r3, [r7, #16]
    FLASH_Unlock();                                                                            /* 每次擦除Flash中数据时得先解锁 */
 800022c:	f001 f90e 	bl	800144c <FLASH_Unlock>
    FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR); //清除标记
 8000230:	2035      	movs	r0, #53	; 0x35
 8000232:	f001 f97d 	bl	8001530 <FLASH_ClearFlag>

    // 页擦除
    for (i = 0; i < (sizeof(Config_Data_Str) / FLASH_Page_SIZE + 1); i++)
 8000236:	2300      	movs	r3, #0
 8000238:	82fb      	strh	r3, [r7, #22]
 800023a:	e00e      	b.n	800025a <Write_Config_To_Flash+0x3e>
        while (FLASH_COMPLETE != FLASH_ErasePage(CONFIG_DATA_FLASH_ADDR + i * FLASH_Page_SIZE))
 800023c:	bf00      	nop
 800023e:	8afb      	ldrh	r3, [r7, #22]
 8000240:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000244:	333f      	adds	r3, #63	; 0x3f
 8000246:	029b      	lsls	r3, r3, #10
 8000248:	4618      	mov	r0, r3
 800024a:	f001 f911 	bl	8001470 <FLASH_ErasePage>
 800024e:	4603      	mov	r3, r0
 8000250:	2b04      	cmp	r3, #4
 8000252:	d1f4      	bne.n	800023e <Write_Config_To_Flash+0x22>
    for (i = 0; i < (sizeof(Config_Data_Str) / FLASH_Page_SIZE + 1); i++)
 8000254:	8afb      	ldrh	r3, [r7, #22]
 8000256:	3301      	adds	r3, #1
 8000258:	82fb      	strh	r3, [r7, #22]
 800025a:	8afb      	ldrh	r3, [r7, #22]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0ed      	beq.n	800023c <Write_Config_To_Flash+0x20>
            ;

    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000260:	2300      	movs	r3, #0
 8000262:	82fb      	strh	r3, [r7, #22]
 8000264:	e01f      	b.n	80002a6 <Write_Config_To_Flash+0x8a>
    {
        while (FLASH_COMPLETE != FLASH_ProgramHalfWord(flash_addr, (data_ptr[i] + data_ptr[i + 1] * 256)))
 8000266:	bf00      	nop
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	4413      	add	r3, r2
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b29a      	uxth	r2, r3
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	3301      	adds	r3, #1
 8000276:	68f9      	ldr	r1, [r7, #12]
 8000278:	440b      	add	r3, r1
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	b29b      	uxth	r3, r3
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	b29b      	uxth	r3, r3
 8000282:	4413      	add	r3, r2
 8000284:	b29b      	uxth	r3, r3
 8000286:	4619      	mov	r1, r3
 8000288:	6938      	ldr	r0, [r7, #16]
 800028a:	f001 f923 	bl	80014d4 <FLASH_ProgramHalfWord>
 800028e:	4603      	mov	r3, r0
 8000290:	2b04      	cmp	r3, #4
 8000292:	d1e9      	bne.n	8000268 <Write_Config_To_Flash+0x4c>
            ;
        i++;
 8000294:	8afb      	ldrh	r3, [r7, #22]
 8000296:	3301      	adds	r3, #1
 8000298:	82fb      	strh	r3, [r7, #22]
        flash_addr += 2;
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	3302      	adds	r3, #2
 800029e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80002a0:	8afb      	ldrh	r3, [r7, #22]
 80002a2:	3301      	adds	r3, #1
 80002a4:	82fb      	strh	r3, [r7, #22]
 80002a6:	8afb      	ldrh	r3, [r7, #22]
 80002a8:	2b15      	cmp	r3, #21
 80002aa:	d9dc      	bls.n	8000266 <Write_Config_To_Flash+0x4a>
    }
}
 80002ac:	bf00      	nop
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	0800fc00 	.word	0x0800fc00

080002b8 <Read_Config_Form_Flash>:

void Read_Config_Form_Flash(Config_Data_Str *config)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *data_ptr = (u8 *)config;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	60fb      	str	r3, [r7, #12]
    u16 tmp_read;
    u32 flash_addr = CONFIG_DATA_FLASH_ADDR;
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <Read_Config_Form_Flash+0x74>)
 80002c6:	613b      	str	r3, [r7, #16]

    // 读取指定地址的数据
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80002c8:	2300      	movs	r3, #0
 80002ca:	82fb      	strh	r3, [r7, #22]
 80002cc:	e01c      	b.n	8000308 <Read_Config_Form_Flash+0x50>
    {
        tmp_read = *(vu16 *)(flash_addr);
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	817b      	strh	r3, [r7, #10]
        data_ptr[i] = tmp_read % 256;
 80002d4:	8afb      	ldrh	r3, [r7, #22]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	4413      	add	r3, r2
 80002da:	897a      	ldrh	r2, [r7, #10]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	701a      	strb	r2, [r3, #0]
        i++;
 80002e0:	8afb      	ldrh	r3, [r7, #22]
 80002e2:	3301      	adds	r3, #1
 80002e4:	82fb      	strh	r3, [r7, #22]
        if (i < sizeof(Config_Data_Str))
 80002e6:	8afb      	ldrh	r3, [r7, #22]
 80002e8:	2b15      	cmp	r3, #21
 80002ea:	d807      	bhi.n	80002fc <Read_Config_Form_Flash+0x44>
            data_ptr[i] = tmp_read / 256;
 80002ec:	897b      	ldrh	r3, [r7, #10]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b299      	uxth	r1, r3
 80002f2:	8afb      	ldrh	r3, [r7, #22]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	4413      	add	r3, r2
 80002f8:	b2ca      	uxtb	r2, r1
 80002fa:	701a      	strb	r2, [r3, #0]

        flash_addr += 2;
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	3302      	adds	r3, #2
 8000300:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000302:	8afb      	ldrh	r3, [r7, #22]
 8000304:	3301      	adds	r3, #1
 8000306:	82fb      	strh	r3, [r7, #22]
 8000308:	8afb      	ldrh	r3, [r7, #22]
 800030a:	2b15      	cmp	r3, #21
 800030c:	d9df      	bls.n	80002ce <Read_Config_Form_Flash+0x16>
    }

    //判断是否为第一次启动
    if (config->save_data_flag != 1)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	7d1b      	ldrb	r3, [r3, #20]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d005      	beq.n	8000322 <Read_Config_Form_Flash+0x6a>
    {
        Config_Data_ReInit(config);    //重置所有参数
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f7ff ff64 	bl	80001e4 <Config_Data_ReInit>
        Write_Config_To_Flash(config); //回写参数到flash
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ff7d 	bl	800021c <Write_Config_To_Flash>
    }
}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	0800fc00 	.word	0x0800fc00

08000330 <Cpu_GetId>:

//读取ChipID
void Cpu_GetId(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
    STM32_ID.id_u32[0] = *(__IO u32 *)(0x1FFFF7E8); //产品唯一身份标识寄存器(96位)
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <Cpu_GetId+0x24>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <Cpu_GetId+0x28>)
 800033a:	6013      	str	r3, [r2, #0]
    STM32_ID.id_u32[1] = *(__IO u32 *)(0x1FFFF7EC);
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <Cpu_GetId+0x2c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <Cpu_GetId+0x28>)
 8000342:	6053      	str	r3, [r2, #4]
    STM32_ID.id_u32[2] = *(__IO u32 *)(0x1FFFF7F0);
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <Cpu_GetId+0x30>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a03      	ldr	r2, [pc, #12]	; (8000358 <Cpu_GetId+0x28>)
 800034a:	6093      	str	r3, [r2, #8]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	1ffff7e8 	.word	0x1ffff7e8
 8000358:	20000668 	.word	0x20000668
 800035c:	1ffff7ec 	.word	0x1ffff7ec
 8000360:	1ffff7f0 	.word	0x1ffff7f0

08000364 <RCC_Configuration>:

void RCC_Configuration(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
    ErrorStatus HSEStartUpStatus;

    RCC_DeInit();
 800036a:	f001 fa43 	bl	80017f4 <RCC_DeInit>
    RCC_HSEConfig(RCC_HSE_ON);
 800036e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000372:	f001 fa6d 	bl	8001850 <RCC_HSEConfig>
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000376:	f001 fa99 	bl	80018ac <RCC_WaitForHSEStartUp>
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
    if (HSEStartUpStatus == SUCCESS)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d122      	bne.n	80003ca <RCC_Configuration+0x66>
    {
        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000384:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000388:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800038c:	f001 fab6 	bl	80018fc <RCC_PLLConfig>
        RCC_PLLCmd(ENABLE);
 8000390:	2001      	movs	r0, #1
 8000392:	f001 fad1 	bl	8001938 <RCC_PLLCmd>
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY == RESET))
 8000396:	bf00      	nop
 8000398:	2000      	movs	r0, #0
 800039a:	f001 fca1 	bl	8001ce0 <RCC_GetFlagStatus>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f9      	bne.n	8000398 <RCC_Configuration+0x34>
        {
        }
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80003a4:	2002      	movs	r0, #2
 80003a6:	f001 fad7 	bl	8001958 <RCC_SYSCLKConfig>

        RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80003aa:	2000      	movs	r0, #0
 80003ac:	f001 fafe 	bl	80019ac <RCC_HCLKConfig>
        RCC_PCLK1Config(RCC_HCLK_Div2);
 80003b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80003b4:	f001 fb16 	bl	80019e4 <RCC_PCLK1Config>
        RCC_PCLK2Config(RCC_HCLK_Div1); //串口波特率的确定
 80003b8:	2000      	movs	r0, #0
 80003ba:	f001 fb2f 	bl	8001a1c <RCC_PCLK2Config>

        while (RCC_GetSYSCLKSource() != 0x08)
 80003be:	bf00      	nop
 80003c0:	f001 fae6 	bl	8001990 <RCC_GetSYSCLKSource>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1fa      	bne.n	80003c0 <RCC_Configuration+0x5c>
        {
        }
    }
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <NVIC_Configuration>:

static void NVIC_Configuration(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	af00      	add	r7, sp, #0
#ifdef VETB_TAB_RAM
    NVYC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
 80003d6:	2100      	movs	r1, #0
 80003d8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80003dc:	f000 fd54 	bl	8000e88 <NVIC_SetVectorTable>
#endif
    /* Configure one bit for preemption priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 80003e0:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80003e4:	f000 fcdc 	bl	8000da0 <NVIC_PriorityGroupConfig>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <hw_board_init>:

void hw_board_init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    RCC_Configuration();  // 初始化时钟
 80003f0:	f7ff ffb8 	bl	8000364 <RCC_Configuration>
    NVIC_Configuration(); // 初始化向量中断
 80003f4:	f7ff ffed 	bl	80003d2 <NVIC_Configuration>

    //启动系统时钟信号，设置时间为1ms
    SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); //AHB=72M/8=9M
 80003f8:	f06f 0004 	mvn.w	r0, #4
 80003fc:	f000 fd5a 	bl	8000eb4 <SysTick_CLKSourceConfig>
    SysTick_Config(SYSTICK_TICK);
 8000400:	f242 3028 	movw	r0, #9000	; 0x2328
 8000404:	f7ff fecc 	bl	80001a0 <SysTick_Config>

    Cpu_GetId();                          //网关物理地址
 8000408:	f7ff ff92 	bl	8000330 <Cpu_GetId>
    Read_Config_Form_Flash(&Config_Data); //载入保存的25个Net_ID
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <hw_board_init+0x2c>)
 800040e:	f7ff ff53 	bl	80002b8 <Read_Config_Form_Flash>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000674 	.word	0x20000674

0800041c <USB_HP_CAN1_TX_IRQHandler>:
	CAN_FilterInit(&CAN_FilterInitStructure);
}

//CAN1 Send IRQ
void USB_HP_CAN1_TX_IRQHandler(void) //CAN1发送中断
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <USB_LP_CAN1_RX0_IRQHandler>:

//CAN1 RX0 IRQ
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	CanRxMsg RxMessage;

	RxMessage.IDE = CAN_ID_EXT;
 800042e:	2304      	movs	r3, #4
 8000430:	733b      	strb	r3, [r7, #12]
	CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	461a      	mov	r2, r3
 8000436:	2100      	movs	r1, #0
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <USB_LP_CAN1_RX0_IRQHandler+0x30>)
 800043a:	f000 fd57 	bl	8000eec <CAN_Receive>

	can_rx_isr_hook(&RxMessage); // 对接收的数据进行处理
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4618      	mov	r0, r3
 8000442:	f3af 8000 	nop.w

	CAN_ClearITPendingBit(CAN1, CAN_IT_FMP0);
 8000446:	2102      	movs	r1, #2
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <USB_LP_CAN1_RX0_IRQHandler+0x30>)
 800044a:	f000 fe0d 	bl	8001068 <CAN_ClearITPendingBit>
}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40006400 	.word	0x40006400

0800045c <RCC_Configuration>:

#include "gpio.h"


static void RCC_Configuration(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000460:	2101      	movs	r1, #1
 8000462:	2008      	movs	r0, #8
 8000464:	f001 fbc4 	bl	8001bf0 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000468:	2101      	movs	r1, #1
 800046a:	2010      	movs	r0, #16
 800046c:	f001 fbc0 	bl	8001bf0 <RCC_APB2PeriphClockCmd>
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}

08000474 <GPIO_Configuration>:


static void GPIO_Configuration(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800047a:	2303      	movs	r3, #3
 800047c:	71bb      	strb	r3, [r7, #6]

  /* Configure USART Rx/tx PIN */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800047e:	2310      	movs	r3, #16
 8000480:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8000482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000486:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	4619      	mov	r1, r3
 800048c:	480a      	ldr	r0, [pc, #40]	; (80004b8 <GPIO_Configuration+0x44>)
 800048e:	f001 f8a9 	bl	80015e4 <GPIO_Init>
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	4809      	ldr	r0, [pc, #36]	; (80004bc <GPIO_Configuration+0x48>)
 8000498:	f001 f8a4 	bl	80015e4 <GPIO_Init>

  GPIO_SetBits(GPIOB, GPIO_Pin_13);
 800049c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a0:	4805      	ldr	r0, [pc, #20]	; (80004b8 <GPIO_Configuration+0x44>)
 80004a2:	f001 f974 	bl	800178e <GPIO_SetBits>
  GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 80004a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004aa:	4804      	ldr	r0, [pc, #16]	; (80004bc <GPIO_Configuration+0x48>)
 80004ac:	f001 f97d 	bl	80017aa <GPIO_ResetBits>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	40011000 	.word	0x40011000

080004c0 <hw_gpio_init>:

void hw_gpio_init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  RCC_Configuration();
 80004c4:	f7ff ffca 	bl	800045c <RCC_Configuration>
  GPIO_Configuration();
 80004c8:	f7ff ffd4 	bl	8000474 <GPIO_Configuration>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <RCC_Configuration>:
#define UART3_GPIO_TX GPIO_Pin_10
#define UART3_GPIO_RX GPIO_Pin_11
#define UART3_GPIO GPIOB

static void RCC_Configuration(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Enable UART GPIO clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 80004d4:	2101      	movs	r1, #1
 80004d6:	2005      	movs	r0, #5
 80004d8:	f001 fb8a 	bl	8001bf0 <RCC_APB2PeriphClockCmd>
  /* Enable UART clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80004dc:	2101      	movs	r1, #1
 80004de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80004e2:	f001 fb85 	bl	8001bf0 <RCC_APB2PeriphClockCmd>

  /* Enable UART GPIO clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 80004e6:	2101      	movs	r1, #1
 80004e8:	2005      	movs	r0, #5
 80004ea:	f001 fb81 	bl	8001bf0 <RCC_APB2PeriphClockCmd>
  /* Enable UART clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80004ee:	2101      	movs	r1, #1
 80004f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004f4:	f001 fb9a 	bl	8001c2c <RCC_APB1PeriphClockCmd>

  /* Enable UART GPIO clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 80004f8:	2101      	movs	r1, #1
 80004fa:	2009      	movs	r0, #9
 80004fc:	f001 fb78 	bl	8001bf0 <RCC_APB2PeriphClockCmd>
  /* Enable UART clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000500:	2101      	movs	r1, #1
 8000502:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000506:	f001 fb91 	bl	8001c2c <RCC_APB1PeriphClockCmd>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}

0800050e <NVIC_Configuration>:

static void NVIC_Configuration(void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the USART1 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;         //通道设置为串口1中断（故后面应选择在“void USART1_IRQHandler(void)”开中断）
 8000514:	2325      	movs	r3, #37	; 0x25
 8000516:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //中断占先等级0
 8000518:	2300      	movs	r3, #0
 800051a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;        //中断响应优先级0
 800051c:	2301      	movs	r3, #1
 800051e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;           //打开中断
 8000520:	2301      	movs	r3, #1
 8000522:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fc4c 	bl	8000dc4 <NVIC_Init>

  //DMA发送中断设置
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel4_IRQn;
 800052c:	230e      	movs	r3, #14
 800052e:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8000534:	2302      	movs	r3, #2
 8000536:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000538:	2301      	movs	r3, #1
 800053a:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fc40 	bl	8000dc4 <NVIC_Init>

  /* Enable the USART2 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;         //通道设置为串口1中断（故后面应选择在“void USART1_IRQHandler(void)”开中断）
 8000544:	2326      	movs	r3, #38	; 0x26
 8000546:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //中断占先等级0
 8000548:	2300      	movs	r3, #0
 800054a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;        //中断响应优先级0
 800054c:	2304      	movs	r3, #4
 800054e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;           //打开中断
 8000550:	2301      	movs	r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fc34 	bl	8000dc4 <NVIC_Init>

  //DMA发送中断设置
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel7_IRQn;
 800055c:	2311      	movs	r3, #17
 800055e:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
 8000564:	2305      	movs	r3, #5
 8000566:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000568:	2301      	movs	r3, #1
 800056a:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fc28 	bl	8000dc4 <NVIC_Init>

  /* Enable the USART3 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;         //通道设置为串口1中断（故后面应选择在“void USART1_IRQHandler(void)”开中断）
 8000574:	2327      	movs	r3, #39	; 0x27
 8000576:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //中断占先等级0
 8000578:	2300      	movs	r3, #0
 800057a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 6;        //中断响应优先级0
 800057c:	2306      	movs	r3, #6
 800057e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;           //打开中断
 8000580:	2301      	movs	r3, #1
 8000582:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fc1c 	bl	8000dc4 <NVIC_Init>

  //DMA发送中断设置
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel2_IRQn;
 800058c:	230c      	movs	r3, #12
 800058e:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 7;
 8000594:	2307      	movs	r3, #7
 8000596:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000598:	2301      	movs	r3, #1
 800059a:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fc10 	bl	8000dc4 <NVIC_Init>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <GPIO_Configuration>:

static void GPIO_Configuration(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005b2:	2303      	movs	r3, #3
 80005b4:	71bb      	strb	r3, [r7, #6]

  /* Configure USART Rx/tx PIN */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80005b6:	2304      	movs	r3, #4
 80005b8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART1_GPIO_RX;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART1_GPIO, &GPIO_InitStructure);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4619      	mov	r1, r3
 80005c4:	481b      	ldr	r0, [pc, #108]	; (8000634 <GPIO_Configuration+0x88>)
 80005c6:	f001 f80d 	bl	80015e4 <GPIO_Init>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80005ca:	2318      	movs	r3, #24
 80005cc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART1_GPIO_TX;
 80005ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d2:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART1_GPIO, &GPIO_InitStructure);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4619      	mov	r1, r3
 80005d8:	4816      	ldr	r0, [pc, #88]	; (8000634 <GPIO_Configuration+0x88>)
 80005da:	f001 f803 	bl	80015e4 <GPIO_Init>

  /* Configure USART Rx/tx PIN */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80005de:	2304      	movs	r3, #4
 80005e0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART2_GPIO_RX;
 80005e2:	2308      	movs	r3, #8
 80005e4:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART2_GPIO, &GPIO_InitStructure);
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	4812      	ldr	r0, [pc, #72]	; (8000634 <GPIO_Configuration+0x88>)
 80005ec:	f000 fffa 	bl	80015e4 <GPIO_Init>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80005f0:	2318      	movs	r3, #24
 80005f2:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART2_GPIO_TX;
 80005f4:	2304      	movs	r3, #4
 80005f6:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART2_GPIO, &GPIO_InitStructure);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <GPIO_Configuration+0x88>)
 80005fe:	f000 fff1 	bl	80015e4 <GPIO_Init>

  /* Configure USART Rx/tx PIN */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000602:	2304      	movs	r3, #4
 8000604:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART3_GPIO_RX;
 8000606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800060a:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART3_GPIO, &GPIO_InitStructure);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <GPIO_Configuration+0x8c>)
 8000612:	f000 ffe7 	bl	80015e4 <GPIO_Init>

  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000616:	2318      	movs	r3, #24
 8000618:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = UART3_GPIO_TX;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(UART3_GPIO, &GPIO_InitStructure);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4619      	mov	r1, r3
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <GPIO_Configuration+0x8c>)
 8000626:	f000 ffdd 	bl	80015e4 <GPIO_Init>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40010800 	.word	0x40010800
 8000638:	40010c00 	.word	0x40010c00

0800063c <UART_Configuration>:

static void UART_Configuration(struct uart_device *uart, struct uart_configure *cfg)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  USART_InitTypeDef USART_InitStructure;
  USART_ClockInitTypeDef USART_ClockInitStructure;

  USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;     //提升USART时钟时使能还是失能，钟低电平活动
 8000646:	2300      	movs	r3, #0
 8000648:	813b      	strh	r3, [r7, #8]
  USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;           //指定SLCK引脚上时钟的极性
 800064a:	2300      	movs	r3, #0
 800064c:	817b      	strh	r3, [r7, #10]
  USART_ClockInitStructure.USART_CPHA = USART_CPHA_2Edge;         //时钟第二个边缘进行数据捕获
 800064e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000652:	81bb      	strh	r3, [r7, #12]
  USART_ClockInitStructure.USART_LastBit = USART_LastBit_Disable; //在SCLK引脚上输出最后发送的那个数据字的脉冲不从SCLK输出
 8000654:	2300      	movs	r3, #0
 8000656:	81fb      	strh	r3, [r7, #14]
  USART_ClockInit(uart->uartx, &USART_ClockInitStructure);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f107 0208 	add.w	r2, r7, #8
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fc8c 	bl	8001f80 <USART_ClockInit>

  USART_DeInit(uart->uartx);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fb71 	bl	8001d54 <USART_DeInit>

  USART_InitStructure.USART_BaudRate = cfg->baud_rate;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	613b      	str	r3, [r7, #16]
  if (cfg->data_bits == DATA_BITS_8)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	f003 030f 	and.w	r3, r3, #15
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b08      	cmp	r3, #8
 8000684:	d102      	bne.n	800068c <UART_Configuration+0x50>
  {
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000686:	2300      	movs	r3, #0
 8000688:	82bb      	strh	r3, [r7, #20]
 800068a:	e009      	b.n	80006a0 <UART_Configuration+0x64>
  }
  else if (cfg->data_bits == DATA_BITS_9)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	f003 030f 	and.w	r3, r3, #15
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b09      	cmp	r3, #9
 8000698:	d102      	bne.n	80006a0 <UART_Configuration+0x64>
  {
    USART_InitStructure.USART_WordLength = USART_WordLength_9b;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	82bb      	strh	r3, [r7, #20]
  }

  if (cfg->stop_bits == STOP_BITS_1)
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d102      	bne.n	80006b4 <UART_Configuration+0x78>
  {
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	82fb      	strh	r3, [r7, #22]
 80006b2:	e014      	b.n	80006de <UART_Configuration+0xa2>
  }
  else if (cfg->stop_bits == STOP_BITS_1_5)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b10      	cmp	r3, #16
 80006c0:	d103      	bne.n	80006ca <UART_Configuration+0x8e>
  {
    USART_InitStructure.USART_StopBits = USART_StopBits_1_5;
 80006c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006c6:	82fb      	strh	r3, [r7, #22]
 80006c8:	e009      	b.n	80006de <UART_Configuration+0xa2>
  }
  else if (cfg->stop_bits == STOP_BITS_2)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b20      	cmp	r3, #32
 80006d6:	d102      	bne.n	80006de <UART_Configuration+0xa2>
  {
    USART_InitStructure.USART_StopBits = USART_StopBits_2;
 80006d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006dc:	82fb      	strh	r3, [r7, #22]
  }

  if (cfg->parity == PARITY_NONE)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <UART_Configuration+0xb6>
  {
    USART_InitStructure.USART_Parity = USART_Parity_No;
 80006ec:	2300      	movs	r3, #0
 80006ee:	833b      	strh	r3, [r7, #24]
 80006f0:	e014      	b.n	800071c <UART_Configuration+0xe0>
  }
  else if (cfg->parity == PARITY_ODD)
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b40      	cmp	r3, #64	; 0x40
 80006fe:	d103      	bne.n	8000708 <UART_Configuration+0xcc>
  {
    USART_InitStructure.USART_Parity = USART_Parity_Odd;
 8000700:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000704:	833b      	strh	r3, [r7, #24]
 8000706:	e009      	b.n	800071c <UART_Configuration+0xe0>
  }
  else if (cfg->parity == PARITY_EVEN)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b80      	cmp	r3, #128	; 0x80
 8000714:	d102      	bne.n	800071c <UART_Configuration+0xe0>
  {
    USART_InitStructure.USART_Parity = USART_Parity_Even;
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	833b      	strh	r3, [r7, #24]
  }
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800071c:	2300      	movs	r3, #0
 800071e:	83bb      	strh	r3, [r7, #28]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000720:	230c      	movs	r3, #12
 8000722:	837b      	strh	r3, [r7, #26]
  USART_Init(uart->uartx, &USART_InitStructure);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fb6c 	bl	8001e0c <USART_Init>

  //串口采用DMA发送
  USART_DMACmd(uart->uartx, USART_DMAReq_Tx, ENABLE);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2201      	movs	r2, #1
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fcb0 	bl	80020a2 <USART_DMACmd>
  USART_ITConfig(uart->uartx, USART_IT_RXNE, ENABLE);  // 接收中断使能
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2201      	movs	r2, #1
 8000748:	f240 5125 	movw	r1, #1317	; 0x525
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fc61 	bl	8002014 <USART_ITConfig>
  USART_ClearITPendingBit(uart->uartx, USART_IT_RXNE); // 清除接收完成中断
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f240 5125 	movw	r1, #1317	; 0x525
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fd2d 	bl	80021ba <USART_ClearITPendingBit>
  /* Enable USART */
  USART_Cmd(uart->uartx, ENABLE);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2101      	movs	r1, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fc35 	bl	8001fd6 <USART_Cmd>
}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <UART_DMA_Tx_Config>:
}
#endif

#ifdef USE_USART_DMA_TX
static void UART_DMA_Tx_Config(struct uart_data *pdata)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  DMA_InitTypeDef DMA_InitStructure;
  struct uart_device *uart = pdata->uart_device;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	637b      	str	r3, [r7, #52]	; 0x34

  //启动DMA时钟
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8000782:	2101      	movs	r1, #1
 8000784:	2001      	movs	r0, #1
 8000786:	f001 fa15 	bl	8001bb4 <RCC_AHBPeriphClockCmd>

  //通道配置
  DMA_DeInit(uart->dma_tx.tx_ch);
 800078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fcd8 	bl	8001144 <DMA_DeInit>
  //外设地址
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (uart->uartx->DR);
 8000794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3304      	adds	r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
  //内存地址
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pdata->stream_tx;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3374      	adds	r3, #116	; 0x74
 80007a0:	60fb      	str	r3, [r7, #12]
  //dma传输方向单向
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 80007a2:	2310      	movs	r3, #16
 80007a4:	613b      	str	r3, [r7, #16]
  //设置DMA在传输时缓冲区的长度
  DMA_InitStructure.DMA_BufferSize = UART_DMA_RB_BUFSZ;
 80007a6:	236c      	movs	r3, #108	; 0x6c
 80007a8:	617b      	str	r3, [r7, #20]
  //设置DMA的外设递增模式，一个外设
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  //设置DMA的内存递增模式
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80007ae:	2380      	movs	r3, #128	; 0x80
 80007b0:	61fb      	str	r3, [r7, #28]
  //外设数据字长
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  //内存数据字长
  DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  // DMA模式，一次或者循环模式
  //DMA_InitStructure.DMA_Mode = DMA_Mode_Normal ;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80007ba:	2320      	movs	r3, #32
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  //设置DMA的优先级别
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80007be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //设置DMA的2个memory中的变量互相访问
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30

  DMA_Init(uart->dma_tx.tx_ch, &DMA_InitStructure);
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	f107 0208 	add.w	r2, r7, #8
 80007d0:	4611      	mov	r1, r2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fd72 	bl	80012bc <DMA_Init>
  // 清除DMA标志
  //  DMA_ClearFlag(uart->dma_tx.tx_gl_flag);
  DMA_ITConfig(uart->dma_tx.tx_ch, DMA_IT_TC, ENABLE); // dma传输中断
 80007d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	2201      	movs	r2, #1
 80007de:	2102      	movs	r1, #2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fdc5 	bl	8001370 <DMA_ITConfig>
  DMA_Cmd(uart->dma_tx.tx_ch, DISABLE);
 80007e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fda3 	bl	8001338 <DMA_Cmd>
}
 80007f2:	bf00      	nop
 80007f4:	3738      	adds	r7, #56	; 0x38
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <uart_isr>:
#endif

static void uart_isr(struct uart_data *puart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  USART_TypeDef *uart = puart->uart_device->uartx;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	60fb      	str	r3, [r7, #12]

  if (USART_GetITStatus(uart, USART_IT_RXNE) != RESET)
 800080c:	f240 5125 	movw	r1, #1317	; 0x525
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f001 fc78 	bl	8002106 <USART_GetITStatus>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d039      	beq.n	8000890 <uart_isr+0x94>
  {
    if (uart_getFlagStatus(uart, UART_FLAG_RC) == false)
 800081c:	2104      	movs	r1, #4
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f000 f930 	bl	8000a84 <uart_getFlagStatus>
 8000824:	4603      	mov	r3, r0
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d02a      	beq.n	8000886 <uart_isr+0x8a>
    {
      puart->stream_rx[puart->rx_index] = (uint8_t)USART_ReceiveData(uart);
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f001 fc59 	bl	80020e8 <USART_ReceiveData>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	799b      	ldrb	r3, [r3, #6]
 800083e:	4619      	mov	r1, r3
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	440b      	add	r3, r1
 8000846:	721a      	strb	r2, [r3, #8]
      ++puart->rx_index;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	799b      	ldrb	r3, [r3, #6]
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	719a      	strb	r2, [r3, #6]
      puart->rx_index = puart->rx_index % UART_DMA_RB_BUFSZ;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	799b      	ldrb	r3, [r3, #6]
 8000858:	089a      	lsrs	r2, r3, #2
 800085a:	4924      	ldr	r1, [pc, #144]	; (80008ec <uart_isr+0xf0>)
 800085c:	fba1 1202 	umull	r1, r2, r1, r2
 8000860:	08d2      	lsrs	r2, r2, #3
 8000862:	216c      	movs	r1, #108	; 0x6c
 8000864:	fb01 f202 	mul.w	r2, r1, r2
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	b2da      	uxtb	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	719a      	strb	r2, [r3, #6]

      if (puart->rx_index == puart->recv_len)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	799a      	ldrb	r2, [r3, #6]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	79db      	ldrb	r3, [r3, #7]
 8000878:	429a      	cmp	r2, r3
 800087a:	d104      	bne.n	8000886 <uart_isr+0x8a>
        __uart_setflag(uart, UART_FLAG_RC, true);
 800087c:	2201      	movs	r2, #1
 800087e:	2104      	movs	r1, #4
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f000 f8cb 	bl	8000a1c <__uart_setflag>
    }
    /* clear interrupt */
    USART_ClearITPendingBit(uart, USART_IT_RXNE);
 8000886:	f240 5125 	movw	r1, #1317	; 0x525
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f001 fc95 	bl	80021ba <USART_ClearITPendingBit>
  {
  }
#endif

  /* 一帧数据发送完成后，并且TXE=1时即数据已经被转移到移位寄存器中， USART_CR1中的TCIE为1产生中断*/
  if (USART_GetITStatus(uart, USART_IT_TC) != RESET)
 8000890:	f240 6126 	movw	r1, #1574	; 0x626
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f001 fc36 	bl	8002106 <USART_GetITStatus>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d011      	beq.n	80008c4 <uart_isr+0xc8>
  {
    // 传输完成，将其UART_FLAG_xx_TC复位
#ifdef USE_USART_DMA_TX
    __uart_setflag(uart, UART_FLAG_DMA_TC, false);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	f000 f8b9 	bl	8000a1c <__uart_setflag>
#elif
    __uart_setflag(uart, UART_FLAG_TC, false);
#endif

    /* clear interrupt */
    uart_tc_isr_hook();
 80008aa:	f000 fa65 	bl	8000d78 <uart_tc_isr_hook>
    USART_ClearITPendingBit(uart, USART_IT_TC);
 80008ae:	f240 6126 	movw	r1, #1574	; 0x626
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f001 fc81 	bl	80021ba <USART_ClearITPendingBit>
    USART_ITConfig(uart, USART_IT_TC, DISABLE);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f240 6126 	movw	r1, #1574	; 0x626
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f001 fba8 	bl	8002014 <USART_ITConfig>
  }

  if (USART_GetITStatus(uart, USART_IT_TXE) != RESET)
 80008c4:	f240 7127 	movw	r1, #1831	; 0x727
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f001 fc1c 	bl	8002106 <USART_GetITStatus>
  {
  }

  /* 检测到过载错误，当RXNE仍是1时，当前被接收在移位寄存器中的数据，需要传送至RDR寄存器是，硬件将该位 置位 */
  if (USART_GetITStatus(uart, USART_FLAG_ORE) == SET)
 80008ce:	2108      	movs	r1, #8
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f001 fc18 	bl	8002106 <USART_GetITStatus>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d102      	bne.n	80008e2 <uart_isr+0xe6>
  {
    USART_ReceiveData(uart);
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f001 fc03 	bl	80020e8 <USART_ReceiveData>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	4bda12f7 	.word	0x4bda12f7

080008f0 <dma_isr>:

static void dma_isr(struct uart_data *puart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  struct uart_dma_tx *dma_tx = &puart->uart_device->dma_tx;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3308      	adds	r3, #8
 80008fe:	60fb      	str	r3, [r7, #12]

  if (DMA_GetITStatus(dma_tx->tx_tc_IT) != RESET)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fd79 	bl	80013fc <DMA_GetITStatus>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d035      	beq.n	800097c <dma_isr+0x8c>
  {
    if (puart->uart_device->uartx == USART3)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <dma_isr+0x94>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d110      	bne.n	800093e <dma_isr+0x4e>
    {
      USART_ClearITPendingBit(puart->uart_device->uartx, USART_IT_TC);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f240 6126 	movw	r1, #1574	; 0x626
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fc47 	bl	80021ba <USART_ClearITPendingBit>
      USART_ITConfig(puart->uart_device->uartx, USART_IT_TC, ENABLE); // 传输中断使能
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2201      	movs	r2, #1
 8000934:	f240 6126 	movw	r1, #1574	; 0x626
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fb6b 	bl	8002014 <USART_ITConfig>
    }

    NET_LED_TRIGGLE;
 800093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <dma_isr+0x98>)
 8000944:	f000 ff0a 	bl	800175c <GPIO_ReadOutputDataBit>
 8000948:	4603      	mov	r3, r0
 800094a:	f1c3 0301 	rsb	r3, r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	461a      	mov	r2, r3
 8000952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000956:	480c      	ldr	r0, [pc, #48]	; (8000988 <dma_isr+0x98>)
 8000958:	f000 ff35 	bl	80017c6 <GPIO_WriteBit>
    uart_dmaisr_hook();
 800095c:	f3af 8000 	nop.w
    puart->tx_flag = false; // 使能再次发送
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
    DMA_Cmd(dma_tx->tx_ch, DISABLE);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fce3 	bl	8001338 <DMA_Cmd>
    DMA_ClearFlag(dma_tx->tx_gl_flag);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fd26 	bl	80013c8 <DMA_ClearFlag>
  }
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40004800 	.word	0x40004800
 8000988:	40010c00 	.word	0x40010c00

0800098c <USART1_IRQHandler>:
    .rx_index = 0,
    .recv_len = 2,
};

void USART1_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  uart_isr(&duart1);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <USART1_IRQHandler+0x10>)
 8000992:	f7ff ff33 	bl	80007fc <uart_isr>
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000020 	.word	0x20000020

080009a0 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  dma_isr(&duart1);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <DMA1_Channel4_IRQHandler+0x10>)
 80009a6:	f7ff ffa3 	bl	80008f0 <dma_isr>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000020 	.word	0x20000020

080009b4 <USART3_IRQHandler>:
    .rx_index = 0,
    .recv_len = 2,
};

void USART3_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  uart_isr(&duart3);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <USART3_IRQHandler+0x10>)
 80009ba:	f7ff ff1f 	bl	80007fc <uart_isr>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000120 	.word	0x20000120

080009c8 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  dma_isr(&duart3);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <DMA1_Channel2_IRQHandler+0x10>)
 80009ce:	f7ff ff8f 	bl	80008f0 <dma_isr>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000120 	.word	0x20000120

080009dc <__get_duartx>:
 * @description: 
 * @param {type} 
 * @return {type} 
 */
struct uart_data *__get_duartx(USART_TypeDef *uartx)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  struct uart_data *pstream;

#ifdef USING_UART1
  if (USART1 == uartx)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <__get_duartx+0x30>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d102      	bne.n	80009f2 <__get_duartx+0x16>
    pstream = &duart1;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <__get_duartx+0x34>)
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e005      	b.n	80009fe <__get_duartx+0x22>
#ifdef USING_UART2
  else if (USART2 == uartx)
    pstream = &duart2;
#endif
#ifdef USING_UART3
  else if (USART3 == uartx)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <__get_duartx+0x38>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <__get_duartx+0x22>
    pstream = &duart3;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <__get_duartx+0x3c>)
 80009fc:	60fb      	str	r3, [r7, #12]
#endif

  return pstream;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40013800 	.word	0x40013800
 8000a10:	20000020 	.word	0x20000020
 8000a14:	40004800 	.word	0x40004800
 8000a18:	20000120 	.word	0x20000120

08000a1c <__uart_setflag>:
 * @description: 内部函数，提供修改相关FLAG状态
 * @param {type} 
 * @return {type} 
 */
void __uart_setflag(USART_TypeDef *uartx, enum UART_FLAG uflag, bool status)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	70fb      	strb	r3, [r7, #3]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	70bb      	strb	r3, [r7, #2]
  struct uart_data *pstream = __get_duartx(uartx);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ffd5 	bl	80009dc <__get_duartx>
 8000a32:	60f8      	str	r0, [r7, #12]

  switch (uflag)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	d81d      	bhi.n	8000a78 <__uart_setflag+0x5c>
 8000a3c:	a201      	add	r2, pc, #4	; (adr r2, 8000a44 <__uart_setflag+0x28>)
 8000a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a42:	bf00      	nop
 8000a44:	08000a59 	.word	0x08000a59
 8000a48:	08000a61 	.word	0x08000a61
 8000a4c:	08000a69 	.word	0x08000a69
 8000a50:	08000a71 	.word	0x08000a71
 8000a54:	08000a79 	.word	0x08000a79
  {
  case UART_FLAG_DMA_TC:
    pstream->tx_flag = status;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	78ba      	ldrb	r2, [r7, #2]
 8000a5c:	715a      	strb	r2, [r3, #5]
    break;
 8000a5e:	e00c      	b.n	8000a7a <__uart_setflag+0x5e>

  case UART_FLAG_DMA_RC:
    pstream->rx_flag = status;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	78ba      	ldrb	r2, [r7, #2]
 8000a64:	711a      	strb	r2, [r3, #4]
    break;
 8000a66:	e008      	b.n	8000a7a <__uart_setflag+0x5e>

  case UART_FLAG_TC:
    pstream->tx_flag = status;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	78ba      	ldrb	r2, [r7, #2]
 8000a6c:	715a      	strb	r2, [r3, #5]
    break;
 8000a6e:	e004      	b.n	8000a7a <__uart_setflag+0x5e>

  case UART_FLAG_RC:
    pstream->rx_flag = status;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	78ba      	ldrb	r2, [r7, #2]
 8000a74:	711a      	strb	r2, [r3, #4]
    break;
 8000a76:	e000      	b.n	8000a7a <__uart_setflag+0x5e>

  case UART_FLAG_IDLE:
    break;

  default:
    break;
 8000a78:	bf00      	nop
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop

08000a84 <uart_getFlagStatus>:

bool uart_getFlagStatus(USART_TypeDef *uartx, enum UART_FLAG uflag)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]
  struct uart_data *pstream = __get_duartx(uartx);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ffa1 	bl	80009dc <__get_duartx>
 8000a9a:	60b8      	str	r0, [r7, #8]

  switch (uflag)
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d85e      	bhi.n	8000b62 <uart_getFlagStatus+0xde>
 8000aa4:	a201      	add	r2, pc, #4	; (adr r2, 8000aac <uart_getFlagStatus+0x28>)
 8000aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aaa:	bf00      	nop
 8000aac:	08000ac1 	.word	0x08000ac1
 8000ab0:	08000ae1 	.word	0x08000ae1
 8000ab4:	08000b01 	.word	0x08000b01
 8000ab8:	08000b21 	.word	0x08000b21
 8000abc:	08000b41 	.word	0x08000b41
  {
  case UART_FLAG_DMA_TC:
    ret = (pstream->tx_flag == false) ? true : false;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	795b      	ldrb	r3, [r3, #5]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f083 0301 	eor.w	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
    break;
 8000ade:	e043      	b.n	8000b68 <uart_getFlagStatus+0xe4>

  case UART_FLAG_DMA_RC:
    ret = (pstream->rx_flag == false) ? true : false;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf14      	ite	ne
 8000ae8:	2301      	movne	r3, #1
 8000aea:	2300      	moveq	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f083 0301 	eor.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	73fb      	strb	r3, [r7, #15]
    break;
 8000afe:	e033      	b.n	8000b68 <uart_getFlagStatus+0xe4>

  case UART_FLAG_TC:
    ret = (pstream->tx_flag == false) ? true : false;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	795b      	ldrb	r3, [r3, #5]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f083 0301 	eor.w	r3, r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	73fb      	strb	r3, [r7, #15]
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8000b1e:	e023      	b.n	8000b68 <uart_getFlagStatus+0xe4>

  case UART_FLAG_RC:
    ret = (pstream->rx_flag == false) ? true : false;
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	791b      	ldrb	r3, [r3, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f083 0301 	eor.w	r3, r3, #1
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8000b3e:	e013      	b.n	8000b68 <uart_getFlagStatus+0xe4>

  case UART_FLAG_IDLE:
    if ((pstream->tx_flag == false) && (pstream->rx_flag == false))
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	795b      	ldrb	r3, [r3, #5]
 8000b44:	f083 0301 	eor.w	r3, r3, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <uart_getFlagStatus+0xe2>
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	f083 0301 	eor.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d004      	beq.n	8000b66 <uart_getFlagStatus+0xe2>
      ret = true;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8000b60:	e001      	b.n	8000b66 <uart_getFlagStatus+0xe2>

  default:
    break;
 8000b62:	bf00      	nop
 8000b64:	e000      	b.n	8000b68 <uart_getFlagStatus+0xe4>
    break;
 8000b66:	bf00      	nop
  }

  return ret;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop

08000b74 <uart_SetRead_Size>:
 * @description: 设置需要接收的字节长度，建议在使用uart_write给设备发送信息之前，设置设备返回的数据字节长度
 * @param {type} 
 * @return {type} 
 */
int16_t uart_SetRead_Size(USART_TypeDef *uartx, uint8_t size)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
  struct uart_data *pstream = __get_duartx(uartx);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff2b 	bl	80009dc <__get_duartx>
 8000b86:	60f8      	str	r0, [r7, #12]

  pstream->recv_len = size;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	78fa      	ldrb	r2, [r7, #3]
 8000b8c:	71da      	strb	r2, [r3, #7]

  return pstream->recv_len;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	79db      	ldrb	r3, [r3, #7]
 8000b92:	b21b      	sxth	r3, r3
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <uart_read>:

int16_t uart_read(USART_TypeDef *uartx, uint8_t *pbuf, uint8_t size)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  int16_t ret = -1;
 8000baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bae:	82bb      	strh	r3, [r7, #20]
  struct uart_data *pstream = __get_duartx(uartx);
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f7ff ff13 	bl	80009dc <__get_duartx>
 8000bb6:	6138      	str	r0, [r7, #16]

  if (size == 0)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <uart_read+0x28>
    return ret;
 8000bbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000bc2:	e033      	b.n	8000c2c <uart_read+0x90>

  if (pstream->recv_len != size)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	79db      	ldrb	r3, [r3, #7]
 8000bc8:	79fa      	ldrb	r2, [r7, #7]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d002      	beq.n	8000bd4 <uart_read+0x38>
    pstream->recv_len = size;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	71da      	strb	r2, [r3, #7]

  if (uart_getFlagStatus(uartx, UART_FLAG_RC) == true)
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f7ff ff54 	bl	8000a84 <uart_getFlagStatus>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d022      	beq.n	8000c28 <uart_read+0x8c>
  {
    for (i = 0; i < size; i++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	75fb      	strb	r3, [r7, #23]
 8000be6:	e00a      	b.n	8000bfe <uart_read+0x62>
      pbuf[i] = pstream->stream_rx[i];
 8000be8:	7dfa      	ldrb	r2, [r7, #23]
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	440b      	add	r3, r1
 8000bf0:	6939      	ldr	r1, [r7, #16]
 8000bf2:	440a      	add	r2, r1
 8000bf4:	7a12      	ldrb	r2, [r2, #8]
 8000bf6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	75fb      	strb	r3, [r7, #23]
 8000bfe:	7dfa      	ldrb	r2, [r7, #23]
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3f0      	bcc.n	8000be8 <uart_read+0x4c>

    ret = size;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	82bb      	strh	r3, [r7, #20]
    pstream->rx_index = 0;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	719a      	strb	r2, [r3, #6]
    __uart_setflag(uartx, UART_FLAG_RC, false);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2104      	movs	r1, #4
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f7ff ff01 	bl	8000a1c <__uart_setflag>
    memset(pstream->stream_rx, 0, sizeof(pstream->stream_rx)); // refflush
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	226c      	movs	r2, #108	; 0x6c
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fd70 	bl	8002708 <memset>
  }

  return ret;
 8000c28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <uart_write>:

int16_t uart_write(USART_TypeDef *uartx, uint8_t *pbuf, uint8_t size)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71fb      	strb	r3, [r7, #7]
  int16_t ret = -1;
 8000c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c46:	82fb      	strh	r3, [r7, #22]
  uint8_t i = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	757b      	strb	r3, [r7, #21]
  struct uart_data *pstream = __get_duartx(uartx);
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff fec5 	bl	80009dc <__get_duartx>
 8000c52:	6138      	str	r0, [r7, #16]

  if (uart_getFlagStatus(uartx, UART_FLAG_DMA_TC) == false)
 8000c54:	2101      	movs	r1, #1
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f7ff ff14 	bl	8000a84 <uart_getFlagStatus>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	f083 0301 	eor.w	r3, r3, #1
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d02a      	beq.n	8000cbe <uart_write+0x8a>
  {
    ret = size;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	82fb      	strh	r3, [r7, #22]
    for (i = 0; i < size; i++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	757b      	strb	r3, [r7, #21]
 8000c70:	e00c      	b.n	8000c8c <uart_write+0x58>
      pstream->stream_tx[i] = pbuf[i];
 8000c72:	7d7b      	ldrb	r3, [r7, #21]
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	441a      	add	r2, r3
 8000c78:	7d7b      	ldrb	r3, [r7, #21]
 8000c7a:	7811      	ldrb	r1, [r2, #0]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4413      	add	r3, r2
 8000c80:	460a      	mov	r2, r1
 8000c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    for (i = 0; i < size; i++)
 8000c86:	7d7b      	ldrb	r3, [r7, #21]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	757b      	strb	r3, [r7, #21]
 8000c8c:	7d7a      	ldrb	r2, [r7, #21]
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3ee      	bcc.n	8000c72 <uart_write+0x3e>

#ifdef USE_USART_DMA_TX
    __uart_setflag(uartx, UART_FLAG_DMA_TC, true);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2101      	movs	r1, #1
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff febf 	bl	8000a1c <__uart_setflag>
    //DMA方式发送,设置数据长度
    DMA_SetCurrDataCounter(pstream->uart_device->dma_tx.tx_ch, size);
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fb7d 	bl	80013aa <DMA_SetCurrDataCounter>
    //启动DMA发送
    DMA_Cmd(pstream->uart_device->dma_tx.tx_ch, ENABLE);
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fb3d 	bl	8001338 <DMA_Cmd>
    // 按字节发送
    for (i = 0; i < size; i++)
      USART_SendData(pstream->uart_device->uartx, pbuf[0]);
#endif
  }
  return ret;
 8000cbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <hw_uart_init>:

void hw_uart_init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  struct uart_device *uart;

  RCC_Configuration();
 8000cd2:	f7ff fbfd 	bl	80004d0 <RCC_Configuration>
  NVIC_Configuration();
 8000cd6:	f7ff fc1a 	bl	800050e <NVIC_Configuration>
  GPIO_Configuration();
 8000cda:	f7ff fc67 	bl	80005ac <GPIO_Configuration>

#ifdef USING_UART1
  uart = &uart1;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <hw_uart_init+0x50>)
 8000ce0:	607b      	str	r3, [r7, #4]
  config1.baud_rate = BAUD_RATE_9600;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <hw_uart_init+0x54>)
 8000ce4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ce8:	601a      	str	r2, [r3, #0]

  UART_Configuration(uart, &config1);
 8000cea:	490d      	ldr	r1, [pc, #52]	; (8000d20 <hw_uart_init+0x54>)
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fca5 	bl	800063c <UART_Configuration>
  UART_DMA_Tx_Config(&duart1);
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <hw_uart_init+0x58>)
 8000cf4:	f7ff fd3e 	bl	8000774 <UART_DMA_Tx_Config>
  UART_Configuration(uart, &config2);
  UART_DMA_Tx_Config(&duart2);
#endif

#ifdef USING_UART3
  uart = &uart3;
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <hw_uart_init+0x5c>)
 8000cfa:	607b      	str	r3, [r7, #4]
  config3.baud_rate = BAUD_RATE_4800;
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <hw_uart_init+0x60>)
 8000cfe:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000d02:	601a      	str	r2, [r3, #0]

  UART_Configuration(uart, &config3);
 8000d04:	4909      	ldr	r1, [pc, #36]	; (8000d2c <hw_uart_init+0x60>)
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fc98 	bl	800063c <UART_Configuration>
  UART_DMA_Tx_Config(&duart3);
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <hw_uart_init+0x64>)
 8000d0e:	f7ff fd31 	bl	8000774 <UART_DMA_Tx_Config>
#endif
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000020 	.word	0x20000020
 8000d28:	20000108 	.word	0x20000108
 8000d2c:	20000100 	.word	0x20000100
 8000d30:	20000120 	.word	0x20000120

08000d34 <RCC_Configuration>:
 */

#include "uart_485.h"

static void RCC_Configuration(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000d38:	2101      	movs	r1, #1
 8000d3a:	2008      	movs	r0, #8
 8000d3c:	f000 ff58 	bl	8001bf0 <RCC_APB2PeriphClockCmd>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <GPIO_Configuration>:

static void GPIO_Configuration(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <GPIO_Configuration+0x30>)
 8000d5e:	f000 fc41 	bl	80015e4 <GPIO_Init>

  UART3_485_RECV();
 8000d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <GPIO_Configuration+0x30>)
 8000d68:	f000 fd1f 	bl	80017aa <GPIO_ResetBits>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <uart_tc_isr_hook>:

void uart_tc_isr_hook(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  UART3_485_RECV();
 8000d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <uart_tc_isr_hook+0x14>)
 8000d82:	f000 fd12 	bl	80017aa <GPIO_ResetBits>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <hw_uart_485_init>:
  UART3_485_SEND();
  return uart_write(uartx, pbuf, size);
}

void hw_uart_485_init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  RCC_Configuration();
 8000d94:	f7ff ffce 	bl	8000d34 <RCC_Configuration>
  GPIO_Configuration();
 8000d98:	f7ff ffd4 	bl	8000d44 <GPIO_Configuration>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <NVIC_PriorityGroupConfig+0x20>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60d3      	str	r3, [r2, #12]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	78db      	ldrb	r3, [r3, #3]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d03a      	beq.n	8000e56 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <NVIC_Init+0xbc>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f1c3 0304 	rsb	r3, r3, #4
 8000df4:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfe:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	461a      	mov	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4013      	ands	r3, r2
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <NVIC_Init+0xc0>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	6979      	ldr	r1, [r7, #20]
 8000e2c:	b2c9      	uxtb	r1, r1
 8000e2e:	4413      	add	r3, r2
 8000e30:	460a      	mov	r2, r1
 8000e32:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e3e:	4911      	ldr	r1, [pc, #68]	; (8000e84 <NVIC_Init+0xc0>)
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	0952      	lsrs	r2, r2, #5
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e50:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000e54:	e00f      	b.n	8000e76 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e5e:	4909      	ldr	r1, [pc, #36]	; (8000e84 <NVIC_Init+0xc0>)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	0952      	lsrs	r2, r2, #5
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e6e:	f100 0320 	add.w	r3, r0, #32
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e76:	bf00      	nop
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000e98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e9c:	4904      	ldr	r1, [pc, #16]	; (8000eb0 <NVIC_SetVectorTable+0x28>)
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	608b      	str	r3, [r1, #8]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d106      	bne.n	8000ed0 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <SysTick_CLKSourceConfig+0x34>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <SysTick_CLKSourceConfig+0x34>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8000ece:	e005      	b.n	8000edc <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_CLKSourceConfig+0x34>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <SysTick_CLKSourceConfig+0x34>)
 8000ed6:	f023 0304 	bic.w	r3, r3, #4
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000efa:	7afb      	ldrb	r3, [r7, #11]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	331b      	adds	r3, #27
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	4413      	add	r3, r2
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7a1b      	ldrb	r3, [r3, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10b      	bne.n	8000f32 <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000f1a:	7afb      	ldrb	r3, [r7, #11]
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	331b      	adds	r3, #27
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	0d5b      	lsrs	r3, r3, #21
 8000f28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e00a      	b.n	8000f48 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000f32:	7afb      	ldrb	r3, [r7, #11]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	331b      	adds	r3, #27
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	4413      	add	r3, r2
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	08db      	lsrs	r3, r3, #3
 8000f40:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000f48:	7afb      	ldrb	r3, [r7, #11]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	331b      	adds	r3, #27
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	4413      	add	r3, r2
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000f60:	7afb      	ldrb	r3, [r7, #11]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	331b      	adds	r3, #27
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4413      	add	r3, r2
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	331b      	adds	r3, #27
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	4413      	add	r3, r2
 8000f84:	3304      	adds	r3, #4
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000f90:	7afb      	ldrb	r3, [r7, #11]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	4413      	add	r3, r2
 8000f98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	4413      	add	r3, r2
 8000fac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	0c1b      	lsrs	r3, r3, #16
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000fd0:	7afb      	ldrb	r3, [r7, #11]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	0e1b      	lsrs	r3, r3, #24
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000fe6:	7afb      	ldrb	r3, [r7, #11]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4413      	add	r3, r2
 8000fee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	4413      	add	r3, r2
 8001002:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	b2da      	uxtb	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	4413      	add	r3, r2
 8001018:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	0c1b      	lsrs	r3, r3, #16
 8001020:	b2da      	uxtb	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	4413      	add	r3, r2
 800102e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0e1b      	lsrs	r3, r3, #24
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800103c:	7afb      	ldrb	r3, [r7, #11]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f043 0220 	orr.w	r2, r3, #32
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 800104e:	e005      	b.n	800105c <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	f043 0220 	orr.w	r2, r3, #32
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	611a      	str	r2, [r3, #16]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
	...

08001068 <CAN_ClearITPendingBit>:
  *                  -  CAN_IT_LEC    
  *                  -  CAN_IT_ERR 
  * @retval None.
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001078:	d043      	beq.n	8001102 <CAN_ClearITPendingBit+0x9a>
 800107a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800107e:	d80d      	bhi.n	800109c <CAN_ClearITPendingBit+0x34>
 8001080:	2b08      	cmp	r3, #8
 8001082:	d02a      	beq.n	80010da <CAN_ClearITPendingBit+0x72>
 8001084:	2b08      	cmp	r3, #8
 8001086:	d804      	bhi.n	8001092 <CAN_ClearITPendingBit+0x2a>
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01e      	beq.n	80010ca <CAN_ClearITPendingBit+0x62>
 800108c:	2b04      	cmp	r3, #4
 800108e:	d020      	beq.n	80010d2 <CAN_ClearITPendingBit+0x6a>
	      CANx->MSR = CAN_MSR_ERRI; 
	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
                  of the CAN Bus status*/
	      break;
      default :
	      break;
 8001090:	e051      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8001092:	2b20      	cmp	r3, #32
 8001094:	d025      	beq.n	80010e2 <CAN_ClearITPendingBit+0x7a>
 8001096:	2b40      	cmp	r3, #64	; 0x40
 8001098:	d027      	beq.n	80010ea <CAN_ClearITPendingBit+0x82>
	      break;
 800109a:	e04c      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 800109c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a0:	d03b      	beq.n	800111a <CAN_ClearITPendingBit+0xb2>
 80010a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a6:	d806      	bhi.n	80010b6 <CAN_ClearITPendingBit+0x4e>
 80010a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ac:	d02d      	beq.n	800110a <CAN_ClearITPendingBit+0xa2>
 80010ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b2:	d02e      	beq.n	8001112 <CAN_ClearITPendingBit+0xaa>
	      break;
 80010b4:	e03f      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80010b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ba:	d01a      	beq.n	80010f2 <CAN_ClearITPendingBit+0x8a>
 80010bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010c0:	d01b      	beq.n	80010fa <CAN_ClearITPendingBit+0x92>
 80010c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010c6:	d02f      	beq.n	8001128 <CAN_ClearITPendingBit+0xc0>
	      break;
 80010c8:	e035      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <CAN_ClearITPendingBit+0xd8>)
 80010ce:	609a      	str	r2, [r3, #8]
	      break;
 80010d0:	e031      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->RF0R = CAN_RF0R_FULL0; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2208      	movs	r2, #8
 80010d6:	60da      	str	r2, [r3, #12]
	      break;
 80010d8:	e02d      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->RF0R = CAN_RF0R_FOVR0; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2210      	movs	r2, #16
 80010de:	60da      	str	r2, [r3, #12]
	      break;
 80010e0:	e029      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->RF1R = CAN_RF1R_FULL1;  
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2208      	movs	r2, #8
 80010e6:	611a      	str	r2, [r3, #16]
	      break;
 80010e8:	e025      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->RF1R = CAN_RF1R_FOVR1; 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2210      	movs	r2, #16
 80010ee:	611a      	str	r2, [r3, #16]
	      break;
 80010f0:	e021      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_WKUI;  
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2208      	movs	r2, #8
 80010f6:	605a      	str	r2, [r3, #4]
	      break;
 80010f8:	e01d      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_SLAKI;   
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2210      	movs	r2, #16
 80010fe:	605a      	str	r2, [r3, #4]
	      break;
 8001100:	e019      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2204      	movs	r2, #4
 8001106:	605a      	str	r2, [r3, #4]
	      break;
 8001108:	e015      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2204      	movs	r2, #4
 800110e:	605a      	str	r2, [r3, #4]
	      break;
 8001110:	e011      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI; 
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2204      	movs	r2, #4
 8001116:	605a      	str	r2, [r3, #4]
	      break;
 8001118:	e00d      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->ESR = RESET; 
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
	      CANx->MSR = CAN_MSR_ERRI; 
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2204      	movs	r2, #4
 8001124:	605a      	str	r2, [r3, #4]
	      break;
 8001126:	e006      	b.n	8001136 <CAN_ClearITPendingBit+0xce>
	      CANx->ESR = RESET; 
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
	      CANx->MSR = CAN_MSR_ERRI; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2204      	movs	r2, #4
 8001132:	605a      	str	r2, [r3, #4]
	      break;
 8001134:	bf00      	nop
   }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	00010101 	.word	0x00010101

08001144 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001154:	4013      	ands	r3, r2
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a43      	ldr	r2, [pc, #268]	; (8001284 <DMA_DeInit+0x140>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d106      	bne.n	8001188 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 800117a:	4b43      	ldr	r3, [pc, #268]	; (8001288 <DMA_DeInit+0x144>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a42      	ldr	r2, [pc, #264]	; (8001288 <DMA_DeInit+0x144>)
 8001180:	f043 030f 	orr.w	r3, r3, #15
 8001184:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8001186:	e077      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a40      	ldr	r2, [pc, #256]	; (800128c <DMA_DeInit+0x148>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d106      	bne.n	800119e <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8001190:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <DMA_DeInit+0x144>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a3c      	ldr	r2, [pc, #240]	; (8001288 <DMA_DeInit+0x144>)
 8001196:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800119a:	6053      	str	r3, [r2, #4]
}
 800119c:	e06c      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a3b      	ldr	r2, [pc, #236]	; (8001290 <DMA_DeInit+0x14c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d106      	bne.n	80011b4 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <DMA_DeInit+0x144>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a37      	ldr	r2, [pc, #220]	; (8001288 <DMA_DeInit+0x144>)
 80011ac:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80011b0:	6053      	str	r3, [r2, #4]
}
 80011b2:	e061      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a37      	ldr	r2, [pc, #220]	; (8001294 <DMA_DeInit+0x150>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d106      	bne.n	80011ca <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <DMA_DeInit+0x144>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a31      	ldr	r2, [pc, #196]	; (8001288 <DMA_DeInit+0x144>)
 80011c2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80011c6:	6053      	str	r3, [r2, #4]
}
 80011c8:	e056      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a32      	ldr	r2, [pc, #200]	; (8001298 <DMA_DeInit+0x154>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d106      	bne.n	80011e0 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <DMA_DeInit+0x144>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4a2c      	ldr	r2, [pc, #176]	; (8001288 <DMA_DeInit+0x144>)
 80011d8:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80011dc:	6053      	str	r3, [r2, #4]
}
 80011de:	e04b      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a2e      	ldr	r2, [pc, #184]	; (800129c <DMA_DeInit+0x158>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d106      	bne.n	80011f6 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <DMA_DeInit+0x144>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4a26      	ldr	r2, [pc, #152]	; (8001288 <DMA_DeInit+0x144>)
 80011ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f2:	6053      	str	r3, [r2, #4]
}
 80011f4:	e040      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a29      	ldr	r2, [pc, #164]	; (80012a0 <DMA_DeInit+0x15c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d106      	bne.n	800120c <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <DMA_DeInit+0x144>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <DMA_DeInit+0x144>)
 8001204:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001208:	6053      	str	r3, [r2, #4]
}
 800120a:	e035      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <DMA_DeInit+0x160>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d106      	bne.n	8001222 <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <DMA_DeInit+0x164>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <DMA_DeInit+0x164>)
 800121a:	f043 030f 	orr.w	r3, r3, #15
 800121e:	6053      	str	r3, [r2, #4]
}
 8001220:	e02a      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <DMA_DeInit+0x168>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d106      	bne.n	8001238 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <DMA_DeInit+0x164>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <DMA_DeInit+0x164>)
 8001230:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001234:	6053      	str	r3, [r2, #4]
}
 8001236:	e01f      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <DMA_DeInit+0x16c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d106      	bne.n	800124e <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <DMA_DeInit+0x164>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <DMA_DeInit+0x164>)
 8001246:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800124a:	6053      	str	r3, [r2, #4]
}
 800124c:	e014      	b.n	8001278 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <DMA_DeInit+0x170>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d106      	bne.n	8001264 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <DMA_DeInit+0x164>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <DMA_DeInit+0x164>)
 800125c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8001260:	6053      	str	r3, [r2, #4]
}
 8001262:	e009      	b.n	8001278 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <DMA_DeInit+0x174>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d105      	bne.n	8001278 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <DMA_DeInit+0x164>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <DMA_DeInit+0x164>)
 8001272:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8001276:	6053      	str	r3, [r2, #4]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40020008 	.word	0x40020008
 8001288:	40020000 	.word	0x40020000
 800128c:	4002001c 	.word	0x4002001c
 8001290:	40020030 	.word	0x40020030
 8001294:	40020044 	.word	0x40020044
 8001298:	40020058 	.word	0x40020058
 800129c:	4002006c 	.word	0x4002006c
 80012a0:	40020080 	.word	0x40020080
 80012a4:	40020408 	.word	0x40020408
 80012a8:	40020400 	.word	0x40020400
 80012ac:	4002041c 	.word	0x4002041c
 80012b0:	40020430 	.word	0x40020430
 80012b4:	40020444 	.word	0x40020444
 80012b8:	40020458 	.word	0x40020458

080012bc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012da:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80012ea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012f6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001302:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60da      	str	r2, [r3, #12]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001356:	e006      	b.n	8001366 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001360:	4013      	ands	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	4613      	mov	r3, r2
 800137c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	431a      	orrs	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8001390:	e006      	b.n	80013a0 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR &= ~DMA_IT;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.                 
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	605a      	str	r2, [r3, #4]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
	...

080013c8 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <DMA_ClearFlag+0x2c>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 80013e0:	e002      	b.n	80013e8 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <DMA_ClearFlag+0x30>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6053      	str	r3, [r2, #4]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020000 	.word	0x40020000

080013fc <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <DMA_GetITStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <DMA_GetITStatus+0x48>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	e002      	b.n	8001424 <DMA_GetITStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <DMA_GetITStatus+0x4c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <DMA_GetITStatus+0x38>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e001      	b.n	8001438 <DMA_GetITStatus+0x3c>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	40020400 	.word	0x40020400
 8001448:	40020000 	.word	0x40020000

0800144c <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <FLASH_Unlock+0x18>)
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <FLASH_Unlock+0x1c>)
 8001454:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8001456:	4b03      	ldr	r3, [pc, #12]	; (8001464 <FLASH_Unlock+0x18>)
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <FLASH_Unlock+0x20>)
 800145a:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40022000 	.word	0x40022000
 8001468:	45670123 	.word	0x45670123
 800146c:	cdef89ab 	.word	0xcdef89ab

08001470 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001478:	2304      	movs	r3, #4
 800147a:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800147c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001480:	f000 f88e 	bl	80015a0 <FLASH_WaitForLastOperation>
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b04      	cmp	r3, #4
 800148c:	d11b      	bne.n	80014c6 <FLASH_ErasePage+0x56>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <FLASH_ErasePage+0x60>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <FLASH_ErasePage+0x60>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <FLASH_ErasePage+0x60>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <FLASH_ErasePage+0x60>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <FLASH_ErasePage+0x60>)
 80014a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014aa:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80014ac:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80014b0:	f000 f876 	bl	80015a0 <FLASH_WaitForLastOperation>
 80014b4:	4603      	mov	r3, r0
 80014b6:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <FLASH_ErasePage+0x60>)
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	4904      	ldr	r1, [pc, #16]	; (80014d0 <FLASH_ErasePage+0x60>)
 80014be:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 80014c2:	4013      	ands	r3, r2
 80014c4:	610b      	str	r3, [r1, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40022000 	.word	0x40022000

080014d4 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 80014e0:	2304      	movs	r3, #4
 80014e2:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80014e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014e8:	f000 f85a 	bl	80015a0 <FLASH_WaitForLastOperation>
 80014ec:	4603      	mov	r3, r0
 80014ee:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d115      	bne.n	8001522 <FLASH_ProgramHalfWord+0x4e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <FLASH_ProgramHalfWord+0x58>)
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <FLASH_ProgramHalfWord+0x58>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	887a      	ldrh	r2, [r7, #2]
 8001506:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001508:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800150c:	f000 f848 	bl	80015a0 <FLASH_WaitForLastOperation>
 8001510:	4603      	mov	r3, r0
 8001512:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <FLASH_ProgramHalfWord+0x58>)
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	4904      	ldr	r1, [pc, #16]	; (800152c <FLASH_ProgramHalfWord+0x58>)
 800151a:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800151e:	4013      	ands	r3, r2
 8001520:	610b      	str	r3, [r1, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40022000 	.word	0x40022000

08001530 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
  *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <FLASH_ClearFlag+0x18>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	60d3      	str	r3, [r2, #12]
#endif /* STM32F10X_XL */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40022000 	.word	0x40022000

0800154c <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8001552:	2304      	movs	r3, #4
 8001554:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <FLASH_GetBank1Status+0x50>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b01      	cmp	r3, #1
 8001560:	d102      	bne.n	8001568 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
 8001562:	2301      	movs	r3, #1
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	e013      	b.n	8001590 <FLASH_GetBank1Status+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <FLASH_GetBank1Status+0x50>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <FLASH_GetBank1Status+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001574:	2302      	movs	r3, #2
 8001576:	71fb      	strb	r3, [r7, #7]
 8001578:	e00a      	b.n	8001590 <FLASH_GetBank1Status+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <FLASH_GetBank1Status+0x50>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <FLASH_GetBank1Status+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 8001586:	2303      	movs	r3, #3
 8001588:	71fb      	strb	r3, [r7, #7]
 800158a:	e001      	b.n	8001590 <FLASH_GetBank1Status+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 800158c:	2304      	movs	r3, #4
 800158e:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 8001590:	79fb      	ldrb	r3, [r7, #7]
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40022000 	.word	0x40022000

080015a0 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 80015a8:	2304      	movs	r3, #4
 80015aa:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 80015ac:	f7ff ffce 	bl	800154c <FLASH_GetBank1Status>
 80015b0:	4603      	mov	r3, r0
 80015b2:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80015b4:	e006      	b.n	80015c4 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetBank1Status();
 80015b6:	f7ff ffc9 	bl	800154c <FLASH_GetBank1Status>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d102      	bne.n	80015d0 <FLASH_WaitForLastOperation+0x30>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f2      	bne.n	80015b6 <FLASH_WaitForLastOperation+0x16>
  }
  if(Timeout == 0x00 )
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 80015d6:	2305      	movs	r3, #5
 80015d8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	78db      	ldrb	r3, [r3, #3]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	78db      	ldrb	r3, [r3, #3]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	789b      	ldrb	r3, [r3, #2]
 8001620:	461a      	mov	r2, r3
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4313      	orrs	r3, r2
 8001626:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d044      	beq.n	80016bc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	e038      	b.n	80016b0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800163e:	2201      	movs	r2, #1
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d126      	bne.n	80016aa <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001662:	220f      	movs	r2, #15
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	43db      	mvns	r3, r3
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	4013      	ands	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	78db      	ldrb	r3, [r3, #3]
 8001688:	2b28      	cmp	r3, #40	; 0x28
 800168a:	d105      	bne.n	8001698 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800168c:	2201      	movs	r2, #1
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	409a      	lsls	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	e008      	b.n	80016aa <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	78db      	ldrb	r3, [r3, #3]
 800169c:	2b48      	cmp	r3, #72	; 0x48
 800169e:	d104      	bne.n	80016aa <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016a0:	2201      	movs	r2, #1
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	409a      	lsls	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	d9c3      	bls.n	800163e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2bff      	cmp	r3, #255	; 0xff
 80016c2:	d946      	bls.n	8001752 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	e03a      	b.n	8001746 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	3308      	adds	r3, #8
 80016d4:	2201      	movs	r2, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d127      	bne.n	8001740 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80016f6:	220f      	movs	r2, #15
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	43db      	mvns	r3, r3
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	4013      	ands	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	78db      	ldrb	r3, [r3, #3]
 800171c:	2b28      	cmp	r3, #40	; 0x28
 800171e:	d105      	bne.n	800172c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	3308      	adds	r3, #8
 8001724:	2201      	movs	r2, #1
 8001726:	409a      	lsls	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	78db      	ldrb	r3, [r3, #3]
 8001730:	2b48      	cmp	r3, #72	; 0x48
 8001732:	d105      	bne.n	8001740 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	3308      	adds	r3, #8
 8001738:	2201      	movs	r2, #1
 800173a:	409a      	lsls	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	3301      	adds	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b07      	cmp	r3, #7
 800174a:	d9c1      	bls.n	80016d0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	605a      	str	r2, [r3, #4]
  }
}
 8001752:	bf00      	nop
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e001      	b.n	8001782 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	611a      	str	r2, [r3, #16]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	615a      	str	r2, [r3, #20]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	807b      	strh	r3, [r7, #2]
 80017d2:	4613      	mov	r3, r2
 80017d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80017d6:	787b      	ldrb	r3, [r7, #1]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80017e2:	e002      	b.n	80017ea <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	615a      	str	r2, [r3, #20]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <RCC_DeInit+0x54>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <RCC_DeInit+0x54>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <RCC_DeInit+0x54>)
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	490f      	ldr	r1, [pc, #60]	; (8001848 <RCC_DeInit+0x54>)
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <RCC_DeInit+0x58>)
 800180c:	4013      	ands	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <RCC_DeInit+0x54>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <RCC_DeInit+0x54>)
 8001816:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800181a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <RCC_DeInit+0x54>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a08      	ldr	r2, [pc, #32]	; (8001848 <RCC_DeInit+0x54>)
 8001826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <RCC_DeInit+0x54>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a05      	ldr	r2, [pc, #20]	; (8001848 <RCC_DeInit+0x54>)
 8001832:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001836:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <RCC_DeInit+0x54>)
 800183a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800183e:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40021000 	.word	0x40021000
 800184c:	f8ff0000 	.word	0xf8ff0000

08001850 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <RCC_HSEConfig+0x58>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <RCC_HSEConfig+0x58>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <RCC_HSEConfig+0x58>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <RCC_HSEConfig+0x58>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001876:	d003      	beq.n	8001880 <RCC_HSEConfig+0x30>
 8001878:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800187c:	d007      	beq.n	800188e <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 800187e:	e00d      	b.n	800189c <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <RCC_HSEConfig+0x58>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <RCC_HSEConfig+0x58>)
 8001886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
      break;
 800188c:	e006      	b.n	800189c <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <RCC_HSEConfig+0x58>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <RCC_HSEConfig+0x58>)
 8001894:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001898:	6013      	str	r3, [r2, #0]
      break;
 800189a:	bf00      	nop
  }
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000

080018ac <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80018be:	2031      	movs	r0, #49	; 0x31
 80018c0:	f000 fa0e 	bl	8001ce0 <RCC_GetFlagStatus>
 80018c4:	4603      	mov	r3, r0
 80018c6:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80018d4:	d002      	beq.n	80018dc <RCC_WaitForHSEStartUp+0x30>
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80018dc:	2031      	movs	r0, #49	; 0x31
 80018de:	f000 f9ff 	bl	8001ce0 <RCC_GetFlagStatus>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 80018e8:	2301      	movs	r3, #1
 80018ea:	71fb      	strb	r3, [r7, #7]
 80018ec:	e001      	b.n	80018f2 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 80018ee:	2300      	movs	r3, #0
 80018f0:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <RCC_PLLConfig+0x38>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001916:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	4313      	orrs	r3, r2
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <RCC_PLLConfig+0x38>)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6053      	str	r3, [r2, #4]
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40021000 	.word	0x40021000

08001938 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <RCC_PLLCmd+0x1c>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	42420060 	.word	0x42420060

08001958 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <RCC_SYSCLKConfig+0x34>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f023 0303 	bic.w	r3, r3, #3
 8001970:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <RCC_SYSCLKConfig+0x34>)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6053      	str	r3, [r2, #4]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000

08001990 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <RCC_GetSYSCLKSource+0x18>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	b2db      	uxtb	r3, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40021000 	.word	0x40021000

080019ac <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <RCC_HCLKConfig+0x34>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c4:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <RCC_HCLKConfig+0x34>)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6053      	str	r3, [r2, #4]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <RCC_PCLK1Config+0x34>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019fc:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <RCC_PCLK1Config+0x34>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6053      	str	r3, [r2, #4]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <RCC_PCLK2Config+0x34>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a34:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <RCC_PCLK2Config+0x34>)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6053      	str	r3, [r2, #4]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40021000 	.word	0x40021000

08001a54 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <RCC_GetClocksFreq+0x14c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d007      	beq.n	8001a8c <RCC_GetClocksFreq+0x38>
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d009      	beq.n	8001a94 <RCC_GetClocksFreq+0x40>
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d133      	bne.n	8001aec <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <RCC_GetClocksFreq+0x150>)
 8001a88:	601a      	str	r2, [r3, #0]
      break;
 8001a8a:	e033      	b.n	8001af4 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a45      	ldr	r2, [pc, #276]	; (8001ba4 <RCC_GetClocksFreq+0x150>)
 8001a90:	601a      	str	r2, [r3, #0]
      break;
 8001a92:	e02f      	b.n	8001af4 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001a94:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <RCC_GetClocksFreq+0x14c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001a9c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001a9e:	4b40      	ldr	r3, [pc, #256]	; (8001ba0 <RCC_GetClocksFreq+0x14c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa6:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	0c9b      	lsrs	r3, r3, #18
 8001aac:	3302      	adds	r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4a3b      	ldr	r2, [pc, #236]	; (8001ba8 <RCC_GetClocksFreq+0x154>)
 8001aba:	fb02 f203 	mul.w	r2, r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001ac2:	e017      	b.n	8001af4 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <RCC_GetClocksFreq+0x14c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4a35      	ldr	r2, [pc, #212]	; (8001ba8 <RCC_GetClocksFreq+0x154>)
 8001ad4:	fb02 f203 	mul.w	r2, r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	601a      	str	r2, [r3, #0]
      break;
 8001adc:	e00a      	b.n	8001af4 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <RCC_GetClocksFreq+0x150>)
 8001ae2:	fb02 f203 	mul.w	r2, r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
      break;
 8001aea:	e003      	b.n	8001af4 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <RCC_GetClocksFreq+0x150>)
 8001af0:	601a      	str	r2, [r3, #0]
      break;
 8001af2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <RCC_GetClocksFreq+0x14c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001afc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001b04:	4a29      	ldr	r2, [pc, #164]	; (8001bac <RCC_GetClocksFreq+0x158>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001b1c:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <RCC_GetClocksFreq+0x14c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b24:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <RCC_GetClocksFreq+0x158>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	40da      	lsrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <RCC_GetClocksFreq+0x14c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001b4c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	0adb      	lsrs	r3, r3, #11
 8001b52:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001b54:	4a15      	ldr	r2, [pc, #84]	; (8001bac <RCC_GetClocksFreq+0x158>)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	4413      	add	r3, r2
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	40da      	lsrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <RCC_GetClocksFreq+0x14c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b74:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	0b9b      	lsrs	r3, r3, #14
 8001b7a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <RCC_GetClocksFreq+0x15c>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
}
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	007a1200 	.word	0x007a1200
 8001ba8:	003d0900 	.word	0x003d0900
 8001bac:	20000200 	.word	0x20000200
 8001bb0:	20000210 	.word	0x20000210

08001bb4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <RCC_AHBPeriphClockCmd+0x38>)
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <RCC_AHBPeriphClockCmd+0x38>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001bd2:	e006      	b.n	8001be2 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <RCC_AHBPeriphClockCmd+0x38>)
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <RCC_AHBPeriphClockCmd+0x38>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	614b      	str	r3, [r1, #20]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000

08001bf0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d006      	beq.n	8001c10 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <RCC_APB2PeriphClockCmd+0x38>)
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <RCC_APB2PeriphClockCmd+0x38>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001c0e:	e006      	b.n	8001c1e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <RCC_APB2PeriphClockCmd+0x38>)
 8001c12:	699a      	ldr	r2, [r3, #24]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4903      	ldr	r1, [pc, #12]	; (8001c28 <RCC_APB2PeriphClockCmd+0x38>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	618b      	str	r3, [r1, #24]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	40021000 	.word	0x40021000

08001c2c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <RCC_APB1PeriphClockCmd+0x38>)
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <RCC_APB1PeriphClockCmd+0x38>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001c4a:	e006      	b.n	8001c5a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <RCC_APB1PeriphClockCmd+0x38>)
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	4903      	ldr	r1, [pc, #12]	; (8001c64 <RCC_APB1PeriphClockCmd+0x38>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	61cb      	str	r3, [r1, #28]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000

08001c68 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <RCC_APB2PeriphResetCmd+0x38>)
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <RCC_APB2PeriphResetCmd+0x38>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001c86:	e006      	b.n	8001c96 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <RCC_APB2PeriphResetCmd+0x38>)
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <RCC_APB2PeriphResetCmd+0x38>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	60cb      	str	r3, [r1, #12]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <RCC_APB1PeriphResetCmd+0x38>)
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <RCC_APB1PeriphResetCmd+0x38>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001cc2:	e006      	b.n	8001cd2 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <RCC_APB1PeriphResetCmd+0x38>)
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	4903      	ldr	r1, [pc, #12]	; (8001cdc <RCC_APB1PeriphResetCmd+0x38>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	610b      	str	r3, [r1, #16]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d103      	bne.n	8001d0c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <RCC_GetFlagStatus+0x70>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e009      	b.n	8001d20 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d103      	bne.n	8001d1a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <RCC_GetFlagStatus+0x70>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e002      	b.n	8001d20 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <RCC_GetFlagStatus+0x70>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	74fb      	strb	r3, [r7, #19]
 8001d3c:	e001      	b.n	8001d42 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000

08001d54 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a26      	ldr	r2, [pc, #152]	; (8001df8 <USART_DeInit+0xa4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d10a      	bne.n	8001d7a <USART_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001d64:	2101      	movs	r1, #1
 8001d66:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d6a:	f7ff ff7d 	bl	8001c68 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d74:	f7ff ff78 	bl	8001c68 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8001d78:	e03a      	b.n	8001df0 <USART_DeInit+0x9c>
  else if (USARTx == USART2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <USART_DeInit+0xa8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10a      	bne.n	8001d98 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001d82:	2101      	movs	r1, #1
 8001d84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d88:	f7ff ff8c 	bl	8001ca4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d92:	f7ff ff87 	bl	8001ca4 <RCC_APB1PeriphResetCmd>
}
 8001d96:	e02b      	b.n	8001df0 <USART_DeInit+0x9c>
  else if (USARTx == USART3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <USART_DeInit+0xac>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d10a      	bne.n	8001db6 <USART_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001da0:	2101      	movs	r1, #1
 8001da2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001da6:	f7ff ff7d 	bl	8001ca4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001daa:	2100      	movs	r1, #0
 8001dac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001db0:	f7ff ff78 	bl	8001ca4 <RCC_APB1PeriphResetCmd>
}
 8001db4:	e01c      	b.n	8001df0 <USART_DeInit+0x9c>
  else if (USARTx == UART4)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <USART_DeInit+0xb0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10a      	bne.n	8001dd4 <USART_DeInit+0x80>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001dc4:	f7ff ff6e 	bl	8001ca4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001dce:	f7ff ff69 	bl	8001ca4 <RCC_APB1PeriphResetCmd>
}
 8001dd2:	e00d      	b.n	8001df0 <USART_DeInit+0x9c>
    if (USARTx == UART5)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <USART_DeInit+0xb4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d109      	bne.n	8001df0 <USART_DeInit+0x9c>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8001ddc:	2101      	movs	r1, #1
 8001dde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001de2:	f7ff ff5f 	bl	8001ca4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8001de6:	2100      	movs	r1, #0
 8001de8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001dec:	f7ff ff5a 	bl	8001ca4 <RCC_APB1PeriphResetCmd>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40013800 	.word	0x40013800
 8001dfc:	40004400 	.word	0x40004400
 8001e00:	40004800 	.word	0x40004800
 8001e04:	40004c00 	.word	0x40004c00
 8001e08:	40005000 	.word	0x40005000

08001e0c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8a1b      	ldrh	r3, [r3, #16]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e38:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	88db      	ldrh	r3, [r3, #6]
 8001e44:	461a      	mov	r2, r3
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	899b      	ldrh	r3, [r3, #12]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001e62:	4013      	ands	r3, r2
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	889a      	ldrh	r2, [r3, #4]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	891b      	ldrh	r3, [r3, #8]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	8a9b      	ldrh	r3, [r3, #20]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e94:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	899b      	ldrh	r3, [r3, #12]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fdcd 	bl	8001a54 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4a2e      	ldr	r2, [pc, #184]	; (8001f78 <USART_Init+0x16c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d102      	bne.n	8001ec8 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec6:	e001      	b.n	8001ecc <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	899b      	ldrh	r3, [r3, #12]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da0c      	bge.n	8001ef2 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	009a      	lsls	r2, r3, #2
 8001ee2:	441a      	add	r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	e00b      	b.n	8001f0a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009a      	lsls	r2, r3, #2
 8001efc:	441a      	add	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <USART_Init+0x170>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	2264      	movs	r2, #100	; 0x64
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	899b      	ldrh	r3, [r3, #12]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da0c      	bge.n	8001f4e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	3332      	adds	r3, #50	; 0x32
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <USART_Init+0x170>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4c:	e00b      	b.n	8001f66 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	3332      	adds	r3, #50	; 0x32
 8001f54:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <USART_Init+0x170>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f62:	4313      	orrs	r3, r2
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	811a      	strh	r2, [r3, #8]
}
 8001f6e:	bf00      	nop
 8001f70:	3730      	adds	r7, #48	; 0x30
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	51eb851f 	.word	0x51eb851f

08001f80 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8a1b      	ldrh	r3, [r3, #16]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	881a      	ldrh	r2, [r3, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	889b      	ldrh	r3, [r3, #4]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	88db      	ldrh	r3, [r3, #6]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	821a      	strh	r2, [r3, #16]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	899b      	ldrh	r3, [r3, #12]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001ff8:	e007      	b.n	800200a <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	899b      	ldrh	r3, [r3, #12]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002004:	b29a      	uxth	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	819a      	strh	r2, [r3, #12]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800204a:	2201      	movs	r2, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d103      	bne.n	8002062 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	330c      	adds	r3, #12
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e009      	b.n	8002076 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d103      	bne.n	8002070 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3310      	adds	r3, #16
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e002      	b.n	8002076 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3314      	adds	r3, #20
 8002074:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8002076:	787b      	ldrb	r3, [r7, #1]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8002088:	e006      	b.n	8002098 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	43da      	mvns	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	400a      	ands	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	807b      	strh	r3, [r7, #2]
 80020ae:	4613      	mov	r3, r2
 80020b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 80020b2:	787b      	ldrb	r3, [r7, #1]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	8a9b      	ldrh	r3, [r3, #20]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 80020c8:	e009      	b.n	80020de <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8a9b      	ldrh	r3, [r3, #20]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4013      	ands	r3, r2
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	829a      	strh	r2, [r3, #20]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fa:	b29b      	uxth	r3, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002106:	b480      	push	{r7}
 8002108:	b087      	sub	sp, #28
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	b2db      	uxtb	r3, r3
 800212a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8002134:	2201      	movs	r2, #1
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	899b      	ldrh	r3, [r3, #12]
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4013      	ands	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e011      	b.n	8002178 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	8a1b      	ldrh	r3, [r3, #16]
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	4013      	ands	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e006      	b.n	8002178 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	8a9b      	ldrh	r3, [r3, #20]
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b29b      	uxth	r3, r3
 800217e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002180:	2201      	movs	r2, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <USART_GetITStatus+0xa4>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	74fb      	strb	r3, [r7, #19]
 80021a8:	e001      	b.n	80021ae <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80021c6:	2300      	movs	r3, #0
 80021c8:	81fb      	strh	r3, [r7, #14]
 80021ca:	2300      	movs	r3, #0
 80021cc:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	2201      	movs	r2, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80021de:	89bb      	ldrh	r3, [r7, #12]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	801a      	strh	r2, [r3, #0]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
	...

080021f4 <TickHandler>:
#define SYS_TICK_RATE_HZ 1000
static volatile uint32_t sys_seconds_cnt;
static volatile uint16_t sys_millisec_cnt;

inline void TickHandler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
    uint32_t millisec_increment = 1000 / SYS_TICK_RATE_HZ;
 80021fa:	2301      	movs	r3, #1
 80021fc:	607b      	str	r3, [r7, #4]

    sys_millisec_cnt += millisec_increment;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <TickHandler+0x4c>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	4413      	add	r3, r2
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <TickHandler+0x4c>)
 800220e:	801a      	strh	r2, [r3, #0]
    if (sys_millisec_cnt >= 1000)
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <TickHandler+0x4c>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800221a:	d30c      	bcc.n	8002236 <TickHandler+0x42>
    {
        sys_millisec_cnt -= 1000;
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <TickHandler+0x4c>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002226:	b29a      	uxth	r2, r3
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <TickHandler+0x4c>)
 800222a:	801a      	strh	r2, [r3, #0]
        sys_seconds_cnt++;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <TickHandler+0x50>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <TickHandler+0x50>)
 8002234:	6013      	str	r3, [r2, #0]
    }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	20000664 	.word	0x20000664
 8002244:	20000660 	.word	0x20000660

08002248 <timer_delete>:

    return index;
}

bool timer_delete(const timer_id index)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
    if (index >= OS_TIMER_MAX)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b1f      	cmp	r3, #31
 8002258:	dd01      	ble.n	800225e <timer_delete+0x16>
        return false;
 800225a:	2300      	movs	r3, #0
 800225c:	e043      	b.n	80022e6 <timer_delete+0x9e>

    if (timer_list[index].pfun == NULL)
 800225e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002262:	4923      	ldr	r1, [pc, #140]	; (80022f0 <timer_delete+0xa8>)
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <timer_delete+0x30>
    {
        return false;
 8002274:	2300      	movs	r3, #0
 8002276:	e036      	b.n	80022e6 <timer_delete+0x9e>
    }
    timer_list[index].pfun = NULL;
 8002278:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800227c:	491c      	ldr	r1, [pc, #112]	; (80022f0 <timer_delete+0xa8>)
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
    timer_list[index].delay = 0;
 800228c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002290:	4917      	ldr	r1, [pc, #92]	; (80022f0 <timer_delete+0xa8>)
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3304      	adds	r3, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
    timer_list[index].period = 0;
 80022a2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022a6:	4912      	ldr	r1, [pc, #72]	; (80022f0 <timer_delete+0xa8>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	330c      	adds	r3, #12
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
    timer_list[index].run = false;
 80022b8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022bc:	490c      	ldr	r1, [pc, #48]	; (80022f0 <timer_delete+0xa8>)
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	3310      	adds	r3, #16
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
    timer_list[index].para = NULL;
 80022ce:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80022d2:	4907      	ldr	r1, [pc, #28]	; (80022f0 <timer_delete+0xa8>)
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	3314      	adds	r3, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    return true;
 80022e4:	2301      	movs	r3, #1
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	2000068c 	.word	0x2000068c

080022f4 <timer_sched>:
 * @description: period : 0 一直重复执行， n(>0)  重复执行n次
 * @param {type} 
 * @return {type} 
 */
inline void timer_sched(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
    uint8_t index;

    for (index = 0; index < OS_TIMER_MAX; index++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	e091      	b.n	8002424 <timer_sched+0x130>
    {
        if (timer_list[index].delay == 0)
 8002300:	79fa      	ldrb	r2, [r7, #7]
 8002302:	494c      	ldr	r1, [pc, #304]	; (8002434 <timer_sched+0x140>)
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	3304      	adds	r3, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d171      	bne.n	80023fa <timer_sched+0x106>
        {
            if (timer_list[index].run)
 8002316:	79fa      	ldrb	r2, [r7, #7]
 8002318:	4946      	ldr	r1, [pc, #280]	; (8002434 <timer_sched+0x140>)
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	3310      	adds	r3, #16
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d078      	beq.n	800241e <timer_sched+0x12a>
            {
                (*timer_list[index].pfun)(timer_list[index].para);
 800232c:	79fa      	ldrb	r2, [r7, #7]
 800232e:	4941      	ldr	r1, [pc, #260]	; (8002434 <timer_sched+0x140>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	79fa      	ldrb	r2, [r7, #7]
 800233e:	483d      	ldr	r0, [pc, #244]	; (8002434 <timer_sched+0x140>)
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4403      	add	r3, r0
 800234a:	3314      	adds	r3, #20
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	4788      	blx	r1

                if (timer_list[index].period == 0)
 8002352:	79fa      	ldrb	r2, [r7, #7]
 8002354:	4937      	ldr	r1, [pc, #220]	; (8002434 <timer_sched+0x140>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	330c      	adds	r3, #12
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d112      	bne.n	800238e <timer_sched+0x9a>
                {
                    timer_list[index].delay = timer_list[index].delay_temp;
 8002368:	79f9      	ldrb	r1, [r7, #7]
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	4831      	ldr	r0, [pc, #196]	; (8002434 <timer_sched+0x140>)
 800236e:	460b      	mov	r3, r1
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	440b      	add	r3, r1
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4403      	add	r3, r0
 8002378:	3308      	adds	r3, #8
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	482d      	ldr	r0, [pc, #180]	; (8002434 <timer_sched+0x140>)
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4403      	add	r3, r0
 8002388:	3304      	adds	r3, #4
 800238a:	6019      	str	r1, [r3, #0]
 800238c:	e047      	b.n	800241e <timer_sched+0x12a>
                }
                else if (timer_list[index].period == 1)
 800238e:	79fa      	ldrb	r2, [r7, #7]
 8002390:	4928      	ldr	r1, [pc, #160]	; (8002434 <timer_sched+0x140>)
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	330c      	adds	r3, #12
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <timer_sched+0xbc>
                {
                    timer_delete(index);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff4d 	bl	8002248 <timer_delete>
 80023ae:	e036      	b.n	800241e <timer_sched+0x12a>
                }
                else
                {
                    timer_list[index].delay = timer_list[index].delay_temp;
 80023b0:	79f9      	ldrb	r1, [r7, #7]
 80023b2:	79fa      	ldrb	r2, [r7, #7]
 80023b4:	481f      	ldr	r0, [pc, #124]	; (8002434 <timer_sched+0x140>)
 80023b6:	460b      	mov	r3, r1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	440b      	add	r3, r1
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4403      	add	r3, r0
 80023c0:	3308      	adds	r3, #8
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	481b      	ldr	r0, [pc, #108]	; (8002434 <timer_sched+0x140>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4403      	add	r3, r0
 80023d0:	3304      	adds	r3, #4
 80023d2:	6019      	str	r1, [r3, #0]
                    --timer_list[index].period;
 80023d4:	79fa      	ldrb	r2, [r7, #7]
 80023d6:	4917      	ldr	r1, [pc, #92]	; (8002434 <timer_sched+0x140>)
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	330c      	adds	r3, #12
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1e59      	subs	r1, r3, #1
 80023e8:	4812      	ldr	r0, [pc, #72]	; (8002434 <timer_sched+0x140>)
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4403      	add	r3, r0
 80023f4:	330c      	adds	r3, #12
 80023f6:	6019      	str	r1, [r3, #0]
 80023f8:	e011      	b.n	800241e <timer_sched+0x12a>
                }
            }
        }
        else
        {
            --timer_list[index].delay;
 80023fa:	79fa      	ldrb	r2, [r7, #7]
 80023fc:	490d      	ldr	r1, [pc, #52]	; (8002434 <timer_sched+0x140>)
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	3304      	adds	r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1e59      	subs	r1, r3, #1
 800240e:	4809      	ldr	r0, [pc, #36]	; (8002434 <timer_sched+0x140>)
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4403      	add	r3, r0
 800241a:	3304      	adds	r3, #4
 800241c:	6019      	str	r1, [r3, #0]
    for (index = 0; index < OS_TIMER_MAX; index++)
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	3301      	adds	r3, #1
 8002422:	71fb      	strb	r3, [r7, #7]
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b1f      	cmp	r3, #31
 8002428:	f67f af6a 	bls.w	8002300 <timer_sched+0xc>
        }
    }
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2000068c 	.word	0x2000068c

08002438 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
 800243c:	af00      	add	r7, sp, #0
  uint16_t size = -1;
 800243e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002442:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint8_t buf_rc[40];

  hw_board_init();
 8002444:	f7fd ffd2 	bl	80003ec <hw_board_init>
  hw_uart_init();
 8002448:	f7fe fc40 	bl	8000ccc <hw_uart_init>
  hw_gpio_init();
 800244c:	f7fe f838 	bl	80004c0 <hw_gpio_init>
  hw_uart_485_init();
 8002450:	f7fe fc9e 	bl	8000d90 <hw_uart_485_init>

  /* TODO - Add your application code here */
  uart_SetRead_Size(USART1, 2);
 8002454:	2102      	movs	r1, #2
 8002456:	4810      	ldr	r0, [pc, #64]	; (8002498 <main+0x60>)
 8002458:	f7fe fb8c 	bl	8000b74 <uart_SetRead_Size>
  /* Infinite loop */
  while (1)
  {
    if (uart_getFlagStatus(USART1, UART_FLAG_RC))
 800245c:	2104      	movs	r1, #4
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <main+0x60>)
 8002460:	f7fe fb10 	bl	8000a84 <uart_getFlagStatus>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f8      	beq.n	800245c <main+0x24>
    {
      size = uart_read(USART1, buf_rc, 2);
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2202      	movs	r2, #2
 800246e:	4619      	mov	r1, r3
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <main+0x60>)
 8002472:	f7fe fb93 	bl	8000b9c <uart_read>
 8002476:	4603      	mov	r3, r0
 8002478:	85fb      	strh	r3, [r7, #46]	; 0x2e
      uart_write(USART3, buf_rc, size);
 800247a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800247c:	b2da      	uxtb	r2, r3
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <main+0x64>)
 8002484:	f7fe fbd6 	bl	8000c34 <uart_write>
      memset(buf_rc, 0, sizeof(buf_rc));
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2228      	movs	r2, #40	; 0x28
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f93a 	bl	8002708 <memset>
    if (uart_getFlagStatus(USART1, UART_FLAG_RC))
 8002494:	e7e2      	b.n	800245c <main+0x24>
 8002496:	bf00      	nop
 8002498:	40013800 	.word	0x40013800
 800249c:	40004800 	.word	0x40004800

080024a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024a6:	e003      	b.n	80024b0 <LoopCopyDataInit>

080024a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80024aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024ae:	3104      	adds	r1, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024b0:	480b      	ldr	r0, [pc, #44]	; (80024e0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80024b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024b8:	d3f6      	bcc.n	80024a8 <CopyDataInit>
	ldr	r2, =_sbss
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80024bc:	e002      	b.n	80024c4 <LoopFillZerobss>

080024be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024c0:	f842 3b04 	str.w	r3, [r2], #4

080024c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80024c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024c8:	d3f9      	bcc.n	80024be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ca:	f000 f83f 	bl	800254c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ce:	f000 f8f7 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024d2:	f7ff ffb1 	bl	8002438 <main>
	bx	lr
 80024d6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024d8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80024dc:	08002838 	.word	0x08002838
	ldr	r0, =_sdata
 80024e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024e4:	20000644 	.word	0x20000644
	ldr	r2, =_sbss
 80024e8:	20000644 	.word	0x20000644
	ldr	r3, = _ebss
 80024ec:	20000998 	.word	0x20000998

080024f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC1_2_IRQHandler>

080024f2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002502:	e7fe      	b.n	8002502 <HardFault_Handler+0x4>

08002504 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002508:	e7fe      	b.n	8002508 <MemManage_Handler+0x4>

0800250a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800250e:	e7fe      	b.n	800250e <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002514:	e7fe      	b.n	8002514 <UsageFault_Handler+0x4>

08002516 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	af00      	add	r7, sp, #0
  TickHandler();
 800253e:	f7ff fe59 	bl	80021f4 <TickHandler>
  timer_sched();
 8002542:	f7ff fed7 	bl	80022f4 <timer_sched>
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <SystemInit+0x5c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <SystemInit+0x5c>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <SystemInit+0x5c>)
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4911      	ldr	r1, [pc, #68]	; (80025a8 <SystemInit+0x5c>)
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <SystemInit+0x60>)
 8002564:	4013      	ands	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <SystemInit+0x5c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <SystemInit+0x5c>)
 800256e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <SystemInit+0x5c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <SystemInit+0x5c>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002582:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <SystemInit+0x5c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <SystemInit+0x5c>)
 800258a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800258e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <SystemInit+0x5c>)
 8002592:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002596:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002598:	f000 f80c 	bl	80025b4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <SystemInit+0x64>)
 800259e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	f8ff0000 	.word	0xf8ff0000
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80025b8:	f000 f802 	bl	80025c0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <SetSysClockTo72+0xf8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a39      	ldr	r2, [pc, #228]	; (80026b8 <SetSysClockTo72+0xf8>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80025da:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <SetSysClockTo72+0xf8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3301      	adds	r3, #1
 80025e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d103      	bne.n	80025f8 <SetSysClockTo72+0x38>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80025f6:	d1f0      	bne.n	80025da <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <SetSysClockTo72+0xf8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002604:	2301      	movs	r3, #1
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	e001      	b.n	800260e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800260a:	2300      	movs	r3, #0
 800260c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d14b      	bne.n	80026ac <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <SetSysClockTo72+0xfc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <SetSysClockTo72+0xfc>)
 800261a:	f043 0310 	orr.w	r3, r3, #16
 800261e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002620:	4b26      	ldr	r3, [pc, #152]	; (80026bc <SetSysClockTo72+0xfc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a25      	ldr	r2, [pc, #148]	; (80026bc <SetSysClockTo72+0xfc>)
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800262c:	4b23      	ldr	r3, [pc, #140]	; (80026bc <SetSysClockTo72+0xfc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a22      	ldr	r2, [pc, #136]	; (80026bc <SetSysClockTo72+0xfc>)
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <SetSysClockTo72+0xf8>)
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <SetSysClockTo72+0xf8>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <SetSysClockTo72+0xf8>)
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <SetSysClockTo72+0xf8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <SetSysClockTo72+0xf8>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a1a      	ldr	r2, [pc, #104]	; (80026b8 <SetSysClockTo72+0xf8>)
 800264e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002652:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002654:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <SetSysClockTo72+0xf8>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <SetSysClockTo72+0xf8>)
 800265a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800265e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <SetSysClockTo72+0xf8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <SetSysClockTo72+0xf8>)
 8002666:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800266a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <SetSysClockTo72+0xf8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <SetSysClockTo72+0xf8>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002678:	bf00      	nop
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <SetSysClockTo72+0xf8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f9      	beq.n	800267a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <SetSysClockTo72+0xf8>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <SetSysClockTo72+0xf8>)
 800268c:	f023 0303 	bic.w	r3, r3, #3
 8002690:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <SetSysClockTo72+0xf8>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <SetSysClockTo72+0xf8>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800269e:	bf00      	nop
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <SetSysClockTo72+0xf8>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d1f9      	bne.n	80026a0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40022000 	.word	0x40022000

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	2500      	movs	r5, #0
 80026c4:	4e0c      	ldr	r6, [pc, #48]	; (80026f8 <__libc_init_array+0x38>)
 80026c6:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <__libc_init_array+0x3c>)
 80026c8:	1ba4      	subs	r4, r4, r6
 80026ca:	10a4      	asrs	r4, r4, #2
 80026cc:	42a5      	cmp	r5, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	f000 f89e 	bl	8002810 <_init>
 80026d4:	2500      	movs	r5, #0
 80026d6:	4e0a      	ldr	r6, [pc, #40]	; (8002700 <__libc_init_array+0x40>)
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <__libc_init_array+0x44>)
 80026da:	1ba4      	subs	r4, r4, r6
 80026dc:	10a4      	asrs	r4, r4, #2
 80026de:	42a5      	cmp	r5, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026e8:	4798      	blx	r3
 80026ea:	3501      	adds	r5, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026f2:	4798      	blx	r3
 80026f4:	3501      	adds	r5, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	0800282c 	.word	0x0800282c
 80026fc:	0800282c 	.word	0x0800282c
 8002700:	0800282c 	.word	0x0800282c
 8002704:	08002834 	.word	0x08002834

08002708 <memset>:
 8002708:	4603      	mov	r3, r0
 800270a:	4402      	add	r2, r0
 800270c:	4293      	cmp	r3, r2
 800270e:	d100      	bne.n	8002712 <memset+0xa>
 8002710:	4770      	bx	lr
 8002712:	f803 1b01 	strb.w	r1, [r3], #1
 8002716:	e7f9      	b.n	800270c <memset+0x4>

08002718 <register_fini>:
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <register_fini+0xc>)
 800271a:	b113      	cbz	r3, 8002722 <register_fini+0xa>
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <register_fini+0x10>)
 800271e:	f000 b805 	b.w	800272c <atexit>
 8002722:	4770      	bx	lr
 8002724:	00000000 	.word	0x00000000
 8002728:	08002739 	.word	0x08002739

0800272c <atexit>:
 800272c:	2300      	movs	r3, #0
 800272e:	4601      	mov	r1, r0
 8002730:	461a      	mov	r2, r3
 8002732:	4618      	mov	r0, r3
 8002734:	f000 b816 	b.w	8002764 <__register_exitproc>

08002738 <__libc_fini_array>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4d07      	ldr	r5, [pc, #28]	; (8002758 <__libc_fini_array+0x20>)
 800273c:	4c07      	ldr	r4, [pc, #28]	; (800275c <__libc_fini_array+0x24>)
 800273e:	1b64      	subs	r4, r4, r5
 8002740:	10a4      	asrs	r4, r4, #2
 8002742:	b91c      	cbnz	r4, 800274c <__libc_fini_array+0x14>
 8002744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002748:	f000 b868 	b.w	800281c <_fini>
 800274c:	3c01      	subs	r4, #1
 800274e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002752:	4798      	blx	r3
 8002754:	e7f5      	b.n	8002742 <__libc_fini_array+0xa>
 8002756:	bf00      	nop
 8002758:	08002834 	.word	0x08002834
 800275c:	08002838 	.word	0x08002838

08002760 <__retarget_lock_acquire_recursive>:
 8002760:	4770      	bx	lr

08002762 <__retarget_lock_release_recursive>:
 8002762:	4770      	bx	lr

08002764 <__register_exitproc>:
 8002764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002768:	4c26      	ldr	r4, [pc, #152]	; (8002804 <__register_exitproc+0xa0>)
 800276a:	4606      	mov	r6, r0
 800276c:	6820      	ldr	r0, [r4, #0]
 800276e:	4698      	mov	r8, r3
 8002770:	460f      	mov	r7, r1
 8002772:	4691      	mov	r9, r2
 8002774:	f7ff fff4 	bl	8002760 <__retarget_lock_acquire_recursive>
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <__register_exitproc+0xa4>)
 800277a:	681d      	ldr	r5, [r3, #0]
 800277c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8002780:	b918      	cbnz	r0, 800278a <__register_exitproc+0x26>
 8002782:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8002786:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800278a:	6843      	ldr	r3, [r0, #4]
 800278c:	2b1f      	cmp	r3, #31
 800278e:	dd19      	ble.n	80027c4 <__register_exitproc+0x60>
 8002790:	4b1e      	ldr	r3, [pc, #120]	; (800280c <__register_exitproc+0xa8>)
 8002792:	b933      	cbnz	r3, 80027a2 <__register_exitproc+0x3e>
 8002794:	6820      	ldr	r0, [r4, #0]
 8002796:	f7ff ffe4 	bl	8002762 <__retarget_lock_release_recursive>
 800279a:	f04f 30ff 	mov.w	r0, #4294967295
 800279e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027a2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80027a6:	f3af 8000 	nop.w
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d0f2      	beq.n	8002794 <__register_exitproc+0x30>
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80027b4:	6042      	str	r2, [r0, #4]
 80027b6:	6003      	str	r3, [r0, #0]
 80027b8:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80027bc:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 80027c0:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 80027c4:	6843      	ldr	r3, [r0, #4]
 80027c6:	b19e      	cbz	r6, 80027f0 <__register_exitproc+0x8c>
 80027c8:	2201      	movs	r2, #1
 80027ca:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80027ce:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 80027d2:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 80027d6:	409a      	lsls	r2, r3
 80027d8:	4311      	orrs	r1, r2
 80027da:	2e02      	cmp	r6, #2
 80027dc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80027e0:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80027e4:	bf02      	ittt	eq
 80027e6:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 80027ea:	430a      	orreq	r2, r1
 80027ec:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	3302      	adds	r3, #2
 80027f4:	6042      	str	r2, [r0, #4]
 80027f6:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 80027fa:	6820      	ldr	r0, [r4, #0]
 80027fc:	f7ff ffb1 	bl	8002762 <__retarget_lock_release_recursive>
 8002800:	2000      	movs	r0, #0
 8002802:	e7cc      	b.n	800279e <__register_exitproc+0x3a>
 8002804:	20000640 	.word	0x20000640
 8002808:	08002828 	.word	0x08002828
 800280c:	00000000 	.word	0x00000000

08002810 <_init>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	bf00      	nop
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr

0800281c <_fini>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr
