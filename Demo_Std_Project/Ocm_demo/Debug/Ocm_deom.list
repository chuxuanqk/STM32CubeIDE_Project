
Ocm_deom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ff4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08001100  08001100  00011100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08001104  08001104  00011104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000444  20000000  08001110  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000048  20000444  08001554  00020444  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000048c  08001554  0002048c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  9 .debug_info   000030b4  00000000  00000000  0002046d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000bcd  00000000  00000000  00023521  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000490  00000000  00000000  000240f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00024580  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ddb4  00000000  00000000  00024988  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003f93  00000000  00000000  0003273c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0004fcf1  00000000  00000000  000366cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  000863c0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001354  00000000  00000000  0008643c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00087790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000444 	.word	0x20000444
 8000128:	00000000 	.word	0x00000000
 800012c:	080010e8 	.word	0x080010e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000448 	.word	0x20000448
 8000148:	080010e8 	.word	0x080010e8

0800014c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015c:	2b00      	cmp	r3, #0
 800015e:	da0b      	bge.n	8000178 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	b2da      	uxtb	r2, r3
 8000164:	490c      	ldr	r1, [pc, #48]	; (8000198 <NVIC_SetPriority+0x4c>)
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f003 030f 	and.w	r3, r3, #15
 800016c:	3b04      	subs	r3, #4
 800016e:	0112      	lsls	r2, r2, #4
 8000170:	b2d2      	uxtb	r2, r2
 8000172:	440b      	add	r3, r1
 8000174:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000176:	e009      	b.n	800018c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	b2da      	uxtb	r2, r3
 800017c:	4907      	ldr	r1, [pc, #28]	; (800019c <NVIC_SetPriority+0x50>)
 800017e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000182:	0112      	lsls	r2, r2, #4
 8000184:	b2d2      	uxtb	r2, r2
 8000186:	440b      	add	r3, r1
 8000188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000ed00 	.word	0xe000ed00
 800019c:	e000e100 	.word	0xe000e100

080001a0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001ae:	d301      	bcc.n	80001b4 <SysTick_Config+0x14>
 80001b0:	2301      	movs	r3, #1
 80001b2:	e011      	b.n	80001d8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80001ba:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <SysTick_Config+0x40>)
 80001bc:	3b01      	subs	r3, #1
 80001be:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80001c0:	210f      	movs	r1, #15
 80001c2:	f04f 30ff 	mov.w	r0, #4294967295
 80001c6:	f7ff ffc1 	bl	800014c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ca:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SysTick_Config+0x40>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <SysTick_Config+0x40>)
 80001d2:	2207      	movs	r2, #7
 80001d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80001d6:	2300      	movs	r3, #0
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	e000e010 	.word	0xe000e010

080001e4 <Write_Config_To_Flash>:

union STM32_ID_12Byte STM32_ID;
Config_Data_Str Config_Data;

void Write_Config_To_Flash(Config_Data_Str *config)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *data_ptr = (u8 *)config;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60fb      	str	r3, [r7, #12]
    u32 flash_addr = CONFIG_DATA_FLASH_ADDR;
 80001f0:	4b22      	ldr	r3, [pc, #136]	; (800027c <Write_Config_To_Flash+0x98>)
 80001f2:	613b      	str	r3, [r7, #16]
    FLASH_Unlock();                                                                            /* 每次擦除Flash中数据时得先解锁 */
 80001f4:	f000 fa10 	bl	8000618 <FLASH_Unlock>
    FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR); //清除标记
 80001f8:	2035      	movs	r0, #53	; 0x35
 80001fa:	f000 fa7f 	bl	80006fc <FLASH_ClearFlag>
    for (i = 0; i < (sizeof(Config_Data_Str) / FLASH_Page_SIZE + 1); i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	82fb      	strh	r3, [r7, #22]
 8000202:	e00e      	b.n	8000222 <Write_Config_To_Flash+0x3e>
        while (FLASH_COMPLETE != FLASH_ErasePage(CONFIG_DATA_FLASH_ADDR + i * FLASH_Page_SIZE))
 8000204:	bf00      	nop
 8000206:	8afb      	ldrh	r3, [r7, #22]
 8000208:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800020c:	333f      	adds	r3, #63	; 0x3f
 800020e:	029b      	lsls	r3, r3, #10
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fa13 	bl	800063c <FLASH_ErasePage>
 8000216:	4603      	mov	r3, r0
 8000218:	2b04      	cmp	r3, #4
 800021a:	d1f4      	bne.n	8000206 <Write_Config_To_Flash+0x22>
    for (i = 0; i < (sizeof(Config_Data_Str) / FLASH_Page_SIZE + 1); i++)
 800021c:	8afb      	ldrh	r3, [r7, #22]
 800021e:	3301      	adds	r3, #1
 8000220:	82fb      	strh	r3, [r7, #22]
 8000222:	8afb      	ldrh	r3, [r7, #22]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d0ed      	beq.n	8000204 <Write_Config_To_Flash+0x20>
            ;

    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000228:	2300      	movs	r3, #0
 800022a:	82fb      	strh	r3, [r7, #22]
 800022c:	e01f      	b.n	800026e <Write_Config_To_Flash+0x8a>
    {
        while (FLASH_COMPLETE != FLASH_ProgramHalfWord(flash_addr, (data_ptr[i] + data_ptr[i + 1] * 256)))
 800022e:	bf00      	nop
 8000230:	8afb      	ldrh	r3, [r7, #22]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	b29a      	uxth	r2, r3
 800023a:	8afb      	ldrh	r3, [r7, #22]
 800023c:	3301      	adds	r3, #1
 800023e:	68f9      	ldr	r1, [r7, #12]
 8000240:	440b      	add	r3, r1
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	b29b      	uxth	r3, r3
 8000246:	021b      	lsls	r3, r3, #8
 8000248:	b29b      	uxth	r3, r3
 800024a:	4413      	add	r3, r2
 800024c:	b29b      	uxth	r3, r3
 800024e:	4619      	mov	r1, r3
 8000250:	6938      	ldr	r0, [r7, #16]
 8000252:	f000 fa25 	bl	80006a0 <FLASH_ProgramHalfWord>
 8000256:	4603      	mov	r3, r0
 8000258:	2b04      	cmp	r3, #4
 800025a:	d1e9      	bne.n	8000230 <Write_Config_To_Flash+0x4c>
            ;
        i++;
 800025c:	8afb      	ldrh	r3, [r7, #22]
 800025e:	3301      	adds	r3, #1
 8000260:	82fb      	strh	r3, [r7, #22]
        flash_addr += 2;
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	3302      	adds	r3, #2
 8000266:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	3301      	adds	r3, #1
 800026c:	82fb      	strh	r3, [r7, #22]
 800026e:	8afb      	ldrh	r3, [r7, #22]
 8000270:	2b15      	cmp	r3, #21
 8000272:	d9dc      	bls.n	800022e <Write_Config_To_Flash+0x4a>
    }
}
 8000274:	bf00      	nop
 8000276:	3718      	adds	r7, #24
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	0800fc00 	.word	0x0800fc00

08000280 <Config_Data_ReInit>:

void Config_Data_ReInit(Config_Data_Str *config)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *temp_ptr = (u8 *)config;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	60bb      	str	r3, [r7, #8]
    //清零所有参数
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 800028c:	2300      	movs	r3, #0
 800028e:	81fb      	strh	r3, [r7, #14]
 8000290:	e007      	b.n	80002a2 <Config_Data_ReInit+0x22>
    {
        temp_ptr[i] = 0;
 8000292:	89fb      	ldrh	r3, [r7, #14]
 8000294:	68ba      	ldr	r2, [r7, #8]
 8000296:	4413      	add	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 800029c:	89fb      	ldrh	r3, [r7, #14]
 800029e:	3301      	adds	r3, #1
 80002a0:	81fb      	strh	r3, [r7, #14]
 80002a2:	89fb      	ldrh	r3, [r7, #14]
 80002a4:	2b15      	cmp	r3, #21
 80002a6:	d9f4      	bls.n	8000292 <Config_Data_ReInit+0x12>
    }
    //设置默认值
    config->save_data_flag = 1;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2201      	movs	r2, #1
 80002ac:	751a      	strb	r2, [r3, #20]

    // Dev_Config_Reinit(&(config->dev_con));
    // Dev_Config_Reinit((config->dev_con));
};
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <Read_Config_Form_Flash>:

void Read_Config_Form_Flash(Config_Data_Str *config)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    u16 i;
    u8 *data_ptr = (u8 *)config;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	60fb      	str	r3, [r7, #12]
    u16 tmp_read;
    u32 flash_addr = CONFIG_DATA_FLASH_ADDR;
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <Read_Config_Form_Flash+0x74>)
 80002c6:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 80002c8:	2300      	movs	r3, #0
 80002ca:	82fb      	strh	r3, [r7, #22]
 80002cc:	e01c      	b.n	8000308 <Read_Config_Form_Flash+0x50>
    {
        tmp_read = *(vu16 *)(flash_addr);
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	817b      	strh	r3, [r7, #10]
        data_ptr[i] = tmp_read % 256;
 80002d4:	8afb      	ldrh	r3, [r7, #22]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	4413      	add	r3, r2
 80002da:	897a      	ldrh	r2, [r7, #10]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	701a      	strb	r2, [r3, #0]
        i++;
 80002e0:	8afb      	ldrh	r3, [r7, #22]
 80002e2:	3301      	adds	r3, #1
 80002e4:	82fb      	strh	r3, [r7, #22]
        if (i < sizeof(Config_Data_Str))
 80002e6:	8afb      	ldrh	r3, [r7, #22]
 80002e8:	2b15      	cmp	r3, #21
 80002ea:	d807      	bhi.n	80002fc <Read_Config_Form_Flash+0x44>
            data_ptr[i] = tmp_read / 256;
 80002ec:	897b      	ldrh	r3, [r7, #10]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b299      	uxth	r1, r3
 80002f2:	8afb      	ldrh	r3, [r7, #22]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	4413      	add	r3, r2
 80002f8:	b2ca      	uxtb	r2, r1
 80002fa:	701a      	strb	r2, [r3, #0]

        flash_addr += 2;
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	3302      	adds	r3, #2
 8000300:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(Config_Data_Str); i++)
 8000302:	8afb      	ldrh	r3, [r7, #22]
 8000304:	3301      	adds	r3, #1
 8000306:	82fb      	strh	r3, [r7, #22]
 8000308:	8afb      	ldrh	r3, [r7, #22]
 800030a:	2b15      	cmp	r3, #21
 800030c:	d9df      	bls.n	80002ce <Read_Config_Form_Flash+0x16>
    }
    //判断是否为第一次启动
    if (config->save_data_flag != 1)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	7d1b      	ldrb	r3, [r3, #20]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d005      	beq.n	8000322 <Read_Config_Form_Flash+0x6a>
    {
        Config_Data_ReInit(config);    //重置所有参数
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f7ff ffb2 	bl	8000280 <Config_Data_ReInit>
        Write_Config_To_Flash(config); //回写参数到flash
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ff61 	bl	80001e4 <Write_Config_To_Flash>
    }
}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	0800fc00 	.word	0x0800fc00

08000330 <Cpu_GetId>:

//读取ChipID
void Cpu_GetId(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
    STM32_ID.id_u32[0] = *(__IO u32 *)(0x1FFFF7E8); //产品唯一身份标识寄存器(96位)
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <Cpu_GetId+0x24>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <Cpu_GetId+0x28>)
 800033a:	6013      	str	r3, [r2, #0]
    STM32_ID.id_u32[1] = *(__IO u32 *)(0x1FFFF7EC);
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <Cpu_GetId+0x2c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <Cpu_GetId+0x28>)
 8000342:	6053      	str	r3, [r2, #4]
    STM32_ID.id_u32[2] = *(__IO u32 *)(0x1FFFF7F0);
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <Cpu_GetId+0x30>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a03      	ldr	r2, [pc, #12]	; (8000358 <Cpu_GetId+0x28>)
 800034a:	6093      	str	r3, [r2, #8]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	1ffff7e8 	.word	0x1ffff7e8
 8000358:	20000460 	.word	0x20000460
 800035c:	1ffff7ec 	.word	0x1ffff7ec
 8000360:	1ffff7f0 	.word	0x1ffff7f0

08000364 <RCC_Configuration>:

void RCC_Configuration(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
    ErrorStatus HSEStartUpStatus;

    RCC_DeInit();
 800036a:	f000 fa21 	bl	80007b0 <RCC_DeInit>
    RCC_HSEConfig(RCC_HSE_ON);
 800036e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000372:	f000 fa4b 	bl	800080c <RCC_HSEConfig>
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000376:	f000 fa77 	bl	8000868 <RCC_WaitForHSEStartUp>
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
    if (HSEStartUpStatus == SUCCESS)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d122      	bne.n	80003ca <RCC_Configuration+0x66>
    {
        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8000384:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000388:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800038c:	f000 fa94 	bl	80008b8 <RCC_PLLConfig>
        RCC_PLLCmd(ENABLE);
 8000390:	2001      	movs	r0, #1
 8000392:	f000 faaf 	bl	80008f4 <RCC_PLLCmd>
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY == RESET))
 8000396:	bf00      	nop
 8000398:	2000      	movs	r0, #0
 800039a:	f000 fbe9 	bl	8000b70 <RCC_GetFlagStatus>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f9      	bne.n	8000398 <RCC_Configuration+0x34>
        {
        }
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80003a4:	2002      	movs	r0, #2
 80003a6:	f000 fab5 	bl	8000914 <RCC_SYSCLKConfig>

        RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 fadc 	bl	8000968 <RCC_HCLKConfig>
        RCC_PCLK1Config(RCC_HCLK_Div2);
 80003b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80003b4:	f000 faf4 	bl	80009a0 <RCC_PCLK1Config>
        RCC_PCLK2Config(RCC_HCLK_Div1); //串口波特率的确定
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fb0d 	bl	80009d8 <RCC_PCLK2Config>

        while (RCC_GetSYSCLKSource() != 0x08)
 80003be:	bf00      	nop
 80003c0:	f000 fac4 	bl	800094c <RCC_GetSYSCLKSource>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1fa      	bne.n	80003c0 <RCC_Configuration+0x5c>
        {
        }
    }
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <NVIC_Configuration>:

void NVIC_Configuration(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b082      	sub	sp, #8
 80003d6:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;
#ifdef VETB_TAB_RAM
    NVYC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
 80003d8:	2100      	movs	r1, #0
 80003da:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80003de:	f000 f8e9 	bl	80005b4 <NVIC_SetVectorTable>
#endif
    /* Configure one bit for preemption priority */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 80003e2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80003e6:	f000 f871 	bl	80004cc <NVIC_PriorityGroupConfig>

    /* Enable the USART1 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;         //通道设置为串口1中断（故后面应选择在“void USART1_IRQHandler(void)”开中断）
 80003ea:	2325      	movs	r3, #37	; 0x25
 80003ec:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //中断占先等级0
 80003ee:	2300      	movs	r3, #0
 80003f0:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;        //中断响应优先级0
 80003f2:	2301      	movs	r3, #1
 80003f4:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;           //打开中断
 80003f6:	2301      	movs	r3, #1
 80003f8:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f877 	bl	80004f0 <NVIC_Init>

    //DMA发送中断设置
    NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel4_IRQn;
 8000402:	230e      	movs	r3, #14
 8000404:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 800040a:	2302      	movs	r3, #2
 800040c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800040e:	2301      	movs	r3, #1
 8000410:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4618      	mov	r0, r3
 8000416:	f000 f86b 	bl	80004f0 <NVIC_Init>

    /* Enable CAN1 RX0 interrupt IRQ channel */
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800041a:	2314      	movs	r3, #20
 800041c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8000422:	2303      	movs	r3, #3
 8000424:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000426:	2301      	movs	r3, #1
 8000428:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f85f 	bl	80004f0 <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
	*/

    /* Enable the USART2 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;         //通道设置为串口1中断（故后面应选择在“void USART1_IRQHandler(void)”开中断）
 8000432:	2326      	movs	r3, #38	; 0x26
 8000434:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //中断占先等级0
 8000436:	2300      	movs	r3, #0
 8000438:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;        //中断响应优先级0
 800043a:	2304      	movs	r3, #4
 800043c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;           //打开中断
 800043e:	2301      	movs	r3, #1
 8000440:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f853 	bl	80004f0 <NVIC_Init>

    //DMA发送中断设置
    NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel7_IRQn;
 800044a:	2311      	movs	r3, #17
 800044c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
 8000452:	2305      	movs	r3, #5
 8000454:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000456:	2301      	movs	r3, #1
 8000458:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4618      	mov	r0, r3
 800045e:	f000 f847 	bl	80004f0 <NVIC_Init>

    /* Enable the USART3 Interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;         //通道设置为串口1中断（故后面应选择在“void USART1_IRQHandler(void)”开中断）
 8000462:	2327      	movs	r3, #39	; 0x27
 8000464:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //中断占先等级0
 8000466:	2300      	movs	r3, #0
 8000468:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 6;        //中断响应优先级0
 800046a:	2306      	movs	r3, #6
 800046c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;           //打开中断
 800046e:	2301      	movs	r3, #1
 8000470:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f83b 	bl	80004f0 <NVIC_Init>

    //DMA发送中断设置
    NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel2_IRQn;
 800047a:	230c      	movs	r3, #12
 800047c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 7;
 8000482:	2307      	movs	r3, #7
 8000484:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000486:	2301      	movs	r3, #1
 8000488:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f82f 	bl	80004f0 <NVIC_Init>
    //窗口看门狗中断
    //    NVIC_InitStructure.NVIC_IRQChannel = WWDG_IRQn;
    //    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    //    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    //    NVIC_Init(&NVIC_InitStructure);
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <hw_board_init>:

void hw_board_init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    RCC_Configuration();  // 初始化时钟
 80004a0:	f7ff ff60 	bl	8000364 <RCC_Configuration>
    NVIC_Configuration(); // 初始化向量中断
 80004a4:	f7ff ff95 	bl	80003d2 <NVIC_Configuration>

    //启动系统时钟信号，设置时间为1ms
    SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); //AHB=72M/8=9M
 80004a8:	f06f 0004 	mvn.w	r0, #4
 80004ac:	f000 f898 	bl	80005e0 <SysTick_CLKSourceConfig>
    SysTick_Config(SYSTICK_TICK);
 80004b0:	f242 3028 	movw	r0, #9000	; 0x2328
 80004b4:	f7ff fe74 	bl	80001a0 <SysTick_Config>

    Cpu_GetId();                          //网关物理地址
 80004b8:	f7ff ff3a 	bl	8000330 <Cpu_GetId>
    Read_Config_Form_Flash(&Config_Data); //载入保存的25个Net_ID
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <hw_board_init+0x2c>)
 80004be:	f7ff fefb 	bl	80002b8 <Read_Config_Form_Flash>
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2000046c 	.word	0x2000046c

080004cc <NVIC_PriorityGroupConfig>:
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	4a05      	ldr	r2, [pc, #20]	; (80004ec <NVIC_PriorityGroupConfig+0x20>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e0:	60d3      	str	r3, [r2, #12]
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <NVIC_Init>:
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	230f      	movs	r3, #15
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	78db      	ldrb	r3, [r3, #3]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d03a      	beq.n	8000582 <NVIC_Init+0x92>
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <NVIC_Init+0xbc>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	43db      	mvns	r3, r3
 8000512:	0a1b      	lsrs	r3, r3, #8
 8000514:	f003 0307 	and.w	r3, r3, #7
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	f1c3 0304 	rsb	r3, r3, #4
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	fa22 f303 	lsr.w	r3, r2, r3
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	785b      	ldrb	r3, [r3, #1]
 8000530:	461a      	mov	r2, r3
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	789b      	ldrb	r3, [r3, #2]
 800053e:	461a      	mov	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4013      	ands	r3, r2
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	4313      	orrs	r3, r2
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <NVIC_Init+0xc0>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	6979      	ldr	r1, [r7, #20]
 8000558:	b2c9      	uxtb	r1, r1
 800055a:	4413      	add	r3, r2
 800055c:	460a      	mov	r2, r1
 800055e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	f003 031f 	and.w	r3, r3, #31
 800056a:	4911      	ldr	r1, [pc, #68]	; (80005b0 <NVIC_Init+0xc0>)
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	0952      	lsrs	r2, r2, #5
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	4610      	mov	r0, r2
 8000576:	2201      	movs	r2, #1
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8000580:	e00f      	b.n	80005a2 <NVIC_Init+0xb2>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	f003 031f 	and.w	r3, r3, #31
 800058a:	4909      	ldr	r1, [pc, #36]	; (80005b0 <NVIC_Init+0xc0>)
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	0952      	lsrs	r2, r2, #5
 8000592:	b2d2      	uxtb	r2, r2
 8000594:	4610      	mov	r0, r2
 8000596:	2201      	movs	r2, #1
 8000598:	409a      	lsls	r2, r3
 800059a:	f100 0320 	add.w	r3, r0, #32
 800059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	371c      	adds	r7, #28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	e000e100 	.word	0xe000e100

080005b4 <NVIC_SetVectorTable>:
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80005c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80005c8:	4904      	ldr	r1, [pc, #16]	; (80005dc <NVIC_SetVectorTable+0x28>)
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	608b      	str	r3, [r1, #8]
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <SysTick_CLKSourceConfig>:
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d106      	bne.n	80005fc <SysTick_CLKSourceConfig+0x1c>
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <SysTick_CLKSourceConfig+0x34>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <SysTick_CLKSourceConfig+0x34>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	e005      	b.n	8000608 <SysTick_CLKSourceConfig+0x28>
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <SysTick_CLKSourceConfig+0x34>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <SysTick_CLKSourceConfig+0x34>)
 8000602:	f023 0304 	bic.w	r3, r3, #4
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000e010 	.word	0xe000e010

08000618 <FLASH_Unlock>:
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <FLASH_Unlock+0x18>)
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <FLASH_Unlock+0x1c>)
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	4b03      	ldr	r3, [pc, #12]	; (8000630 <FLASH_Unlock+0x18>)
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <FLASH_Unlock+0x20>)
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40022000 	.word	0x40022000
 8000634:	45670123 	.word	0x45670123
 8000638:	cdef89ab 	.word	0xcdef89ab

0800063c <FLASH_ErasePage>:
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	2304      	movs	r3, #4
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800064c:	f000 f88e 	bl	800076c <FLASH_WaitForLastOperation>
 8000650:	4603      	mov	r3, r0
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2b04      	cmp	r3, #4
 8000658:	d11b      	bne.n	8000692 <FLASH_ErasePage+0x56>
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <FLASH_ErasePage+0x60>)
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <FLASH_ErasePage+0x60>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6113      	str	r3, [r2, #16]
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <FLASH_ErasePage+0x60>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6153      	str	r3, [r2, #20]
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <FLASH_ErasePage+0x60>)
 800066e:	691b      	ldr	r3, [r3, #16]
 8000670:	4a0a      	ldr	r2, [pc, #40]	; (800069c <FLASH_ErasePage+0x60>)
 8000672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000676:	6113      	str	r3, [r2, #16]
 8000678:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800067c:	f000 f876 	bl	800076c <FLASH_WaitForLastOperation>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <FLASH_ErasePage+0x60>)
 8000686:	691a      	ldr	r2, [r3, #16]
 8000688:	4904      	ldr	r1, [pc, #16]	; (800069c <FLASH_ErasePage+0x60>)
 800068a:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 800068e:	4013      	ands	r3, r2
 8000690:	610b      	str	r3, [r1, #16]
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40022000 	.word	0x40022000

080006a0 <FLASH_ProgramHalfWord>:
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
 80006ac:	2304      	movs	r3, #4
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006b4:	f000 f85a 	bl	800076c <FLASH_WaitForLastOperation>
 80006b8:	4603      	mov	r3, r0
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d115      	bne.n	80006ee <FLASH_ProgramHalfWord+0x4e>
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <FLASH_ProgramHalfWord+0x58>)
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <FLASH_ProgramHalfWord+0x58>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6113      	str	r3, [r2, #16]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	887a      	ldrh	r2, [r7, #2]
 80006d2:	801a      	strh	r2, [r3, #0]
 80006d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006d8:	f000 f848 	bl	800076c <FLASH_WaitForLastOperation>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <FLASH_ProgramHalfWord+0x58>)
 80006e2:	691a      	ldr	r2, [r3, #16]
 80006e4:	4904      	ldr	r1, [pc, #16]	; (80006f8 <FLASH_ProgramHalfWord+0x58>)
 80006e6:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80006ea:	4013      	ands	r3, r2
 80006ec:	610b      	str	r3, [r1, #16]
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40022000 	.word	0x40022000

080006fc <FLASH_ClearFlag>:
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <FLASH_ClearFlag+0x18>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60d3      	str	r3, [r2, #12]
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40022000 	.word	0x40022000

08000718 <FLASH_GetBank1Status>:
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	2304      	movs	r3, #4
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <FLASH_GetBank1Status+0x50>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	2b01      	cmp	r3, #1
 800072c:	d102      	bne.n	8000734 <FLASH_GetBank1Status+0x1c>
 800072e:	2301      	movs	r3, #1
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	e013      	b.n	800075c <FLASH_GetBank1Status+0x44>
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <FLASH_GetBank1Status+0x50>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	2b00      	cmp	r3, #0
 800073e:	d002      	beq.n	8000746 <FLASH_GetBank1Status+0x2e>
 8000740:	2302      	movs	r3, #2
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	e00a      	b.n	800075c <FLASH_GetBank1Status+0x44>
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <FLASH_GetBank1Status+0x50>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <FLASH_GetBank1Status+0x40>
 8000752:	2303      	movs	r3, #3
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	e001      	b.n	800075c <FLASH_GetBank1Status+0x44>
 8000758:	2304      	movs	r3, #4
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	40022000 	.word	0x40022000

0800076c <FLASH_WaitForLastOperation>:
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	2304      	movs	r3, #4
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	f7ff ffce 	bl	8000718 <FLASH_GetBank1Status>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e006      	b.n	8000790 <FLASH_WaitForLastOperation+0x24>
 8000782:	f7ff ffc9 	bl	8000718 <FLASH_GetBank1Status>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3b01      	subs	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d102      	bne.n	800079c <FLASH_WaitForLastOperation+0x30>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f2      	bne.n	8000782 <FLASH_WaitForLastOperation+0x16>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d101      	bne.n	80007a6 <FLASH_WaitForLastOperation+0x3a>
 80007a2:	2305      	movs	r3, #5
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <RCC_DeInit>:
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <RCC_DeInit+0x54>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a12      	ldr	r2, [pc, #72]	; (8000804 <RCC_DeInit+0x54>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <RCC_DeInit+0x54>)
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	490f      	ldr	r1, [pc, #60]	; (8000804 <RCC_DeInit+0x54>)
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <RCC_DeInit+0x58>)
 80007c8:	4013      	ands	r3, r2
 80007ca:	604b      	str	r3, [r1, #4]
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <RCC_DeInit+0x54>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <RCC_DeInit+0x54>)
 80007d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <RCC_DeInit+0x54>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a08      	ldr	r2, [pc, #32]	; (8000804 <RCC_DeInit+0x54>)
 80007e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <RCC_DeInit+0x54>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <RCC_DeInit+0x54>)
 80007ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007f2:	6053      	str	r3, [r2, #4]
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <RCC_DeInit+0x54>)
 80007f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	40021000 	.word	0x40021000
 8000808:	f8ff0000 	.word	0xf8ff0000

0800080c <RCC_HSEConfig>:
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <RCC_HSEConfig+0x58>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a12      	ldr	r2, [pc, #72]	; (8000864 <RCC_HSEConfig+0x58>)
 800081a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <RCC_HSEConfig+0x58>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <RCC_HSEConfig+0x58>)
 8000826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000832:	d003      	beq.n	800083c <RCC_HSEConfig+0x30>
 8000834:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000838:	d007      	beq.n	800084a <RCC_HSEConfig+0x3e>
 800083a:	e00d      	b.n	8000858 <RCC_HSEConfig+0x4c>
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <RCC_HSEConfig+0x58>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <RCC_HSEConfig+0x58>)
 8000842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	e006      	b.n	8000858 <RCC_HSEConfig+0x4c>
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <RCC_HSEConfig+0x58>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <RCC_HSEConfig+0x58>)
 8000850:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <RCC_WaitForHSEStartUp>:
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	2300      	movs	r3, #0
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	2031      	movs	r0, #49	; 0x31
 800087c:	f000 f978 	bl	8000b70 <RCC_GetFlagStatus>
 8000880:	4603      	mov	r3, r0
 8000882:	71bb      	strb	r3, [r7, #6]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000890:	d002      	beq.n	8000898 <RCC_WaitForHSEStartUp+0x30>
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0f0      	beq.n	800087a <RCC_WaitForHSEStartUp+0x12>
 8000898:	2031      	movs	r0, #49	; 0x31
 800089a:	f000 f969 	bl	8000b70 <RCC_GetFlagStatus>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <RCC_WaitForHSEStartUp+0x42>
 80008a4:	2301      	movs	r3, #1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	e001      	b.n	80008ae <RCC_WaitForHSEStartUp+0x46>
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <RCC_PLLConfig>:
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <RCC_PLLConfig+0x38>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	4313      	orrs	r3, r2
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <RCC_PLLConfig+0x38>)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6053      	str	r3, [r2, #4]
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000

080008f4 <RCC_PLLCmd>:
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <RCC_PLLCmd+0x1c>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	42420060 	.word	0x42420060

08000914 <RCC_SYSCLKConfig>:
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <RCC_SYSCLKConfig+0x34>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	f023 0303 	bic.w	r3, r3, #3
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4313      	orrs	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <RCC_SYSCLKConfig+0x34>)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6053      	str	r3, [r2, #4]
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <RCC_GetSYSCLKSource>:
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <RCC_GetSYSCLKSource+0x18>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f003 030c 	and.w	r3, r3, #12
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000

08000968 <RCC_HCLKConfig>:
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <RCC_HCLKConfig+0x34>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4313      	orrs	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <RCC_HCLKConfig+0x34>)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6053      	str	r3, [r2, #4]
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <RCC_PCLK1Config>:
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <RCC_PCLK1Config+0x34>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4313      	orrs	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <RCC_PCLK1Config+0x34>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6053      	str	r3, [r2, #4]
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <RCC_PCLK2Config>:
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <RCC_PCLK2Config+0x34>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <RCC_PCLK2Config+0x34>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6053      	str	r3, [r2, #4]
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000

08000a10 <RCC_GetClocksFreq>:
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b4c      	ldr	r3, [pc, #304]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 030c 	and.w	r3, r3, #12
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d007      	beq.n	8000a48 <RCC_GetClocksFreq+0x38>
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	d009      	beq.n	8000a50 <RCC_GetClocksFreq+0x40>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d133      	bne.n	8000aa8 <RCC_GetClocksFreq+0x98>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a47      	ldr	r2, [pc, #284]	; (8000b60 <RCC_GetClocksFreq+0x150>)
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e033      	b.n	8000ab0 <RCC_GetClocksFreq+0xa0>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a45      	ldr	r2, [pc, #276]	; (8000b60 <RCC_GetClocksFreq+0x150>)
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	e02f      	b.n	8000ab0 <RCC_GetClocksFreq+0xa0>
 8000a50:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	0c9b      	lsrs	r3, r3, #18
 8000a68:	3302      	adds	r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d106      	bne.n	8000a80 <RCC_GetClocksFreq+0x70>
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4a3b      	ldr	r2, [pc, #236]	; (8000b64 <RCC_GetClocksFreq+0x154>)
 8000a76:	fb02 f203 	mul.w	r2, r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e017      	b.n	8000ab0 <RCC_GetClocksFreq+0xa0>
 8000a80:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <RCC_GetClocksFreq+0x8a>
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4a35      	ldr	r2, [pc, #212]	; (8000b64 <RCC_GetClocksFreq+0x154>)
 8000a90:	fb02 f203 	mul.w	r2, r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e00a      	b.n	8000ab0 <RCC_GetClocksFreq+0xa0>
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4a30      	ldr	r2, [pc, #192]	; (8000b60 <RCC_GetClocksFreq+0x150>)
 8000a9e:	fb02 f203 	mul.w	r2, r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e003      	b.n	8000ab0 <RCC_GetClocksFreq+0xa0>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a2d      	ldr	r2, [pc, #180]	; (8000b60 <RCC_GetClocksFreq+0x150>)
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	bf00      	nop
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	091b      	lsrs	r3, r3, #4
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <RCC_GetClocksFreq+0x158>)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	40da      	lsrs	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <RCC_GetClocksFreq+0x158>)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	40da      	lsrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	0adb      	lsrs	r3, r3, #11
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <RCC_GetClocksFreq+0x158>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	40da      	lsrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	0b9b      	lsrs	r3, r3, #14
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <RCC_GetClocksFreq+0x15c>)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	611a      	str	r2, [r3, #16]
 8000b52:	bf00      	nop
 8000b54:	371c      	adds	r7, #28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	007a1200 	.word	0x007a1200
 8000b64:	003d0900 	.word	0x003d0900
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000010 	.word	0x20000010

08000b70 <RCC_GetFlagStatus>:
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	2300      	movs	r3, #0
 8000b84:	74fb      	strb	r3, [r7, #19]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	095b      	lsrs	r3, r3, #5
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d103      	bne.n	8000b9c <RCC_GetFlagStatus+0x2c>
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <RCC_GetFlagStatus+0x70>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e009      	b.n	8000bb0 <RCC_GetFlagStatus+0x40>
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d103      	bne.n	8000baa <RCC_GetFlagStatus+0x3a>
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <RCC_GetFlagStatus+0x70>)
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e002      	b.n	8000bb0 <RCC_GetFlagStatus+0x40>
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <RCC_GetFlagStatus+0x70>)
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 031f 	and.w	r3, r3, #31
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <RCC_GetFlagStatus+0x5e>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	74fb      	strb	r3, [r7, #19]
 8000bcc:	e001      	b.n	8000bd2 <RCC_GetFlagStatus+0x62>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	74fb      	strb	r3, [r7, #19]
 8000bd2:	7cfb      	ldrb	r3, [r7, #19]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	371c      	adds	r7, #28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <USART_Init>:
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	8a1b      	ldrh	r3, [r3, #16]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c10:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000c14:	4013      	ands	r3, r2
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	88db      	ldrh	r3, [r3, #6]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c20:	4313      	orrs	r3, r2
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	821a      	strh	r2, [r3, #16]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	899b      	ldrh	r3, [r3, #12]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c36:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	889a      	ldrh	r2, [r3, #4]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	891b      	ldrh	r3, [r3, #8]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	895b      	ldrh	r3, [r3, #10]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c56:	4313      	orrs	r3, r2
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	819a      	strh	r2, [r3, #12]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	8a9b      	ldrh	r3, [r3, #20]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c6c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000c70:	4013      	ands	r3, r2
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	899b      	ldrh	r3, [r3, #12]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	829a      	strh	r2, [r3, #20]
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff febf 	bl	8000a10 <RCC_GetClocksFreq>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <USART_Init+0x16c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d102      	bne.n	8000ca0 <USART_Init+0xbc>
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c9e:	e001      	b.n	8000ca4 <USART_Init+0xc0>
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	899b      	ldrh	r3, [r3, #12]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	da0c      	bge.n	8000cca <USART_Init+0xe6>
 8000cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009a      	lsls	r2, r3, #2
 8000cba:	441a      	add	r2, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc8:	e00b      	b.n	8000ce2 <USART_Init+0xfe>
 8000cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009a      	lsls	r2, r3, #2
 8000cd4:	441a      	add	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <USART_Init+0x170>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	2264      	movs	r2, #100	; 0x64
 8000cf6:	fb02 f303 	mul.w	r3, r2, r3
 8000cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	899b      	ldrh	r3, [r3, #12]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	da0c      	bge.n	8000d26 <USART_Init+0x142>
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	3332      	adds	r3, #50	; 0x32
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <USART_Init+0x170>)
 8000d14:	fba2 2303 	umull	r2, r3, r2, r3
 8000d18:	095b      	lsrs	r3, r3, #5
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d20:	4313      	orrs	r3, r2
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d24:	e00b      	b.n	8000d3e <USART_Init+0x15a>
 8000d26:	6a3b      	ldr	r3, [r7, #32]
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	3332      	adds	r3, #50	; 0x32
 8000d2c:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <USART_Init+0x170>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	811a      	strh	r2, [r3, #8]
 8000d46:	bf00      	nop
 8000d48:	3730      	adds	r7, #48	; 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40013800 	.word	0x40013800
 8000d54:	51eb851f 	.word	0x51eb851f

08000d58 <main>:
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	f7ff fb9d 	bl	800049c <hw_board_init>
 8000d62:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	2300      	movs	r3, #0
 8000d6a:	80bb      	strh	r3, [r7, #4]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	80fb      	strh	r3, [r7, #6]
 8000d70:	2300      	movs	r3, #0
 8000d72:	813b      	strh	r3, [r7, #8]
 8000d74:	2300      	movs	r3, #0
 8000d76:	81bb      	strh	r3, [r7, #12]
 8000d78:	230c      	movs	r3, #12
 8000d7a:	817b      	strh	r3, [r7, #10]
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4801      	ldr	r0, [pc, #4]	; (8000d88 <main+0x30>)
 8000d82:	f7ff ff2f 	bl	8000be4 <USART_Init>
 8000d86:	e7fe      	b.n	8000d86 <main+0x2e>
 8000d88:	40013800 	.word	0x40013800

08000d8c <Reset_Handler>:
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x14>
 8000d90:	2100      	movs	r1, #0
 8000d92:	e003      	b.n	8000d9c <LoopCopyDataInit>

08000d94 <CopyDataInit>:
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x18>)
 8000d96:	585b      	ldr	r3, [r3, r1]
 8000d98:	5043      	str	r3, [r0, r1]
 8000d9a:	3104      	adds	r1, #4

08000d9c <LoopCopyDataInit>:
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <LoopFillZerobss+0x1c>)
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x20>)
 8000da0:	1842      	adds	r2, r0, r1
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d3f6      	bcc.n	8000d94 <CopyDataInit>
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x24>)
 8000da8:	e002      	b.n	8000db0 <LoopFillZerobss>

08000daa <FillZerobss>:
 8000daa:	2300      	movs	r3, #0
 8000dac:	f842 3b04 	str.w	r3, [r2], #4

08000db0 <LoopFillZerobss>:
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <LoopFillZerobss+0x28>)
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3f9      	bcc.n	8000daa <FillZerobss>
 8000db6:	f000 f83d 	bl	8000e34 <SystemInit>
 8000dba:	f000 f8f5 	bl	8000fa8 <__libc_init_array>
 8000dbe:	f7ff ffcb 	bl	8000d58 <main>
 8000dc2:	4770      	bx	lr
 8000dc4:	20005000 	.word	0x20005000
 8000dc8:	08001110 	.word	0x08001110
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000444 	.word	0x20000444
 8000dd4:	20000444 	.word	0x20000444
 8000dd8:	2000048c 	.word	0x2000048c

08000ddc <ADC1_2_IRQHandler>:
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>

08000dde <NMI_Handler>:
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <HardFault_Handler>:
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <DebugMon_Handler>:
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <PendSV_Handler>:
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <SysTick_Handler>:
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
	...

08000e34 <SystemInit>:
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <SystemInit+0x5c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <SystemInit+0x5c>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <SystemInit+0x5c>)
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4911      	ldr	r1, [pc, #68]	; (8000e90 <SystemInit+0x5c>)
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <SystemInit+0x60>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <SystemInit+0x5c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <SystemInit+0x5c>)
 8000e56:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <SystemInit+0x5c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SystemInit+0x5c>)
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SystemInit+0x5c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <SystemInit+0x5c>)
 8000e72:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e76:	6053      	str	r3, [r2, #4]
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SystemInit+0x5c>)
 8000e7a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	f000 f80c 	bl	8000e9c <SetSysClock>
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SystemInit+0x64>)
 8000e86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	f8ff0000 	.word	0xf8ff0000
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <SetSysClock>:
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	f000 f802 	bl	8000ea8 <SetSysClockTo72>
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SetSysClockTo72>:
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a39      	ldr	r2, [pc, #228]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d103      	bne.n	8000ee0 <SetSysClockTo72+0x38>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ede:	d1f0      	bne.n	8000ec2 <SetSysClockTo72+0x1a>
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <SetSysClockTo72+0x4a>
 8000eec:	2301      	movs	r3, #1
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	e001      	b.n	8000ef6 <SetSysClockTo72+0x4e>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d14b      	bne.n	8000f94 <SetSysClockTo72+0xec>
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <SetSysClockTo72+0xfc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <SetSysClockTo72+0xfc>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <SetSysClockTo72+0xfc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <SetSysClockTo72+0xfc>)
 8000f0e:	f023 0303 	bic.w	r3, r3, #3
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <SetSysClockTo72+0xfc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <SetSysClockTo72+0xfc>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f22:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	6053      	str	r3, [r2, #4]
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	6053      	str	r3, [r2, #4]
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3a:	6053      	str	r3, [r2, #4]
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f42:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000f46:	6053      	str	r3, [r2, #4]
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f4e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000f52:	6053      	str	r3, [r2, #4]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	bf00      	nop
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f9      	beq.n	8000f62 <SetSysClockTo72+0xba>
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f74:	f023 0303 	bic.w	r3, r3, #3
 8000f78:	6053      	str	r3, [r2, #4]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6053      	str	r3, [r2, #4]
 8000f86:	bf00      	nop
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SetSysClockTo72+0xf8>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d1f9      	bne.n	8000f88 <SetSysClockTo72+0xe0>
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40022000 	.word	0x40022000

08000fa8 <__libc_init_array>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2500      	movs	r5, #0
 8000fac:	4e0c      	ldr	r6, [pc, #48]	; (8000fe0 <__libc_init_array+0x38>)
 8000fae:	4c0d      	ldr	r4, [pc, #52]	; (8000fe4 <__libc_init_array+0x3c>)
 8000fb0:	1ba4      	subs	r4, r4, r6
 8000fb2:	10a4      	asrs	r4, r4, #2
 8000fb4:	42a5      	cmp	r5, r4
 8000fb6:	d109      	bne.n	8000fcc <__libc_init_array+0x24>
 8000fb8:	f000 f896 	bl	80010e8 <_init>
 8000fbc:	2500      	movs	r5, #0
 8000fbe:	4e0a      	ldr	r6, [pc, #40]	; (8000fe8 <__libc_init_array+0x40>)
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <__libc_init_array+0x44>)
 8000fc2:	1ba4      	subs	r4, r4, r6
 8000fc4:	10a4      	asrs	r4, r4, #2
 8000fc6:	42a5      	cmp	r5, r4
 8000fc8:	d105      	bne.n	8000fd6 <__libc_init_array+0x2e>
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
 8000fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fd0:	4798      	blx	r3
 8000fd2:	3501      	adds	r5, #1
 8000fd4:	e7ee      	b.n	8000fb4 <__libc_init_array+0xc>
 8000fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fda:	4798      	blx	r3
 8000fdc:	3501      	adds	r5, #1
 8000fde:	e7f2      	b.n	8000fc6 <__libc_init_array+0x1e>
 8000fe0:	08001104 	.word	0x08001104
 8000fe4:	08001104 	.word	0x08001104
 8000fe8:	08001104 	.word	0x08001104
 8000fec:	0800110c 	.word	0x0800110c

08000ff0 <register_fini>:
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <register_fini+0xc>)
 8000ff2:	b113      	cbz	r3, 8000ffa <register_fini+0xa>
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <register_fini+0x10>)
 8000ff6:	f000 b805 	b.w	8001004 <atexit>
 8000ffa:	4770      	bx	lr
 8000ffc:	00000000 	.word	0x00000000
 8001000:	08001011 	.word	0x08001011

08001004 <atexit>:
 8001004:	2300      	movs	r3, #0
 8001006:	4601      	mov	r1, r0
 8001008:	461a      	mov	r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 b816 	b.w	800103c <__register_exitproc>

08001010 <__libc_fini_array>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4d07      	ldr	r5, [pc, #28]	; (8001030 <__libc_fini_array+0x20>)
 8001014:	4c07      	ldr	r4, [pc, #28]	; (8001034 <__libc_fini_array+0x24>)
 8001016:	1b64      	subs	r4, r4, r5
 8001018:	10a4      	asrs	r4, r4, #2
 800101a:	b91c      	cbnz	r4, 8001024 <__libc_fini_array+0x14>
 800101c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001020:	f000 b868 	b.w	80010f4 <_fini>
 8001024:	3c01      	subs	r4, #1
 8001026:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800102a:	4798      	blx	r3
 800102c:	e7f5      	b.n	800101a <__libc_fini_array+0xa>
 800102e:	bf00      	nop
 8001030:	0800110c 	.word	0x0800110c
 8001034:	08001110 	.word	0x08001110

08001038 <__retarget_lock_acquire_recursive>:
 8001038:	4770      	bx	lr

0800103a <__retarget_lock_release_recursive>:
 800103a:	4770      	bx	lr

0800103c <__register_exitproc>:
 800103c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001040:	4c26      	ldr	r4, [pc, #152]	; (80010dc <__register_exitproc+0xa0>)
 8001042:	4606      	mov	r6, r0
 8001044:	6820      	ldr	r0, [r4, #0]
 8001046:	4698      	mov	r8, r3
 8001048:	460f      	mov	r7, r1
 800104a:	4691      	mov	r9, r2
 800104c:	f7ff fff4 	bl	8001038 <__retarget_lock_acquire_recursive>
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <__register_exitproc+0xa4>)
 8001052:	681d      	ldr	r5, [r3, #0]
 8001054:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8001058:	b918      	cbnz	r0, 8001062 <__register_exitproc+0x26>
 800105a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800105e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8001062:	6843      	ldr	r3, [r0, #4]
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd19      	ble.n	800109c <__register_exitproc+0x60>
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <__register_exitproc+0xa8>)
 800106a:	b933      	cbnz	r3, 800107a <__register_exitproc+0x3e>
 800106c:	6820      	ldr	r0, [r4, #0]
 800106e:	f7ff ffe4 	bl	800103a <__retarget_lock_release_recursive>
 8001072:	f04f 30ff 	mov.w	r0, #4294967295
 8001076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800107a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800107e:	f3af 8000 	nop.w
 8001082:	2800      	cmp	r0, #0
 8001084:	d0f2      	beq.n	800106c <__register_exitproc+0x30>
 8001086:	2200      	movs	r2, #0
 8001088:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800108c:	6042      	str	r2, [r0, #4]
 800108e:	6003      	str	r3, [r0, #0]
 8001090:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8001094:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8001098:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800109c:	6843      	ldr	r3, [r0, #4]
 800109e:	b19e      	cbz	r6, 80010c8 <__register_exitproc+0x8c>
 80010a0:	2201      	movs	r2, #1
 80010a2:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80010a6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 80010aa:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 80010ae:	409a      	lsls	r2, r3
 80010b0:	4311      	orrs	r1, r2
 80010b2:	2e02      	cmp	r6, #2
 80010b4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80010b8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80010bc:	bf02      	ittt	eq
 80010be:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 80010c2:	430a      	orreq	r2, r1
 80010c4:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	3302      	adds	r3, #2
 80010cc:	6042      	str	r2, [r0, #4]
 80010ce:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 80010d2:	6820      	ldr	r0, [r4, #0]
 80010d4:	f7ff ffb1 	bl	800103a <__retarget_lock_release_recursive>
 80010d8:	2000      	movs	r0, #0
 80010da:	e7cc      	b.n	8001076 <__register_exitproc+0x3a>
 80010dc:	20000440 	.word	0x20000440
 80010e0:	08001100 	.word	0x08001100
 80010e4:	00000000 	.word	0x00000000

080010e8 <_init>:
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ea:	bf00      	nop
 80010ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ee:	bc08      	pop	{r3}
 80010f0:	469e      	mov	lr, r3
 80010f2:	4770      	bx	lr

080010f4 <_fini>:
 80010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f6:	bf00      	nop
 80010f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fa:	bc08      	pop	{r3}
 80010fc:	469e      	mov	lr, r3
 80010fe:	4770      	bx	lr
