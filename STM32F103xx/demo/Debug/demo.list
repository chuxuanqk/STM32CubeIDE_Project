
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080013c4  080013c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013e4  080013e4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080013e4  080013e4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013e4  080013e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013e4  080013e4  000113e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013e8  080013e8  000113e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080013ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080013f0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080013f0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c27  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001059  00000000  00000000  00023c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000530  00000000  00000000  00024cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000488  00000000  00000000  000251e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011c12  00000000  00000000  00025668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000040a4  00000000  00000000  0003727a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005b85b  00000000  00000000  0003b31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00096b79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000133c  00000000  00000000  00096bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080013ac 	.word	0x080013ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080013ac 	.word	0x080013ac

0800014c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <__NVIC_GetPriorityGrouping+0x18>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	0a1b      	lsrs	r3, r3, #8
 8000156:	f003 0307 	and.w	r3, r3, #7
}
 800015a:	4618      	mov	r0, r3
 800015c:	46bd      	mov	sp, r7
 800015e:	bc80      	pop	{r7}
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop
 8000164:	e000ed00 	.word	0xe000ed00

08000168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000168:	b480      	push	{r7}
 800016a:	b083      	sub	sp, #12
 800016c:	af00      	add	r7, sp, #0
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000176:	2b00      	cmp	r3, #0
 8000178:	db0b      	blt.n	8000192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f003 021f 	and.w	r2, r3, #31
 8000180:	4906      	ldr	r1, [pc, #24]	; (800019c <__NVIC_EnableIRQ+0x34>)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	095b      	lsrs	r3, r3, #5
 8000188:	2001      	movs	r0, #1
 800018a:	fa00 f202 	lsl.w	r2, r0, r2
 800018e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000e100 	.word	0xe000e100

080001a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	6039      	str	r1, [r7, #0]
 80001aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	db0a      	blt.n	80001ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	490c      	ldr	r1, [pc, #48]	; (80001ec <__NVIC_SetPriority+0x4c>)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	0112      	lsls	r2, r2, #4
 80001c0:	b2d2      	uxtb	r2, r2
 80001c2:	440b      	add	r3, r1
 80001c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001c8:	e00a      	b.n	80001e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4908      	ldr	r1, [pc, #32]	; (80001f0 <__NVIC_SetPriority+0x50>)
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	f003 030f 	and.w	r3, r3, #15
 80001d6:	3b04      	subs	r3, #4
 80001d8:	0112      	lsls	r2, r2, #4
 80001da:	b2d2      	uxtb	r2, r2
 80001dc:	440b      	add	r3, r1
 80001de:	761a      	strb	r2, [r3, #24]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000e100 	.word	0xe000e100
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b089      	sub	sp, #36	; 0x24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	f003 0307 	and.w	r3, r3, #7
 8000206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	69fb      	ldr	r3, [r7, #28]
 800020a:	f1c3 0307 	rsb	r3, r3, #7
 800020e:	2b04      	cmp	r3, #4
 8000210:	bf28      	it	cs
 8000212:	2304      	movcs	r3, #4
 8000214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	3304      	adds	r3, #4
 800021a:	2b06      	cmp	r3, #6
 800021c:	d902      	bls.n	8000224 <NVIC_EncodePriority+0x30>
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	3b03      	subs	r3, #3
 8000222:	e000      	b.n	8000226 <NVIC_EncodePriority+0x32>
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 32ff 	mov.w	r2, #4294967295
 800022c:	69bb      	ldr	r3, [r7, #24]
 800022e:	fa02 f303 	lsl.w	r3, r2, r3
 8000232:	43da      	mvns	r2, r3
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	401a      	ands	r2, r3
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800023c:	f04f 31ff 	mov.w	r1, #4294967295
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43d9      	mvns	r1, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	4313      	orrs	r3, r2
         );
}
 800024e:	4618      	mov	r0, r3
 8000250:	3724      	adds	r7, #36	; 0x24
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	4907      	ldr	r1, [pc, #28]	; (8000284 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4313      	orrs	r3, r2
 800026a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4013      	ands	r3, r2
 8000274:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000276:	68fb      	ldr	r3, [r7, #12]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40021000 	.word	0x40021000

08000288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800028c:	2001      	movs	r0, #1
 800028e:	f7ff ffe3 	bl	8000258 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000292:	f7ff ff5b 	bl	800014c <__NVIC_GetPriorityGrouping>
 8000296:	4603      	mov	r3, r0
 8000298:	2200      	movs	r2, #0
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ffa9 	bl	80001f4 <NVIC_EncodePriority>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4619      	mov	r1, r3
 80002a6:	200e      	movs	r0, #14
 80002a8:	f7ff ff7a 	bl	80001a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002ac:	200e      	movs	r0, #14
 80002ae:	f7ff ff5b 	bl	8000168 <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80002b2:	f7ff ff4b 	bl	800014c <__NVIC_GetPriorityGrouping>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2200      	movs	r2, #0
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff99 	bl	80001f4 <NVIC_EncodePriority>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4619      	mov	r1, r3
 80002c6:	200f      	movs	r0, #15
 80002c8:	f7ff ff6a 	bl	80001a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002cc:	200f      	movs	r0, #15
 80002ce:	f7ff ff4b 	bl	8000168 <__NVIC_EnableIRQ>

}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002e2:	699a      	ldr	r2, [r3, #24]
 80002e4:	4907      	ldr	r1, [pc, #28]	; (8000304 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4313      	orrs	r3, r2
 80002ea:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002ee:	699a      	ldr	r2, [r3, #24]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4013      	ands	r3, r2
 80002f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002f6:	68fb      	ldr	r3, [r7, #12]
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	b29a      	uxth	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	615a      	str	r2, [r3, #20]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
	...

08000328 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800033c:	2010      	movs	r0, #16
 800033e:	f7ff ffcb 	bl	80002d8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000342:	2020      	movs	r0, #32
 8000344:	f7ff ffc8 	bl	80002d8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000348:	2008      	movs	r0, #8
 800034a:	f7ff ffc5 	bl	80002d8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800034e:	2004      	movs	r0, #4
 8000350:	f7ff ffc2 	bl	80002d8 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(STATE_LED_GPIO_Port, STATE_LED_Pin);
 8000354:	4912      	ldr	r1, [pc, #72]	; (80003a0 <MX_GPIO_Init+0x78>)
 8000356:	4813      	ldr	r0, [pc, #76]	; (80003a4 <MX_GPIO_Init+0x7c>)
 8000358:	f7ff ffd6 	bl	8000308 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(NET_LED_GPIO_Port, NET_LED_Pin);
 800035c:	4910      	ldr	r1, [pc, #64]	; (80003a0 <MX_GPIO_Init+0x78>)
 800035e:	4812      	ldr	r0, [pc, #72]	; (80003a8 <MX_GPIO_Init+0x80>)
 8000360:	f7ff ffd2 	bl	8000308 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = STATE_LED_Pin;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_GPIO_Init+0x78>)
 8000366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000368:	2301      	movs	r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800036c:	2302      	movs	r3, #2
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(STATE_LED_GPIO_Port, &GPIO_InitStruct);
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	480a      	ldr	r0, [pc, #40]	; (80003a4 <MX_GPIO_Init+0x7c>)
 800037a:	f000 fd58 	bl	8000e2e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NET_LED_Pin;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_GPIO_Init+0x78>)
 8000380:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000382:	2301      	movs	r3, #1
 8000384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000386:	2302      	movs	r3, #2
 8000388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(NET_LED_GPIO_Port, &GPIO_InitStruct);
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4619      	mov	r1, r3
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_GPIO_Init+0x80>)
 8000394:	f000 fd4b 	bl	8000e2e <LL_GPIO_Init>

}
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	04200020 	.word	0x04200020
 80003a4:	40011000 	.word	0x40011000
 80003a8:	40010c00 	.word	0x40010c00

080003ac <__NVIC_SetPriorityGrouping>:
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f003 0307 	and.w	r3, r3, #7
 80003ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <__NVIC_SetPriorityGrouping+0x44>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003c2:	68ba      	ldr	r2, [r7, #8]
 80003c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003c8:	4013      	ands	r3, r2
 80003ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003de:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <__NVIC_SetPriorityGrouping+0x44>)
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	60d3      	str	r3, [r2, #12]
}
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <LL_RCC_HSE_Enable+0x18>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a03      	ldr	r2, [pc, #12]	; (800040c <LL_RCC_HSE_Enable+0x18>)
 80003fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000402:	6013      	str	r3, [r2, #0]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <LL_RCC_HSE_IsReady+0x20>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000420:	bf0c      	ite	eq
 8000422:	2301      	moveq	r3, #1
 8000424:	2300      	movne	r3, #0
 8000426:	b2db      	uxtb	r3, r3
}
 8000428:	4618      	mov	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_RCC_SetSysClkSource+0x24>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	f023 0203 	bic.w	r2, r3, #3
 8000444:	4904      	ldr	r1, [pc, #16]	; (8000458 <LL_RCC_SetSysClkSource+0x24>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	604b      	str	r3, [r1, #4]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <LL_RCC_GetSysClkSource+0x14>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	f003 030c 	and.w	r3, r3, #12
}
 8000468:	4618      	mov	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000

08000474 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <LL_RCC_SetAHBPrescaler+0x24>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000484:	4904      	ldr	r1, [pc, #16]	; (8000498 <LL_RCC_SetAHBPrescaler+0x24>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	604b      	str	r3, [r1, #4]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004ac:	4904      	ldr	r1, [pc, #16]	; (80004c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	604b      	str	r3, [r1, #4]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004d4:	4904      	ldr	r1, [pc, #16]	; (80004e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4313      	orrs	r3, r2
 80004da:	604b      	str	r3, [r1, #4]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <LL_RCC_PLL_Enable+0x18>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a03      	ldr	r2, [pc, #12]	; (8000504 <LL_RCC_PLL_Enable+0x18>)
 80004f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fa:	6013      	str	r3, [r2, #0]
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000

08000508 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <LL_RCC_PLL_IsReady+0x20>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000518:	bf0c      	ite	eq
 800051a:	2301      	moveq	r3, #1
 800051c:	2300      	movne	r3, #0
 800051e:	b2db      	uxtb	r3, r3
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000

0800052c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	430b      	orrs	r3, r1
 8000548:	4903      	ldr	r1, [pc, #12]	; (8000558 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800054a:	4313      	orrs	r3, r2
 800054c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000

0800055c <LL_APB1_GRP1_EnableClock>:
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000566:	69da      	ldr	r2, [r3, #28]
 8000568:	4907      	ldr	r1, [pc, #28]	; (8000588 <LL_APB1_GRP1_EnableClock+0x2c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000572:	69da      	ldr	r2, [r3, #28]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4013      	ands	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <LL_APB2_GRP1_EnableClock>:
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000596:	699a      	ldr	r2, [r3, #24]
 8000598:	4907      	ldr	r1, [pc, #28]	; (80005b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4313      	orrs	r3, r2
 800059e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005a2:	699a      	ldr	r2, [r3, #24]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4013      	ands	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_FLASH_SetLatency+0x24>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f023 0207 	bic.w	r2, r3, #7
 80005cc:	4904      	ldr	r1, [pc, #16]	; (80005e0 <LL_FLASH_SetLatency+0x24>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	600b      	str	r3, [r1, #0]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40022000 	.word	0x40022000

080005e4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <LL_FLASH_GetLatency+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 0307 	and.w	r3, r3, #7
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	40022000 	.word	0x40022000

080005fc <LL_GPIO_AF_DisableRemap_SWJ>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_DisableRemap_SWJ
  * @note  DISABLE: JTAG-DP Disabled and SW-DP Disabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_DisableRemap_SWJ(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <LL_GPIO_AF_DisableRemap_SWJ+0x24>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <LL_GPIO_AF_DisableRemap_SWJ+0x24>)
 8000606:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800060a:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_DISABLE);
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <LL_GPIO_AF_DisableRemap_SWJ+0x24>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <LL_GPIO_AF_DisableRemap_SWJ+0x24>)
 8000612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000616:	6053      	str	r3, [r2, #4]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40010000 	.word	0x40010000

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff ffaf 	bl	800058c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800062e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000632:	f7ff ff93 	bl	800055c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000636:	2003      	movs	r0, #3
 8000638:	f7ff feb8 	bl	80003ac <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  LL_GPIO_AF_DisableRemap_SWJ();
 800063c:	f7ff ffde 	bl	80005fc <LL_GPIO_AF_DisableRemap_SWJ>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f808 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f7ff fe70 	bl	8000328 <MX_GPIO_Init>
  MX_DMA_Init();
 8000648:	f7ff fe1e 	bl	8000288 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800064c:	f000 fa62 	bl	8000b14 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x2c>
	...

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000658:	2002      	movs	r0, #2
 800065a:	f7ff ffaf 	bl	80005bc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800065e:	bf00      	nop
 8000660:	f7ff ffc0 	bl	80005e4 <LL_FLASH_GetLatency>
 8000664:	4603      	mov	r3, r0
 8000666:	2b02      	cmp	r3, #2
 8000668:	d1fa      	bne.n	8000660 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800066a:	f7ff fec3 	bl	80003f4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800066e:	bf00      	nop
 8000670:	f7ff fece 	bl	8000410 <LL_RCC_HSE_IsReady>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d1fa      	bne.n	8000670 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800067a:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800067e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000682:	f7ff ff53 	bl	800052c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000686:	f7ff ff31 	bl	80004ec <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800068a:	bf00      	nop
 800068c:	f7ff ff3c 	bl	8000508 <LL_RCC_PLL_IsReady>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d1fa      	bne.n	800068c <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff feec 	bl	8000474 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800069c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006a0:	f7ff fefc 	bl	800049c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ff0d 	bl	80004c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80006aa:	2002      	movs	r0, #2
 80006ac:	f7ff fec2 	bl	8000434 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80006b0:	bf00      	nop
 80006b2:	f7ff fed3 	bl	800045c <LL_RCC_GetSysClkSource>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d1fa      	bne.n	80006b2 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <SystemClock_Config+0x78>)
 80006be:	f000 fe35 	bl	800132c <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <SystemClock_Config+0x78>)
 80006c4:	f000 fe40 	bl	8001348 <LL_SetSystemCoreClock>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	044aa200 	.word	0x044aa200

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <HardFault_Handler+0x4>

080006e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <MemManage_Handler+0x4>

080006e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <BusFault_Handler+0x4>

080006ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <UsageFault_Handler+0x4>

080006f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <SystemInit+0x5c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <SystemInit+0x5c>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <SystemInit+0x5c>)
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	4911      	ldr	r1, [pc, #68]	; (80007a4 <SystemInit+0x5c>)
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <SystemInit+0x60>)
 8000760:	4013      	ands	r3, r2
 8000762:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x5c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <SystemInit+0x5c>)
 800076a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800076e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000772:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <SystemInit+0x5c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SystemInit+0x5c>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <SystemInit+0x5c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <SystemInit+0x5c>)
 8000786:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800078a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SystemInit+0x5c>)
 800078e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000792:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SystemInit+0x64>)
 8000796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079a:	609a      	str	r2, [r3, #8]
#endif 
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	f8ff0000 	.word	0xf8ff0000
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_EnableIRQ>:
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db0b      	blt.n	80007f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 021f 	and.w	r2, r3, #31
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <__NVIC_EnableIRQ+0x34>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	2001      	movs	r0, #1
 80007ee:	fa00 f202 	lsl.w	r2, r0, r2
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100

08000804 <__NVIC_SetPriority>:
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	; (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	; (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	; 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <LL_DMA_SetDataTransferDirection+0x44>)
 80008ce:	5cd3      	ldrb	r3, [r2, r3]
 80008d0:	461a      	mov	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	4413      	add	r3, r2
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008dc:	f023 0310 	bic.w	r3, r3, #16
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	3a01      	subs	r2, #1
 80008e4:	4906      	ldr	r1, [pc, #24]	; (8000900 <LL_DMA_SetDataTransferDirection+0x44>)
 80008e6:	5c8a      	ldrb	r2, [r1, r2]
 80008e8:	4611      	mov	r1, r2
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	440a      	add	r2, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	080013dc 	.word	0x080013dc

08000904 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3b01      	subs	r3, #1
 8000914:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <LL_DMA_SetMode+0x40>)
 8000916:	5cd3      	ldrb	r3, [r2, r3]
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f023 0220 	bic.w	r2, r3, #32
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	3b01      	subs	r3, #1
 8000928:	4906      	ldr	r1, [pc, #24]	; (8000944 <LL_DMA_SetMode+0x40>)
 800092a:	5ccb      	ldrb	r3, [r1, r3]
 800092c:	4619      	mov	r1, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	440b      	add	r3, r1
 8000932:	4619      	mov	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4313      	orrs	r3, r2
 8000938:	600b      	str	r3, [r1, #0]
             Mode);
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	080013dc 	.word	0x080013dc

08000948 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	3b01      	subs	r3, #1
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <LL_DMA_SetPeriphIncMode+0x40>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4413      	add	r3, r2
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	3b01      	subs	r3, #1
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <LL_DMA_SetPeriphIncMode+0x40>)
 800096e:	5ccb      	ldrb	r3, [r1, r3]
 8000970:	4619      	mov	r1, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	440b      	add	r3, r1
 8000976:	4619      	mov	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4313      	orrs	r3, r2
 800097c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	080013dc 	.word	0x080013dc

0800098c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	3b01      	subs	r3, #1
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LL_DMA_SetMemoryIncMode+0x40>)
 800099e:	5cd3      	ldrb	r3, [r2, r3]
 80009a0:	461a      	mov	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	4413      	add	r3, r2
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	4906      	ldr	r1, [pc, #24]	; (80009cc <LL_DMA_SetMemoryIncMode+0x40>)
 80009b2:	5ccb      	ldrb	r3, [r1, r3]
 80009b4:	4619      	mov	r1, r3
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	440b      	add	r3, r1
 80009ba:	4619      	mov	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4313      	orrs	r3, r2
 80009c0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	080013dc 	.word	0x080013dc

080009d0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	3b01      	subs	r3, #1
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LL_DMA_SetPeriphSize+0x40>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	461a      	mov	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	4906      	ldr	r1, [pc, #24]	; (8000a10 <LL_DMA_SetPeriphSize+0x40>)
 80009f6:	5ccb      	ldrb	r3, [r1, r3]
 80009f8:	4619      	mov	r1, r3
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	440b      	add	r3, r1
 80009fe:	4619      	mov	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	080013dc 	.word	0x080013dc

08000a14 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LL_DMA_SetMemorySize+0x40>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	4906      	ldr	r1, [pc, #24]	; (8000a54 <LL_DMA_SetMemorySize+0x40>)
 8000a3a:	5ccb      	ldrb	r3, [r1, r3]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	440b      	add	r3, r1
 8000a42:	4619      	mov	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	080013dc 	.word	0x080013dc

08000a58 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000a6a:	5cd3      	ldrb	r3, [r2, r3]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4906      	ldr	r1, [pc, #24]	; (8000a98 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000a7e:	5ccb      	ldrb	r3, [r1, r3]
 8000a80:	4619      	mov	r1, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	440b      	add	r3, r1
 8000a86:	4619      	mov	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	080013dc 	.word	0x080013dc

08000a9c <LL_APB2_GRP1_EnableClock>:
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aa6:	699a      	ldr	r2, [r3, #24]
 8000aa8:	4907      	ldr	r1, [pc, #28]	; (8000ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	60da      	str	r2, [r3, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	615a      	str	r2, [r3, #20]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000b3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b40:	f7ff ffac 	bl	8000a9c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000b44:	2004      	movs	r0, #4
 8000b46:	f7ff ffa9 	bl	8000a9c <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000b4a:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <MX_USART1_UART_Init+0x14c>)
 8000b4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b4e:	2309      	movs	r3, #9
 8000b50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4841      	ldr	r0, [pc, #260]	; (8000c64 <MX_USART1_UART_Init+0x150>)
 8000b60:	f000 f965 	bl	8000e2e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b64:	4b40      	ldr	r3, [pc, #256]	; (8000c68 <MX_USART1_UART_Init+0x154>)
 8000b66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	483c      	ldr	r0, [pc, #240]	; (8000c64 <MX_USART1_UART_Init+0x150>)
 8000b72:	f000 f95c 	bl	8000e2e <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2105      	movs	r1, #5
 8000b7a:	483c      	ldr	r0, [pc, #240]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000b7c:	f7ff fe9e 	bl	80008bc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2105      	movs	r1, #5
 8000b84:	4839      	ldr	r0, [pc, #228]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000b86:	f7ff ff67 	bl	8000a58 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_CIRCULAR);
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	4837      	ldr	r0, [pc, #220]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000b90:	f7ff feb8 	bl	8000904 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2105      	movs	r1, #5
 8000b98:	4834      	ldr	r0, [pc, #208]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000b9a:	f7ff fed5 	bl	8000948 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	2105      	movs	r1, #5
 8000ba2:	4832      	ldr	r0, [pc, #200]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000ba4:	f7ff fef2 	bl	800098c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2105      	movs	r1, #5
 8000bac:	482f      	ldr	r0, [pc, #188]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000bae:	f7ff ff0f 	bl	80009d0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2105      	movs	r1, #5
 8000bb6:	482d      	ldr	r0, [pc, #180]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000bb8:	f7ff ff2c 	bl	8000a14 <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000bbc:	2210      	movs	r2, #16
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	482a      	ldr	r0, [pc, #168]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000bc2:	f7ff fe7b 	bl	80008bc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2104      	movs	r1, #4
 8000bca:	4828      	ldr	r0, [pc, #160]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000bcc:	f7ff ff44 	bl	8000a58 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_CIRCULAR);
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	4825      	ldr	r0, [pc, #148]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000bd6:	f7ff fe95 	bl	8000904 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2104      	movs	r1, #4
 8000bde:	4823      	ldr	r0, [pc, #140]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000be0:	f7ff feb2 	bl	8000948 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	2104      	movs	r1, #4
 8000be8:	4820      	ldr	r0, [pc, #128]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000bea:	f7ff fecf 	bl	800098c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	481e      	ldr	r0, [pc, #120]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000bf4:	f7ff feec 	bl	80009d0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <MX_USART1_UART_Init+0x158>)
 8000bfe:	f7ff ff09 	bl	8000a14 <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c02:	f7ff fdd5 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fe23 	bl	8000858 <NVIC_EncodePriority>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4619      	mov	r1, r3
 8000c16:	2025      	movs	r0, #37	; 0x25
 8000c18:	f7ff fdf4 	bl	8000804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000c1c:	2025      	movs	r0, #37	; 0x25
 8000c1e:	f7ff fdd5 	bl	80007cc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8000c22:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c26:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c34:	230c      	movs	r3, #12
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <MX_USART1_UART_Init+0x15c>)
 8000c48:	f000 faf6 	bl	8001238 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_USART1_UART_Init+0x15c>)
 8000c4e:	f7ff ff4c 	bl	8000aea <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_USART1_UART_Init+0x15c>)
 8000c54:	f7ff ff3a 	bl	8000acc <LL_USART_Enable>

}
 8000c58:	bf00      	nop
 8000c5a:	3730      	adds	r7, #48	; 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	04020002 	.word	0x04020002
 8000c64:	40010800 	.word	0x40010800
 8000c68:	04040004 	.word	0x04040004
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40013800 	.word	0x40013800

08000c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c76:	e003      	b.n	8000c80 <LoopCopyDataInit>

08000c78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c7e:	3104      	adds	r1, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c80:	480a      	ldr	r0, [pc, #40]	; (8000cac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c88:	d3f6      	bcc.n	8000c78 <CopyDataInit>
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c8c:	e002      	b.n	8000c94 <LoopFillZerobss>

08000c8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c90:	f842 3b04 	str.w	r3, [r2], #4

08000c94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c98:	d3f9      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c9a:	f7ff fd55 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f000 fb61 	bl	8001364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca2:	f7ff fcbf 	bl	8000624 <main>
  bx lr
 8000ca6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ca8:	080013ec 	.word	0x080013ec
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000cb0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000cb4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000cb8:	20000020 	.word	0x20000020

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>

08000cbe <LL_GPIO_SetPinMode>:
{
 8000cbe:	b490      	push	{r4, r7}
 8000cc0:	b088      	sub	sp, #32
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	0e1b      	lsrs	r3, r3, #24
 8000cd2:	4413      	add	r3, r2
 8000cd4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000cd6:	6822      	ldr	r2, [r4, #0]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	fab3 f383 	clz	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	210f      	movs	r1, #15
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	fa93 f3a3 	rbit	r3, r3
 8000d02:	61bb      	str	r3, [r7, #24]
  return result;
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	6023      	str	r3, [r4, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc90      	pop	{r4, r7}
 8000d20:	4770      	bx	lr

08000d22 <LL_GPIO_SetPinSpeed>:
{
 8000d22:	b490      	push	{r4, r7}
 8000d24:	b088      	sub	sp, #32
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	461a      	mov	r2, r3
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	0e1b      	lsrs	r3, r3, #24
 8000d36:	4413      	add	r3, r2
 8000d38:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	613b      	str	r3, [r7, #16]
  return result;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	2103      	movs	r1, #3
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	fa93 f3a3 	rbit	r3, r3
 8000d66:	61bb      	str	r3, [r7, #24]
  return result;
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fab3 f383 	clz	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	6023      	str	r3, [r4, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc90      	pop	{r4, r7}
 8000d84:	4770      	bx	lr

08000d86 <LL_GPIO_SetPinOutputType>:
{
 8000d86:	b490      	push	{r4, r7}
 8000d88:	b088      	sub	sp, #32
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	461a      	mov	r2, r3
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	0e1b      	lsrs	r3, r3, #24
 8000d9a:	4413      	add	r3, r2
 8000d9c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000d9e:	6822      	ldr	r2, [r4, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	613b      	str	r3, [r7, #16]
  return result;
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	fab3 f383 	clz	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	2104      	movs	r1, #4
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	fa93 f3a3 	rbit	r3, r3
 8000dca:	61bb      	str	r3, [r7, #24]
  return result;
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fab3 f383 	clz	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	6023      	str	r3, [r4, #0]
}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc90      	pop	{r4, r7}
 8000de8:	4770      	bx	lr

08000dea <LL_GPIO_SetPinPull>:
{
 8000dea:	b480      	push	{r7}
 8000dec:	b087      	sub	sp, #28
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	401a      	ands	r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	613b      	str	r3, [r7, #16]
  return result;
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	fab3 f383 	clz	r3, r3
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4619      	mov	r1, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	60da      	str	r2, [r3, #12]
}
 8000e24:	bf00      	nop
 8000e26:	371c      	adds	r7, #28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b088      	sub	sp, #32
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	0c1b      	lsrs	r3, r3, #16
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	fa93 f3a3 	rbit	r3, r3
 8000e4c:	60fb      	str	r3, [r7, #12]
  return result;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000e58:	e040      	b.n	8000edc <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d036      	beq.n	8000ed6 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	d806      	bhi.n	8000e7c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000e6e:	f240 1201 	movw	r2, #257	; 0x101
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	e008      	b.n	8000e8e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	3b08      	subs	r3, #8
 8000e80:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e8c:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	461a      	mov	r2, r3
 8000e94:	69b9      	ldr	r1, [r7, #24]
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff11 	bl	8000cbe <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffa0 	bl	8000dea <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d003      	beq.n	8000eba <LL_GPIO_Init+0x8c>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b09      	cmp	r3, #9
 8000eb8:	d10d      	bne.n	8000ed6 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	69b9      	ldr	r1, [r7, #24]
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff2d 	bl	8000d22 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff58 	bl	8000d86 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1b8      	bne.n	8000e5a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <LL_RCC_GetSysClkSource>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <LL_RCC_GetSysClkSource+0x14>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000

08000f0c <LL_RCC_GetAHBPrescaler>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <LL_RCC_GetAHBPrescaler+0x14>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40021000 	.word	0x40021000

08000f24 <LL_RCC_GetAPB1Prescaler>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000

08000f3c <LL_RCC_GetAPB2Prescaler>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	40021000 	.word	0x40021000

08000f54 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <LL_RCC_PLL_GetMainSource+0x14>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000

08000f6c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000

08000f84 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <LL_RCC_PLL_GetPrediv+0x18>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	0c5b      	lsrs	r3, r3, #17
 8000f8e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000fa8:	f000 f820 	bl	8000fec <RCC_GetSystemClockFreq>
 8000fac:	4602      	mov	r2, r0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f83a 	bl	8001030 <RCC_GetHCLKClockFreq>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f848 	bl	800105c <RCC_GetPCLK1ClockFreq>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f854 	bl	8001084 <RCC_GetPCLK2ClockFreq>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60da      	str	r2, [r3, #12]
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000ff6:	f7ff ff7d 	bl	8000ef4 <LL_RCC_GetSysClkSource>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d006      	beq.n	800100e <RCC_GetSystemClockFreq+0x22>
 8001000:	2b08      	cmp	r3, #8
 8001002:	d007      	beq.n	8001014 <RCC_GetSystemClockFreq+0x28>
 8001004:	2b00      	cmp	r3, #0
 8001006:	d109      	bne.n	800101c <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <RCC_GetSystemClockFreq+0x40>)
 800100a:	607b      	str	r3, [r7, #4]
      break;
 800100c:	e009      	b.n	8001022 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <RCC_GetSystemClockFreq+0x40>)
 8001010:	607b      	str	r3, [r7, #4]
      break;
 8001012:	e006      	b.n	8001022 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001014:	f000 f84a 	bl	80010ac <RCC_PLL_GetFreqDomain_SYS>
 8001018:	6078      	str	r0, [r7, #4]
      break;
 800101a:	e002      	b.n	8001022 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <RCC_GetSystemClockFreq+0x40>)
 800101e:	607b      	str	r3, [r7, #4]
      break;
 8001020:	bf00      	nop
  }

  return frequency;
 8001022:	687b      	ldr	r3, [r7, #4]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	007a1200 	.word	0x007a1200

08001030 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001038:	f7ff ff68 	bl	8000f0c <LL_RCC_GetAHBPrescaler>
 800103c:	4603      	mov	r3, r0
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <RCC_GetHCLKClockFreq+0x28>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	40d3      	lsrs	r3, r2
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	080013c4 	.word	0x080013c4

0800105c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001064:	f7ff ff5e 	bl	8000f24 <LL_RCC_GetAPB1Prescaler>
 8001068:	4603      	mov	r3, r0
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <RCC_GetPCLK1ClockFreq+0x24>)
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	40d3      	lsrs	r3, r2
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	080013d4 	.word	0x080013d4

08001084 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800108c:	f7ff ff56 	bl	8000f3c <LL_RCC_GetAPB2Prescaler>
 8001090:	4603      	mov	r3, r0
 8001092:	0adb      	lsrs	r3, r3, #11
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001096:	5cd3      	ldrb	r3, [r2, r3]
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	40d3      	lsrs	r3, r2
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	080013d4 	.word	0x080013d4

080010ac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80010ba:	f7ff ff4b 	bl	8000f54 <LL_RCC_PLL_GetMainSource>
 80010be:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <RCC_PLL_GetFreqDomain_SYS+0x22>
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d003      	beq.n	80010d4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80010cc:	e00b      	b.n	80010e6 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80010d0:	607b      	str	r3, [r7, #4]
      break;
 80010d2:	e00b      	b.n	80010ec <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80010d4:	f7ff ff56 	bl	8000f84 <LL_RCC_PLL_GetPrediv>
 80010d8:	4603      	mov	r3, r0
 80010da:	3301      	adds	r3, #1
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	607b      	str	r3, [r7, #4]
      break;
 80010e4:	e002      	b.n	80010ec <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80010e8:	607b      	str	r3, [r7, #4]
      break;
 80010ea:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80010ec:	f7ff ff3e 	bl	8000f6c <LL_RCC_PLL_GetMultiplicator>
 80010f0:	4603      	mov	r3, r0
 80010f2:	0c9b      	lsrs	r3, r3, #18
 80010f4:	3302      	adds	r3, #2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	003d0900 	.word	0x003d0900
 8001108:	007a1200 	.word	0x007a1200

0800110c <LL_USART_IsEnabled>:
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800111c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <LL_USART_SetStopBitsLength>:
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	611a      	str	r2, [r3, #16]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <LL_USART_SetHWFlowCtrl>:
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	615a      	str	r2, [r3, #20]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
	...

0800117c <LL_USART_SetBaudRate>:
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	009a      	lsls	r2, r3, #2
 8001192:	441a      	add	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
 800119c:	4a25      	ldr	r2, [pc, #148]	; (8001234 <LL_USART_SetBaudRate+0xb8>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	b299      	uxth	r1, r3
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009a      	lsls	r2, r3, #2
 80011b4:	441a      	add	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <LL_USART_SetBaudRate+0xb8>)
 80011c0:	fba3 0302 	umull	r0, r3, r3, r2
 80011c4:	095b      	lsrs	r3, r3, #5
 80011c6:	2064      	movs	r0, #100	; 0x64
 80011c8:	fb00 f303 	mul.w	r3, r0, r3
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	3332      	adds	r3, #50	; 0x32
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <LL_USART_SetBaudRate+0xb8>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	095b      	lsrs	r3, r3, #5
 80011da:	b29b      	uxth	r3, r3
 80011dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	440b      	add	r3, r1
 80011e4:	b299      	uxth	r1, r3
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	009a      	lsls	r2, r3, #2
 80011f0:	441a      	add	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <LL_USART_SetBaudRate+0xb8>)
 80011fc:	fba3 0302 	umull	r0, r3, r3, r2
 8001200:	095b      	lsrs	r3, r3, #5
 8001202:	2064      	movs	r0, #100	; 0x64
 8001204:	fb00 f303 	mul.w	r3, r0, r3
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	3332      	adds	r3, #50	; 0x32
 800120e:	4a09      	ldr	r2, [pc, #36]	; (8001234 <LL_USART_SetBaudRate+0xb8>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	095b      	lsrs	r3, r3, #5
 8001216:	b29b      	uxth	r3, r3
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	b29b      	uxth	r3, r3
 800121e:	440b      	add	r3, r1
 8001220:	b29b      	uxth	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	609a      	str	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	51eb851f 	.word	0x51eb851f

08001238 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff5e 	bl	800110c <LL_USART_IsEnabled>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d145      	bne.n	80012e2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800125e:	f023 030c 	bic.w	r3, r3, #12
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	6851      	ldr	r1, [r2, #4]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	68d2      	ldr	r2, [r2, #12]
 800126a:	4311      	orrs	r1, r2
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	6912      	ldr	r2, [r2, #16]
 8001270:	430a      	orrs	r2, r1
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff57 	bl	8001132 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff63 	bl	8001156 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe83 	bl	8000fa0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <LL_USART_Init+0xb4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d102      	bne.n	80012a8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	e00c      	b.n	80012c2 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <LL_USART_Init+0xb8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d102      	bne.n	80012b6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	e005      	b.n	80012c2 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LL_USART_Init+0xbc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80012d0:	2300      	movs	r3, #0
 80012d2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff4d 	bl	800117c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40013800 	.word	0x40013800
 80012f0:	40004400 	.word	0x40004400
 80012f4:	40004800 	.word	0x40004800

080012f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4a07      	ldr	r2, [pc, #28]	; (8001328 <LL_InitTick+0x30>)
 800130c:	3b01      	subs	r3, #1
 800130e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <LL_InitTick+0x30>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <LL_InitTick+0x30>)
 8001318:	2205      	movs	r2, #5
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001334:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffdd 	bl	80012f8 <LL_InitTick>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001350:	4a03      	ldr	r2, [pc, #12]	; (8001360 <LL_SetSystemCoreClock+0x18>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000000 	.word	0x20000000

08001364 <__libc_init_array>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	2500      	movs	r5, #0
 8001368:	4e0c      	ldr	r6, [pc, #48]	; (800139c <__libc_init_array+0x38>)
 800136a:	4c0d      	ldr	r4, [pc, #52]	; (80013a0 <__libc_init_array+0x3c>)
 800136c:	1ba4      	subs	r4, r4, r6
 800136e:	10a4      	asrs	r4, r4, #2
 8001370:	42a5      	cmp	r5, r4
 8001372:	d109      	bne.n	8001388 <__libc_init_array+0x24>
 8001374:	f000 f81a 	bl	80013ac <_init>
 8001378:	2500      	movs	r5, #0
 800137a:	4e0a      	ldr	r6, [pc, #40]	; (80013a4 <__libc_init_array+0x40>)
 800137c:	4c0a      	ldr	r4, [pc, #40]	; (80013a8 <__libc_init_array+0x44>)
 800137e:	1ba4      	subs	r4, r4, r6
 8001380:	10a4      	asrs	r4, r4, #2
 8001382:	42a5      	cmp	r5, r4
 8001384:	d105      	bne.n	8001392 <__libc_init_array+0x2e>
 8001386:	bd70      	pop	{r4, r5, r6, pc}
 8001388:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800138c:	4798      	blx	r3
 800138e:	3501      	adds	r5, #1
 8001390:	e7ee      	b.n	8001370 <__libc_init_array+0xc>
 8001392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001396:	4798      	blx	r3
 8001398:	3501      	adds	r5, #1
 800139a:	e7f2      	b.n	8001382 <__libc_init_array+0x1e>
 800139c:	080013e4 	.word	0x080013e4
 80013a0:	080013e4 	.word	0x080013e4
 80013a4:	080013e4 	.word	0x080013e4
 80013a8:	080013e8 	.word	0x080013e8

080013ac <_init>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	bf00      	nop
 80013b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	469e      	mov	lr, r3
 80013b6:	4770      	bx	lr

080013b8 <_fini>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr
