/*
 * uart.h
 *
 *  Created on: 2020年9月14日
 *      Author: Administrator
 */

#ifndef DRIVER_INC_UART_H_
#define DRIVER_INC_UART_H_

#include "stm32f10x.h"
#include "stdbool.h"
#include "config.h"

#define DATA_BITS_8 8
#define DATA_BITS_9 9

#define STOP_BITS_1 0
#define STOP_BITS_1_5 1
#define STOP_BITS_2 2


#define PARITY_NONE 0
#define PARITY_ODD 1
#define PARITY_EVEN 2


#define BAUD_RATE_2400 2400
#define BAUD_RATE_4800 4800
#define BAUD_RATE_9600 9600
#define BAUD_RATE_19200 19200
#define BAUD_RATE_38400 38400
#define BAUD_RATE_57600 57600
#define BAUD_RATE_115200 115200
#define BAUD_RATE_230400 230400
#define BAUD_RATE_460800 460800
#define BAUD_RATE_921600 921600
#define BAUD_RATE_2000000 2000000
#define BAUD_RATE_3000000 3000000

#define BIT_ORDER_LSB 0
#define BIT_ORDER_MSB 1

#define NRZ_NORMAL 0   /* Non Return to Zero : normal mode */
#define NRZ_INVERTED 1 /* Non Return to Zero : inverted mode */

#define UART_DMA_RB_BUFSZ 108

/* Default config for serial_configure structure */
#define UART_CONFIG_DEFAULT                     \
    {                                                 \
        BAUD_RATE_9600,          /* 9600 bits/s */  \
            DATA_BITS_8,         /* 8 databits */     \
            STOP_BITS_1,         /* 1 stopbit */      \
            PARITY_NONE,         /* No parity  */     \
            BIT_ORDER_LSB,       /* LSB first sent */ \
            NRZ_NORMAL,          /* Normal mode */    \
            UART_DMA_RB_BUFSZ, /* Buffer size */    \
            0                                         \
    }

struct uart_configure
{
    uint32_t baud_rate;

    uint32_t data_bits : 4;
    uint32_t stop_bits : 2;
    uint32_t parity : 2;
    uint32_t bit_order : 1;
    uint32_t invert : 1;
    uint32_t bufsz : 16;
    uint32_t reserved : 6;
};

struct uart_device{
  USART_TypeDef* uartx;
  IRQn_Type irq;

#ifdef USE_USART_DMA_RX
  struct uart_dma
  {
      /* dma channel */
      DMA_Channel_TypeDef *rx_ch;
      /* dma global flag */
      uint32_t rx_gl_flag;
      /* dma irq channel */
      uint8_t rx_irq_ch;
      /* setting receive len */
      uint8_t setting_recv_len;
      /* last receive index */
      uint8_t last_recv_index;
  } dma;
#endif
};

struct uart_data{
  struct uart_device* uart_device;
  bool flag;
  uint8_t stream_rx[UART_DMA_RB_BUFSZ];	// 单缓冲区
  uint8_t stream_tx[UART_DMA_RB_BUFSZ];
};

void hw_uart_init(void);

uint16_t uart_getc(void);
void uart_write(void);
void uart_read(struct uart_data * pdata);

#endif /* DRIVER_INC_UART_H_ */
