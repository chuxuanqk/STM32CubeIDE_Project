/*
 * exchange_dev.c
 *
 *  Created on: 2020年10月28日
 *      Author: Saber
 */

/********初始化扩展硬件*****************************************************************************************
    step 1 初始化片内外设
    step 2 注册实时任务
    setp 3 注册非实时任务
    setp 4 初始化虚拟硬件状态
    notice 1 显式注册实时定时任务，默认10个定时任务，增加再考虑所有定时任务总体指令数后，在common/timer.h中修改
    notice 2 建议定时指令总数不要超过1ms可执行指令数的30%
    notice 3 非实时定时器可注册任意数量，默认20个，在common/timer_callback.h中修改
    notice 4 系统最小初始化完成了主时钟、定时等功能，虚拟设备加载需要片内外设、中断、实时定时、非实时扫描等组件
**************************************************************************************************************/

#include <DALImaster.h>
#include "exchange_dev.h"

#include "bsp_uart.h"

#include "bsp_led_7seg.h"
#include "bsp_button.h"
#include "callback_functions.h"
#include "config_par.h"
#include "chan_data_can1.h"
#include "dalimaster_control_slave.h"
#include "keyboard_func.h"
#include "modbus_port_adjust.h"
#include "state_led.h"
#include "timer_callback.h"

void exchange_dev_init(void)
{
    struct Function_Loop_Str tmp_func_loop_str;
    Config_Data_Str *config_data = Get_Config_data();

    Read_Config_Form_Flash(config_data); //从Flash/EEPROM中载入保存的参数
    Cpu_GetId();                         //获取单片机全球唯一物理地址，作为设备MAC/虚拟设备根MAC

    //初始化系统滴答时钟计数1ms
    timer_creat((void *)TickHandler, 1, 0, true, NULL);

    //初始化led
    LED_IO_Init();
    timer_creat((void *)LED_Reflash_Output, 1, 0, true, NULL);

    // 初始化usart
    hw_uart_init();

    //初始化CAN1
    CAN1_ONECM_Bus_Init(); //初始化CAN1及缓冲区
    timer_creat((void *)CAN1_Err_Timer, 1, 0, true, NULL);

    //初始化键盘
    bsp_InitButtonVar();                                    //初始化按键键盘
    timer_creat((void *)bsp_Button_Tick, 1, 0, true, NULL); //注册按键键盘实时刷新定时器，一直重复，1ms定时

    //初始化7段数码管
    LED_7SEG_Init();
    timer_creat((void *)LED_7SEG_DEC_SHOW, 1, 0, true, NULL);

    //初始化dali master
    hw_dalimaster_init();
    Dali_Init_Control();
    timer_creat((void *)Dali_Set_RecvFlag, 300, 0, true, NULL);

    //初始化组合设备
    //    tmp_func_loop_str.param = NULL; //参数缺省

    // DALI 各通道状态更新
    tmp_func_loop_str.callback = Dali_Reflash_Output;
    Register_To_Functions_Loop(&tmp_func_loop_str);
    tmp_func_loop_str.callback = Dali_Reflash_Output;
    Register_To_Functions_Loop(&tmp_func_loop_str);

    // CAN1接收处理
    tmp_func_loop_str.callback = CAN1_Ports_Adjust; //CAN1接收处理
    Register_To_Functions_Loop(&tmp_func_loop_str);

    // 按键扫描处理
    tmp_func_loop_str.callback = (void *)KeySeg_Press_Control;
    Register_To_Functions_Loop(&tmp_func_loop_str);
}
